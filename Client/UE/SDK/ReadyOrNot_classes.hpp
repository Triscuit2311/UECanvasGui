#pragma once

namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x128 (0x158 - 0x30)
// Class ReadyOrNot.AchievementSubsystem
class UAchievementSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                        Pad_1154[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EAchievementStats, struct FUniversalStat> AchievementStats;                                  // 0x38(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_1157[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class ABaseItem*>                       UsedItemsInCurrentMission;                         // 0x98(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_1159[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ULocalAchievements*                    LocalAchievements;                                 // 0x138(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URequestStatsAndAchievements*          RequestStatAndAchievements;                        // 0x140(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreStatsAndAchievements*            StoreStatsAndAchievements;                         // 0x148(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UIndicateAchievementProgress*          UserAchievementProgress;                           // 0x150(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAchievementSubsystem* GetDefaultObj();

	void UserAchievementProgressSuccess(int32 SteamErrorOutput);
	void UserAchievementProgressFailure(int32 SteamErrorOutput);
	void UsedItem(class ABaseItem* Item);
	void StoreStatsAndAchievementsSuccess(int32 SteamErrorOutput);
	void StoreStatsAndAchievementsFailure(int32 SteamErrorOutput);
	void QueryAchievementsAndStatsSuccess(int32 SteamErrorOutput);
	void QueryAchievementsAndStatsFailure(int32 SteamErrorOutput);
	void IndicateUserAchievementProgress(enum class EAchievement Achievement, int32 Progress, int32 MaxProgress);
	bool HasOnlyUsedItems(const TArray<enum class EItemCategory>& Categories);
	void EndMission(class UObject* WorldContextObject);
	void BeginMission();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AchievementStatics
class UAchievementStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAchievementStatics* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class ReadyOrNot.LocalAchievements
class ULocalAchievements : public USaveGame
{
public:
	TMap<enum class EAchievementStats, struct FUniversalStat> Stats;                                             // 0x28(0x50)(NativeAccessSpecifierPrivate)
	TArray<enum class EAchievement>              Achievements;                                      // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ULocalAchievements* GetDefaultObj();

};

// 0x18 (0x338 - 0x320)
// Class ReadyOrNot.ActivatableBaseWidget
class UActivatableBaseWidget : public UCommonActivatableWidget
{
public:
	struct FVector2D                             MouseAxisDeltaThreshold;                           // 0x320(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             GamepadAxisDeltaThreshold;                         // 0x328(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotGameState*                  RONGS;                                             // 0x330(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UActivatableBaseWidget* GetDefaultObj();

	bool UpdateDebugInfo();
	void ToggleWidgetVisibility(bool bNotHitTestable);
	void StopWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation);
	void ShowWidget(bool bNotHitTestable);
	void PlayWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation, bool bRestartIfAlreadyPlaying);
	void PlaySoundEffect(class UFMODEvent* SoundEffectToPlay);
	void PauseWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation);
	bool IsMouseAxisBeyondThreshold(struct FVector2D& InMouseDelta);
	bool IsGamepadAxisBeyondThreshold(struct FVector2D& InGamepadAxis);
	bool IsBlockingAnimationPlaying();
	void HideWidget();
	bool HasMouseMoved();
	struct FVector2D GetMousePosition();
	struct FVector2D GetMouseDelta();
	struct FVector2D GetCenterScreenPosition();
};

// 0xF8 (0x128 - 0x30)
// Class ReadyOrNot.ActivityData
class UActivityData : public UDataAsset
{
public:
	enum class EActivity                         Activity;                                          // 0x30(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1259[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSwatCommandData                      SwatCommandData;                                   // 0x38(0x38)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTutorialWidgetData                   WidgetData;                                        // 0x70(0x78)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                        ActionsRequired;                                   // 0xE8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeRequired;                                      // 0xEC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnComplete;                                        // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x100(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_125C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotCharacter*>          CharactersKilled;                                  // 0x118(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UActivityData* GetDefaultObj();

	void OnWeaponTacticalReload(class APlayerCharacter* DelegatePlayerCharacter);
	void OnWeaponSwitchAmmoType(class APlayerCharacter* DelegatePlayerCharacter);
	void OnWeaponReload(class APlayerCharacter* DelegatePlayerCharacter);
	void OnWeaponFireModeChanged(class APlayerCharacter* DelegatePlayerCharacter, enum class EFireMode NewFireMode, enum class EFireMode LastFireMode);
	void OnWeaponFire(class AReadyOrNotCharacter* Character, class ABaseMagazineWeapon* Weapon, const struct FVector& FireDirection);
	void OnTeamViewSet(class AReadyOrNotCharacter* NewViewCharacter);
	void OnTargetHit(class ATrainingTarget* Target);
	void OnSwatElementChanged(enum class ETeamType TeamType);
	void OnSwatCommandQueued(const struct FQueuedSwatCommand& QueuedSwatCommand, enum class ETeamType TeamType);
	void OnSwatCommandIssued(enum class ESwatCommand SwatCommand, enum class ETeamType TeamType, class AActor* ContextActor);
	void OnNightVisionGogglesToggled(class AReadyOrNotCharacter* Character, bool bOn);
	void OnItemUseStart(class ABaseItem* Item);
	void OnItemUseCompleted(class ABaseItem* Item);
	void OnItemEquipped(class ABaseItem* Item);
	void OnInteract(class UInteractableComponent* InteractableComponent);
	void OnExfiltrateMission();
	void OnEvidenceCollected(class AActor* Evidence);
	void OnDoorKicked(class ADoor* Door, class AReadyOrNotCharacter* InstigatorCharacter, bool bSuccess);
	void OnChemlightThrown(class APlayerCharacter* DelegatePlayerCharacter);
	void OnCharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void OnCharacterKilled(class AReadyOrNotCharacter* Character, class AReadyOrNotCharacter* KilledBy);
	void OnCharacterArrested(class AReadyOrNotCharacter* Character, class AReadyOrNotCharacter* ArrestedBy);
	void OnCantedSightToggled(bool bUsingCantedSight);
	void OnAttachmentLightToggled();
	bool IsComplete();
	void CompleteActivity();
};

// 0x70 (0x98 - 0x28)
// Class ReadyOrNot.ActivityState
class UActivityState : public UObject
{
public:
	uint8                                        Pad_1290[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Name;                                              // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ID;                                                // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Uptime;                                            // 0x6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActivityFiniteStateMachine*           StateMachineOwner;                                 // 0x70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActivityStateTransition>      StateTransitions;                                  // 0x78(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1295[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActivityState* GetDefaultObj();

	class UActivityState* RemoveTransitionByName(const class FString& InName);
	class UActivityState* RemoveTransitionByID(int32 InID);
	TArray<struct FActivityStateTransition> GetTransitions();
	class UActivityState* CreateTransition(struct FActivityStateTransition& InStateTransition);
};

// 0x20 (0x48 - 0x28)
// Class ReadyOrNot.ActivityFiniteStateMachine
class UActivityFiniteStateMachine : public UObject
{
public:
	TArray<class UActivityState*>                States;                                            // 0x28(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	class UActivityState*                        ActiveState;                                       // 0x38(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bMachineInitialized : 1;                           // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_12DB[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActivityFiniteStateMachine* GetDefaultObj();

	bool IsMachineInitialized();
	class UActivityState* GetStateByName(const class FString& InStateName);
	class UActivityState* GetStateByID(int32 InStateID);
	class UActivityState* GetActiveState();
	class UActivityState* AddState(const class FString& NewStateName, const TArray<struct FActivityStateTransition>& Transitions);
};

// 0x70 (0xB0 - 0x40)
// Class ReadyOrNot.ActivityManager
class UActivityManager : public UTickableWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnStartActivity;                                   // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UBaseActivity*>                 AllActivities;                                     // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class UBaseActivity>, float> ActivityClassGlobalCooldownMap;                    // 0x60(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UActivityManager* GetDefaultObj();

	void OnStartActivity__DelegateSignature(class UBaseActivity* Activity, class ACyberneticController* Controller);
	bool IsActivityClassOnCooldown_WithTimeRemaining(TSubclassOf<class UBaseActivity> Class, float* TimeRemaining);
	bool IsActivityClassOnCooldown(TSubclassOf<class UBaseActivity> Class);
	bool GiveActivityTo(class UBaseActivity* InActivity, class ACyberneticCharacter* InCharacter, bool bOverrideCurrentActivity, bool bClearActivityList);
	class UBaseActivity* CreateActivity(class UObject* ContextObject, TSubclassOf<class UBaseActivity> InActivityClass, const class FString& InActivityName, float InActivityStartDelay);
};

// 0xB0 (0x2D8 - 0x228)
// Class ReadyOrNot.ActivityTriggerVolume
class AActivityTriggerVolume : public ATriggerBox
{
public:
	TArray<struct FActivityEvent>                ActivationEvents;                                  // 0x228(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FActivityEvent>                OnEnterEvents;                                     // 0x238(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UActivityData*>                 Activities;                                        // 0x248(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FActivityEvent>                OnLeaveEvents;                                     // 0x258(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FActivityEvent>                CompletionEvents;                                  // 0x268(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class AActivityTriggerVolume> NextTransitionVolume;                              // 0x278(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        TransitionDelay;                                   // 0x2A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bStartActive;                                      // 0x2A4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_133A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ActivityDelay;                                     // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bTriggerEventsWhileInactive;                       // 0x2AC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bDrawDebug;                                        // 0x2AD(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_133B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x2B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                          ActivateDelayTimerHandle;                          // 0x2B8(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_133E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAllActivitiesComplete;                           // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AActivityTriggerVolume* GetDefaultObj();

	void ResetAllProgress();
	void Reactivate(float ReactivateDelay);
	void OnSpawnedAiKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnPlayerEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnPlayerBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActivityComplete(class UActivityData* Activity);
	bool IsActive();
	TArray<class UActivityData*> GetActivities();
	void Deactivate();
	bool AllActivitiesComplete();
	void Activate();
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.ActorSpawnPoint
class AActorSpawnPoint : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   BillboardComponent;                                // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasVisited : 1;                                   // Mask: 0x1, PropSize: 0x10x230(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1343[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AActorSpawnPoint* GetDefaultObj();

};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.AdminGameControls
class UAdminGameControls : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UAdminGameControls* GetDefaultObj();

	void KickPlayer(class APlayerState* KickingPlayerState, class FText Reason);
	bool IsAdmin();
	void GetKickablePlayers(TArray<class APlayerState*>* KickablePlayers);
};

// 0x30 (0x58 - 0x28)
// Class ReadyOrNot.AIAction
class UAIAction : public UObject
{
public:
	uint8                                        Pad_13A7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          Tags;                                              // 0x30(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ACyberneticController*                 OwningController;                                  // 0x40(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13AB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastMoveRequestPathID;                             // 0x4C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastMoveRequestMoveID;                             // 0x50(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13AD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIAction* GetDefaultObj();

	bool WantsAbort();
	void Tick_Blueprint(float DeltaTime);
	bool ShouldPerformAction();
	void RequestMove(const struct FVector& Location, float AcceptanceRadius);
	void OnTakenDamage_Blueprint(float Damage, class AReadyOrNotCharacter* Instigator);
	void OnSucceededToConsider_Blueprint();
	void OnPathFound_Blueprint(int32 PathId, enum class ERonNavigationQueryResult Result);
	void OnPathFound(int32 PathId, enum class ERonNavigationQueryResult Result);
	void OnMoveComplete_Blueprint(class AAIController* Controller, int32 RequestID);
	void OnMoveComplete(class AAIController* Controller, int32 RequestID);
	void OnFailedToConsider_Blueprint();
	void OnCreate_Blueprint(class ACyberneticController* Controller);
	void InitAction_Blueprint(class ACyberneticController* Controller);
	bool HasTag(class FName Tag);
	class FName GetMoveStyleOverride();
	class ACyberneticCharacter* GetCharacter();
	int32 GetActionRunCount();
	struct FAIActionData GetActionData();
	class FString GatherDebugInfo();
	void EndAction_Blueprint();
	void BeginAction_Blueprint();
	void AbortAction();
};

// 0xB0 (0xD8 - 0x28)
// Class ReadyOrNot.AIActionConsideration
class UAIActionConsideration : public UObject
{
public:
	uint8                                        bManualCurveEdit : 1;                              // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCustomCurveFunction : 1;                          // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_CB : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EEasingFunc                       CurveType;                                         // 0x29(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInverseX : 1;                                     // Mask: 0x1, PropSize: 0x10x2A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInverseY : 1;                                     // Mask: 0x2, PropSize: 0x10x2A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bClamp : 1;                                        // Mask: 0x4, PropSize: 0x10x2A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_CC : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13C8[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRuntimeFloatCurve                    Curve;                                             // 0x30(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        bCustomRange : 1;                                  // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_CD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13CA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinRange;                                          // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxRange;                                          // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OffsetX;                                           // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OffsetY;                                           // 0xC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Exponent;                                          // 0xCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SubStep;                                           // 0xD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERichCurveInterpMode              InterpMode;                                        // 0xD4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERichCurveTangentMode             TangentMode;                                       // 0xD5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13CE[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIActionConsideration* GetDefaultObj();

	float Score(struct FAIActionDecisionContext& Context, bool* bSuccess);
	float EvaluateResponseCurve(float Score);
	float CalculateCurve(float X);
};

// 0x10 (0xE8 - 0xD8)
// Class ReadyOrNot.ACNumberOfNearbyAI
class UACNumberOfNearbyAI : public UAIActionConsideration
{
public:
	enum class ETeamType                         TeamType;                                          // 0xD8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13D2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SearchRange;                                       // 0xDC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bMustBeVisible;                                    // 0xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_13D3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UACNumberOfNearbyAI* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_Health
class UAC_Health : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_Health* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_TargetHealth
class UAC_TargetHealth : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_TargetHealth* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_IncapacitationHealth
class UAC_IncapacitationHealth : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_IncapacitationHealth* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_Ammo
class UAC_Ammo : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_Ammo* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_Armor
class UAC_Armor : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_Armor* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_Morale
class UAC_Morale : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_Morale* GetDefaultObj();

};

// 0x0 (0xD8 - 0xD8)
// Class ReadyOrNot.AC_Stress
class UAC_Stress : public UAIActionConsideration
{
public:

	static class UClass* StaticClass();
	static class UAC_Stress* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AIActionGate
class UAIActionGate : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAIActionGate* GetDefaultObj();

	bool CanOpen(struct FAIActionDecisionContext& Context);
};

// 0x8 (0x30 - 0x28)
// Class ReadyOrNot.AGValidTarget
class UAGValidTarget : public UAIActionGate
{
public:
	bool                                         bAllowFriendly;                                    // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowEnemy;                                       // 0x29(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowNeutral;                                     // 0x2A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowLastTrackedTarget;                           // 0x2B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13ED[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAGValidTarget* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class ReadyOrNot.AGAnyNearbyAI
class UAGAnyNearbyAI : public UAIActionGate
{
public:
	enum class ETeamType                         TeamType;                                          // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13EE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SearchRange;                                       // 0x2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMustBeVisible;                                    // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAGAnyNearbyAI* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class ReadyOrNot.AGNumActiveAI
class UAGNumActiveAI : public UAIActionGate
{
public:
	enum class ETeamType                         Team;                                              // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NumAI;                                             // 0x29(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EComparisonOp                     ComparisonType;                                    // 0x2A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F3[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAGNumActiveAI* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AG_HasEquippedItem
class UAG_HasEquippedItem : public UAIActionGate
{
public:

	static class UClass* StaticClass();
	static class UAG_HasEquippedItem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AG_HasEquippedWeapon
class UAG_HasEquippedWeapon : public UAIActionGate
{
public:

	static class UClass* StaticClass();
	static class UAG_HasEquippedWeapon* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class ReadyOrNot.AG_IsSurrendered
class UAG_IsSurrendered : public UAIActionGate
{
public:
	float                                        Time;                                              // 0x28(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAG_IsSurrendered* GetDefaultObj();

};

// 0x2D0 (0x300 - 0x30)
// Class ReadyOrNot.AIActionPresetData
class UAIActionPresetData : public UDataAsset
{
public:
	struct FAIActionData                         Action;                                            // 0x30(0x2D0)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAIActionPresetData* GetDefaultObj();

};

// 0x100 (0x130 - 0x30)
// Class ReadyOrNot.AIArchetypeData
class UAIArchetypeData : public UDataAsset
{
public:
	class FString                                Name;                                              // 0x30(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableAlertActions : 1;                           // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1402[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAIActionDataContainer>        AlertActions;                                      // 0x48(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEnableUnalertActions : 1;                         // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1403[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAIActionDataContainer>        UnalertActions;                                    // 0x60(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEnableSuspiciousActions : 1;                      // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1404[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAIActionDataContainer>        SuspiciousActions;                                 // 0x78(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEnableContinuousActions : 1;                      // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1405[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAIActionData_NameOnly>        ContinuousActions;                                 // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAIActionDataContainer>        ContinuousActionsCache;                            // 0xA0(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEnableCombatMoveActions : 1;                      // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D4 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1406[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAIActionDataContainer>        CombatMoveActions;                                 // 0xB8(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEnableTraitActions : 1;                           // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1407[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAITraitActionData>            TraitActions;                                      // 0xD0(0x10)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAimSettings : 1;                          // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1409[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FocalPointInterpSpeed;                             // 0xE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAlphaBlendOption                 FocalPointInterpCurve;                             // 0xE8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FocusTurnSpeed;                                    // 0xEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnDegreesPerSecond;                              // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActorRotationInterpStandingSpeed;                  // 0xF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActorRotationInterpMovingSpeed;                    // 0xF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimOffsetInterpSpeed;                              // 0xFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreDamageHitReactions : 1;                     // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_140D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EAIAwarenessState>         AllowCombatMoveInState;                            // 0x108(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bSuppressionRequiresLOSOnLastKnownEnemyPosition : 1; // Mask: 0x1, PropSize: 0x10x118(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAccuracyOverride : 1;                             // Mask: 0x2, PropSize: 0x10x118(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D8 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1410[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Accuracy;                                          // 0x11C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMoraleOverride : 1;                               // Mask: 0x1, PropSize: 0x10x120(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1412[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinMorale;                                         // 0x124(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxMorale;                                         // 0x128(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableVO : 1;                                    // Mask: 0x1, PropSize: 0x10x12C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1413[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAIArchetypeData* GetDefaultObj();

};

// 0x30 (0x290 - 0x260)
// Class ReadyOrNot.AICombatMovesWidget
class UAICombatMovesWidget : public UUserWidget
{
public:
	class UVerticalBox*                          CombatMoves_VerticalBox;                           // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            AIName_TextBlock;                                  // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                               NextAI_Button;                                     // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACyberneticCharacter*                  CurrentAI;                                         // 0x278(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAICombatMovesWidgetEntry> WidgetEntryClass;                                  // 0x280(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               AIWorldWidgetClass;                                // 0x288(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAICombatMovesWidget* GetDefaultObj();

	void SetAIToFocus(class ACyberneticCharacter* CyberneticCharacter);
	void OnNextAIButtonClicked();
};

// 0x20 (0x280 - 0x260)
// Class ReadyOrNot.AICombatMovesWidgetEntry
class UAICombatMovesWidgetEntry : public UUserWidget
{
public:
	class UTextBlock*                            CombatAction_TextBlock;                            // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            SuccessfulConsiderations_TextBlock;                // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            FailedConsiderations_TextBlock;                    // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            RunTime_TextBlock;                                 // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAICombatMovesWidgetEntry* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class ReadyOrNot.AIData
class UAIData : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UAIData* GetDefaultObj();

};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.AIFactionManager
class AAIFactionManager : public AActor
{
public:
	uint8                                        bGroupIntoTeams : 1;                               // Mask: 0x1, PropSize: 0x10x220(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_DC : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1463[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TeamsOf;                                           // 0x224(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAssignRandomTeamTactics : 1;                      // Mask: 0x1, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_DD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1464[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFactionTeamTactics>           TacticsPool;                                       // 0x230(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFactionSuspectTeam>           SuspectTeams;                                      // 0x240(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ACyberneticCharacter*>          Characters;                                        // 0x250(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ACyberneticCharacter*>          Leaders;                                           // 0x260(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                        TeamBehaviourStrengthReductionSpeed;               // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TeamBehaviourOverrideStrength;                     // 0x274(0x4)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AAIFactionManager* GetDefaultObj();

	void OnAllAISpawned_Blueprint();
	void OnAISpottedNeutral_Blueprint(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Neutral);
	void OnAISpottedNeutral(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Neutral);
	void OnAISpottedFriendly_Blueprint(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Friendly);
	void OnAISpottedFriendly(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Friendly);
	void OnAISpottedEnemy_Blueprint(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Enemy);
	void OnAISpottedEnemy(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Enemy);
	void OnAIAdded_Blueprint(class ACyberneticCharacter* Character);
	bool IsTeamFull(struct FFactionSuspectTeam& InTeam);
	bool IsSuspectInTeam(class ASuspectCharacter* InSuspect, struct FFactionSuspectTeam* OutTeam);
	bool GetTeamTacticFor(class ASuspectCharacter* InSuspect, enum class EAITeamTactic* OutTactic);
	int32 GetTeamIndex(class ASuspectCharacter* InSuspect);
	bool GetSuspectsInTeam(class ASuspectCharacter* InSuspect, TArray<class ASuspectCharacter*>* OutSuspects, bool bIncludeSelf);
	TArray<class ASuspectCharacter*> GetAllSuspects();
	TArray<class ACyberneticCharacter*> GetAllLeaders();
	TArray<class ACivilianCharacter*> GetAllCivilians();
	TArray<class ACyberneticCharacter*> GetAllCharacters();
	class ASuspectCharacter* FindClosestSuspect(TArray<class ASuspectCharacter*>& OtherSuspects, class ASuspectCharacter* Suspect, float MaxDistance);
	bool AreTeamSpotsAvailable(int32* OutIndex);
	void AlertOtherSuspectsInTeam_Blueprint(class ASuspectCharacter* Suspect, class AReadyOrNotCharacter* Enemy);
};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.AISelectionDebugWidget
class UAISelectionDebugWidget : public UUserWidget
{
public:
	class UTextBlock*                            AIName_TextBlock;                                  // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAISelectionDebugWidget* GetDefaultObj();

};

// 0xD0 (0x2F0 - 0x220)
// Class ReadyOrNot.AISpawn
class AAISpawn : public AActor
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x220(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bAllowExplosiveVestSpawn;                          // 0x221(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnChance;                                       // 0x224(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        GroupID;                                           // 0x228(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146B[0x8F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSpawnData>                    SpawnArray;                                        // 0x2B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ABaseWeapon>               GlobalWeaponOverride;                              // 0x2C8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIArchetypeData*                      ArchetypeOverride;                                 // 0x2D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  SpawnedCharacter;                                  // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       DefaultScene;                                      // 0x2E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArrowComponent*                       SpawnDirection;                                    // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AAISpawn* GetDefaultObj();

	enum class ETeamType GetSpawningTeamType(struct FSpawnData& Sd);
	bool DoSpawn();
};

// 0x58 (0x108 - 0xB0)
// Class ReadyOrNot.ResourceComponent
class UResourceComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            OnFullResource;                                    // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLowResource;                                     // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDepletedResource;                                // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                  ResourceName;                                      // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Resource;                                          // 0xE8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxResource;                                       // 0xEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxResourceLimit;                                  // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LowResourceThreshold;                              // 0xF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OriginalMaxResource;                               // 0xF8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LowResource;                                       // 0xFC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousResource;                                  // 0x100(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUnlimited : 1;                                    // Mask: 0x1, PropSize: 0x10x104(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_14A3[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UResourceComponent* GetDefaultObj();

	void UpdatePreviousResource();
	void ToggleUnlimitedResource();
	void SetUnlimitedResource(bool bEnabled);
	void SetResource(float NewResourceAmount);
	void SetMaxResource(float NewMaxResource);
	void SetCurrentResourceToMax();
	void Server_UpdatePreviousResource();
	void Server_ToggleUnlimitedResource();
	void Server_SetUnlimitedResource(bool bEnabled);
	void Server_SetResource(float NewResourceAmount);
	void Server_SetMaxResource(float NewMaxResource);
	void Server_SetCurrentResourceToMax();
	void Server_ResetResource();
	void Server_InitResource();
	void Server_IncreaseResource(float Amount);
	void Server_EnableUnlimitedResource();
	void Server_DisableUnlimitedResource();
	void Server_DepleteResource();
	void Server_DecreaseResource(float Amount);
	void ResetResource();
	void OnLowResourceSignature__DelegateSignature(float Resource);
	void OnFullResourceSignature__DelegateSignature();
	void OnDepletedResourceSignature__DelegateSignature();
	bool IsUnlimitedResourceEnabled();
	bool IsResourceBelow(float ResourceValue);
	bool IsResourceAtOrBelow(float ResourceValue);
	bool IsResourceAtOrAbove(float ResourceValue);
	bool IsResourceAt(float ResourceValue);
	bool IsResourceAbove(float ResourceValue);
	bool IsLowResource();
	bool IsHalfResource();
	bool IsFullResource();
	bool IsDepleted();
	void IncreaseResourceByRate(float Rate);
	float IncreaseResource_Expression(float Amount);
	void IncreaseResource(float Amount);
	bool HasResource();
	class FName GetResourceName();
	float GetPreviousResource();
	float GetOriginalMaxResource();
	float GetNormalizedResource();
	float GetMaxResource();
	float GetLowResourceThreshold();
	float GetLowResource();
	float GetHalfResource();
	float GetCurrentResource();
	void EnableUnlimitedResource();
	void DisableUnlimitedResource();
	void DepleteResource();
	void DecreaseResourceByRate(float Rate);
	float DecreaseResource_Expression(float Amount);
	void DecreaseResource(float Amount);
};

// 0x8 (0x110 - 0x108)
// Class ReadyOrNot.AmmoComponent
class UAmmoComponent : public UResourceComponent
{
public:
	float                                        AmmoUsagePerSecond;                                // 0x108(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_14AB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAmmoComponent* GetDefaultObj();

	float GetAmmoUsagePerSecond();
};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.AmmoRefillBox
class AAmmoRefillBox : public AActor
{
public:
	uint8                                        Pad_14AD[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_14AE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  RefillCharacter;                                   // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14AF[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AAmmoRefillBox* GetDefaultObj();

};

// 0x98 (0x2B8 - 0x220)
// Class ReadyOrNot.AnimatedDecal
class AAnimatedDecal : public AActor
{
public:
	class UDecalComponent*                       Decal;                                             // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimationTimescale;                                // 0x228(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRuntimeFloatCurve                    AnimationCurve;                                    // 0x230(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AAnimatedDecal* GetDefaultObj();

	void SetAnimatedDecalMaterial(class UMaterialInterface* Material);
	float GetRuntimeFloatCurveValue(struct FRuntimeFloatCurve& Curve, float Time);
};

// 0x100 (0x360 - 0x260)
// Class ReadyOrNot.AnimatedIconWidget
class UAnimatedIconWidget : public UUserWidget
{
public:
	TArray<class UImage*>                        IconImages;                                        // 0x260(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        CurrentIndex;                                      // 0x270(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ElapsedTime;                                       // 0x274(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPaused : 1;                                       // Mask: 0x1, PropSize: 0x10x278(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14BB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UOverlay*                              InteractCircle_Overlay;                            // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              InteractIcon_SizeBox;                              // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                       IconSwitcher;                                      // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_1;                                           // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_2;                                           // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_3;                                           // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_4;                                           // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_5;                                           // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_6;                                           // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_7;                                           // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Frame_8;                                           // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                FrameImages[0x8];                                  // 0x2D8(0x40)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                ProgressCircle_Image;                              // 0x318(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_Interact;                                     // 0x320(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_Focus;                                        // 0x328(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          InteractionInvalidTintColor;                       // 0x330(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    ProgressCircleMaterial;                            // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ProgressParamName;                                 // 0x348(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                ParentComponent;                                   // 0x350(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*              MID_ProgressCircle;                                // 0x358(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimatedIconWidget* GetDefaultObj();

	void UnPauseIconAnim();
	void StopInteractAnim();
	void StopFocusAnim();
	void SetInteractState(bool bValid);
	void SetInteractIconSize(float InInteractCircleSize, float InInteractIconSize);
	void SetCurrentProgress(float Percent);
	void SetActiveIcon(int32 Index);
	void PlayInteractAnim();
	void PlayFocusAnim(bool bReverse);
	void PauseIconAnim();
};

// 0x10 (0x270 - 0x260)
// Class ReadyOrNot.AnimatedIconWidget_Imprint
class UAnimatedIconWidget_Imprint : public UUserWidget
{
public:
	class UImage*                                Icon_Image;                                        // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      ImprintAnimation;                                  // 0x268(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimatedIconWidget_Imprint* GetDefaultObj();

	void SetIconImage(class UTexture2D* NewIconImage);
	void Init(const struct FVector& InWorldLocation, class UTexture2D* InIconImage);
};

// 0x40 (0x3A0 - 0x360)
// Class ReadyOrNot.AnimatedIconWidgetWithActionPrompt
class UAnimatedIconWidgetWithActionPrompt : public UAnimatedIconWidget
{
public:
	class UVerticalBox*                          VerticalBox;                                       // 0x360(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              InteractIcon_Overlay;                              // 0x368(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                             PlayerActionPrompt_ScaleBox;                       // 0x370(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionPrompt_Widget;                         // 0x378(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionPrompt_Widget2;                        // 0x380(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionPrompt_Widget3;                        // 0x388(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionPrompt_Widget4;                        // 0x390(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                ActionPromptBackground_Image;                      // 0x398(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimatedIconWidgetWithActionPrompt* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AnimCharacterMovementLibrary
class UAnimCharacterMovementLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimCharacterMovementLibrary* GetDefaultObj();

	void UpdateCharacterMovementSnapshot(struct FTransform& WorldTransform, struct FVector& WorldVelocity, struct FVector& WorldAcceleration, bool bIsOnGround, float RootYawOffset, struct FAnimCharacterMovementSnapshot& Snapshot);
	class UAnimSequence* SelectAnimForCardinalDirection(enum class EAnimCardinalDirection CardinalDirection, struct FCardinalDirectionAnimSet& AnimSet);
	struct FVector PredictGroundMovementStopLocation(struct FAnimCharacterMovementSnapshot& MovementSnapshot, struct FAnimCharacterMovementPredictionSnapshot& PredictionSnapshot);
	struct FVector PredictGroundMovementPivotLocation(struct FAnimCharacterMovementSnapshot& MovementSnapshot, float GroundFriction);
	enum class EAnimCardinalDirection GetCardinalDirectionFromAngle(enum class EAnimCardinalDirection PreviousCardinalDirection, float DirectionAngleInDegrees, float DeadZoneAngle);
	float CalculateDirAngle(const struct FVector& CurVel, const struct FRotator& CurActorRotation, const struct FRotator& DirRotation, float ClampMin, float ClampMax, float CurDirAngle);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AnimDistanceMatchingLibrary
class UAnimDistanceMatchingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimDistanceMatchingLibrary* GetDefaultObj();

	void CalculateDistanceMatchingStates(float DeltaTime, class ACharacter* CurrentCharacter, class UCharacterMovementComponent* CurrentMovementComponent, enum class EDistanceMatchingType* DistanceMatchingCurrentState, struct FAnimCharacterMovementSnapshot& MovementSnapshot, struct FAnimCharacterMovementPredictionSnapshot& PredictionSnapshot, class UWorld* TargetWorld, float MinPivotAngle, const TArray<class AActor*>& ActorsToIgnore, struct FVector* LastActorLocation, struct FCardinalDirectionSnapshot* PivotingCardinalDirSnapShot, struct FPredictionResult* StartMarker, struct FPredictionResult* StopMarker, struct FPredictionResult* PivotMarker, struct FPredictionResult* TakeOffMarker, struct FPredictionResult* ApexMarker, struct FPredictionResult* LandingMarker, bool* bSMStartRuleset, bool* bSMStopRuleset, bool bIsAICharacter, bool bShowDebug);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AnimInputCapsuleLocomotionBlueprintLibrary
class UAnimInputCapsuleLocomotionBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimInputCapsuleLocomotionBlueprintLibrary* GetDefaultObj();

	void UpdateCapsuleLocomotionAnimInput(class APawn* Pawn, struct FAnimInput_CapsuleLocomotion& CapsuleLocomotionAnimInput);
};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_AIDoorBreachKick
class UAnimNotify_AIDoorBreachKick : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_AIDoorBreachKick* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_AIDoorBreachRam
class UAnimNotify_AIDoorBreachRam : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_AIDoorBreachRam* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_AIDoorBreachShotgun
class UAnimNotify_AIDoorBreachShotgun : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_AIDoorBreachShotgun* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_AIThrowGrenade
class UAnimNotify_AIThrowGrenade : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_AIThrowGrenade* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_AIThrowGrenadeComplete
class UAnimNotify_AIThrowGrenadeComplete : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_AIThrowGrenadeComplete* GetDefaultObj();

};

// 0x58 (0x90 - 0x38)
// Class ReadyOrNot.AnimNotify_AIThrowPendingItem
class UAnimNotify_AIThrowPendingItem : public UAnimNotify
{
public:
	class FName                                  BoneToSpawnOn;                                     // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LandingLocation;                                   // 0x40(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1514[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RelativeTransform;                                 // 0x50(0x30)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bCustomThrowDirection : 1;                         // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_E6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1516[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ThrowDirection;                                    // 0x84(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimNotify_AIThrowPendingItem* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_ApplyArteryDamage
class UAnimNotify_ApplyArteryDamage : public UAnimNotify
{
public:
	class FName                                  ArteryBoneName;                                    // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAnimNotify_ApplyArteryDamage* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_ApplyMeleeDamage
class UAnimNotify_ApplyMeleeDamage : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ApplyMeleeDamage* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_ArrestComplete
class UAnimNotify_ArrestComplete : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ArrestComplete* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_Breach_C2Detonate
class UAnimNotify_Breach_C2Detonate : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_Breach_C2Detonate* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_Breach_C2Placed
class UAnimNotify_Breach_C2Placed : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_Breach_C2Placed* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class ReadyOrNot.AnimNotify_ChangeBodySocket
class UAnimNotify_ChangeBodySocket : public UAnimNotify
{
public:
	enum class EItemCategory                     ItemCategory;                                      // 0x38(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_152A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  Socket;                                            // 0x3C(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_152B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_ChangeBodySocket* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_CollectEvidence
class UAnimNotify_CollectEvidence : public UAnimNotify
{
public:
	uint8                                        bCollectFinished : 1;                              // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_152F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_CollectEvidence* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_CompleteHeal
class UAnimNotify_CompleteHeal : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_CompleteHeal* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class ReadyOrNot.AnimNotify_DisableWeaponFOV
class UAnimNotify_DisableWeaponFOV : public UAnimNotifyState
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_DisableWeaponFOV* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_DisarmTrap
class UAnimNotify_DisarmTrap : public UAnimNotify
{
public:
	uint8                                        bDisarmFinished : 1;                               // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1532[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_DisarmTrap* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_DoorKickBreak
class UAnimNotify_DoorKickBreak : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_DoorKickBreak* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_DoorKickFailure
class UAnimNotify_DoorKickFailure : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_DoorKickFailure* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class ReadyOrNot.AnimNotify_EquipItemOfClass
class UAnimNotify_EquipItemOfClass : public UAnimNotify
{
public:
	TSubclassOf<class ABaseItem>                 ItemClass;                                         // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInstant : 1;                                      // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAIOnly : 1;                                       // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1539[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_EquipItemOfClass* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_EquipLastItem
class UAnimNotify_EquipLastItem : public UAnimNotify
{
public:
	uint8                                        bInstant : 1;                                      // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_153C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_EquipLastItem* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_ForceFireWeapon
class UAnimNotify_ForceFireWeapon : public UAnimNotify
{
public:
	float                                        Chance;                                            // 0x38(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bNoEnemyRequired;                                  // 0x3C(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1543[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_ForceFireWeapon* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_ForceRagdoll
class UAnimNotify_ForceRagdoll : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ForceRagdoll* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_GetupComplete
class UAnimNotify_GetupComplete : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_GetupComplete* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_ItemSwitchSocket
class UAnimNotify_ItemSwitchSocket : public UAnimNotify
{
public:
	enum class EItemSocket                       DesiredItemSocket;                                 // 0x38(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1546[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_ItemSwitchSocket* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_KillMyself
class UAnimNotify_KillMyself : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_KillMyself* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_LockPickDoor
class UAnimNotify_LockPickDoor : public UAnimNotify
{
public:
	uint8                                        bLockPickFinished : 1;                             // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1549[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_LockPickDoor* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_MirrorDoor
class UAnimNotify_MirrorDoor : public UAnimNotify
{
public:
	uint8                                        bMirrorFinish : 1;                                 // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_154B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_MirrorDoor* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_NextMag
class UAnimNotify_NextMag : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_NextMag* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_OnCheckedDoor
class UAnimNotify_OnCheckedDoor : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_OnCheckedDoor* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_OnLandmarkProxyUse
class UAnimNotify_OnLandmarkProxyUse : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_OnLandmarkProxyUse* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_PickupItemComplete
class UAnimNotify_PickupItemComplete : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_PickupItemComplete* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_PlayMontage
class UAnimNotify_PlayMontage : public UAnimNotify
{
public:
	class UAnimMontage*                          Montage;                                           // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAnimNotify_PlayMontage* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_PlayPostProcessEffect
class UAnimNotify_PlayPostProcessEffect : public UAnimNotify
{
public:
	class FName                                  PostProcessEffectName;                             // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimNotify_PlayPostProcessEffect* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_PreMissionWeaponVis
class UAnimNotify_PreMissionWeaponVis : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_PreMissionWeaponVis* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_PushQueuedDoor
class UAnimNotify_PushQueuedDoor : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_PushQueuedDoor* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_RemovePlacedC2
class UAnimNotify_RemovePlacedC2 : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_RemovePlacedC2* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.AnimNotify_SearchLandmark
class UAnimNotify_SearchLandmark : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_SearchLandmark* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.SetControlRotationToCamBoneAnimNotify
class USetControlRotationToCamBoneAnimNotify : public UAnimNotify
{
public:
	class FName                                  CameraBoneName;                                    // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class USetControlRotationToCamBoneAnimNotify* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_SetCoverFirePose
class UAnimNotify_SetCoverFirePose : public UAnimNotify
{
public:
	class UAnimSequence*                         Pose;                                              // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimNotify_SetCoverFirePose* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_SetCoverHidePose
class UAnimNotify_SetCoverHidePose : public UAnimNotify
{
public:
	class UAnimSequence*                         Pose;                                              // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimNotify_SetCoverHidePose* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_SetCoverIdlePose
class UAnimNotify_SetCoverIdlePose : public UAnimNotify
{
public:
	class UAnimSequence*                         Pose;                                              // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotify_SetCoverIdlePose* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_SetHoleTraversalPose
class UAnimNotify_SetHoleTraversalPose : public UAnimNotify
{
public:
	class UAnimSequence*                         Pose;                                              // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UAnimNotify_SetHoleTraversalPose* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_SetStrafe
class UAnimNotify_SetStrafe : public UAnimNotify
{
public:
	bool                                         bSetStrafe;                                        // 0x38(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1566[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_SetStrafe* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class ReadyOrNot.AnimNotify_SpawnThrownItem
class UAnimNotify_SpawnThrownItem : public UAnimNotify
{
public:
	TSubclassOf<class ABaseItem>                 ItemClass;                                         // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bLocalOnly : 1;                                    // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bNonLocalOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_E8 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_156B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  BoneToSpawnOn;                                     // 0x44(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCustomThrowDirection : 1;                         // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_E9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_156D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ThrowDirection;                                    // 0x50(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_156E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_SpawnThrownItem* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class ReadyOrNot.AnimNotify_SpawnWeapon
class UAnimNotify_SpawnWeapon : public UAnimNotify
{
public:
	TArray<TSubclassOf<class ABaseWeapon>>       PotentialWeapons;                                  // 0x38(0x10)(Edit, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAnimNotify_SpawnWeapon* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class ReadyOrNot.AnimNotifyState_HideBoneVis
class UAnimNotifyState_HideBoneVis : public UAnimNotifyState
{
public:
	class FName                                  BoneNameToHide;                                    // 0x30(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UAnimNotifyState_HideBoneVis* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_ToggleEquipmentVis
class UAnimNotify_ToggleEquipmentVis : public UAnimNotify
{
public:
	enum class EToggleInventoryVis               InventroyVis;                                      // 0x38(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1576[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_ToggleEquipmentVis* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.AnimNotify_WedgeDoor
class UAnimNotify_WedgeDoor : public UAnimNotify
{
public:
	uint8                                        bWedgeDeployFinished : 1;                          // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1579[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_WedgeDoor* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class ReadyOrNot.AnimNotifyState_SpawnLight
class UAnimNotifyState_SpawnLight : public UAnimNotifyState
{
public:
	struct FLinearColor                          LightColor;                                        // 0x30(0x10)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        StartIntensity;                                    // 0x40(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MiddleIntensity;                                   // 0x44(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        EndIntensity;                                      // 0x48(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        InterpSpeed;                                       // 0x4C(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APointLight*                           PointLight;                                        // 0x50(0x8)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        MaxDuration;                                       // 0x58(0x4)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        CurrentDuration;                                   // 0x5C(0x4)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  SocketName;                                        // 0x60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UAnimNotifyState_SpawnLight* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AnimTurnInPlaceLibrary
class UAnimTurnInPlaceLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimTurnInPlaceLibrary* GetDefaultObj();

	void UpdateTurnInPlace(float DeltaTime, bool bAllowTurnInPlace, bool bHoldYawOffset, bool bIsTurnTransitionStateRelevant, bool bClampYawOffset, float YawOffsetLimit, struct FRotator& MeshWorldRotation, struct FAnimTurnInPlaceAnimSet& AnimSet, struct FAnimTurnInPlaceState& TurnInPlaceState, float TurnInPlaceSpeedMultiplier);
	void PostProcessYawOffset(float DeltaSeconds, float& YawOffset, float& LastYawOffset, float& LastPostProcessedYawOffset, float& TurnAroundTimeToGo, float TurnAroundBlendTime);
};

// 0x10 (0x118 - 0x108)
// Class ReadyOrNot.ArmourResourceComponent
class UArmourResourceComponent : public UResourceComponent
{
public:
	int32                                        MaxTickets;                                        // 0x108(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Resistance;                                        // 0x10C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RemainingTickets;                                  // 0x110(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_159F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UArmourResourceComponent* GetDefaultObj();

	void SetResistance(float NewResistancePercentage);
	void SetMaxTickets(int32 NewMax);
	float GetResistancePercentage();
	int32 GetRemainingTickets();
	int32 GetMaxTickets();
};

// 0x4B0 (0x770 - 0x2C0)
// Class ReadyOrNot.ReadyOrNotGameMode
class AReadyOrNotGameMode : public AGameModeBase
{
public:
	uint8                                        Pad_1623[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   GameModeSettings;                                  // 0x318(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1625[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AReadyOrNotCharacter*, int32>     AbuseCountMap;                                     // 0x388(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                         bIsCampaignTransitioning;                          // 0x3D8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1626[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          Reinforcement_Handle;                              // 0x3E0(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRunWarmup;                                        // 0x3E8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrestSpectator;                                  // 0x3E9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowLoadouts;                                    // 0x3EA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1629[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPlayersAllowed;                                 // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnabledForPlay;                                   // 0x3F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_162B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                UrlShortName;                                      // 0x3F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Password;                                          // 0x408(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                    PlayerStartClass;                                  // 0x418(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatePawn>             DeadSpectatorClass;                                // 0x420(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  LobbyStartTag;                                     // 0x428(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  RedCustomizationStartTag;                          // 0x430(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BlueCustomizationStartTag;                         // 0x438(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SWATBlueStartTag;                                  // 0x440(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SWATRedStartTag;                                   // 0x448(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SuspectStartTag;                                   // 0x450(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpectateKillerOnDeath;                            // 0x458(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInitialPlayerRespawn;                             // 0x459(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawPlayerCameraSphere : 1;                       // Mask: 0x1, PropSize: 0x10x45A(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EC : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1630[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMatchStarted;                                    // 0x460(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class ERespawnMode                      RespawnMode;                                       // 0x470(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1632[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bTimelimitUsedInMode;                              // 0x472(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMatchState                       CurrentMatchState;                                 // 0x473(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1635[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMatchStateChanged;                               // 0x478(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1637[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         DefaultLoadoutIfNothingLoaded;                     // 0x490(0x188)(Edit, NativeAccessSpecifierPublic)
	uint8                                        Pad_1639[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ModeName;                                          // 0x620(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ModeDescription;                                   // 0x638(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                         bCanRespawn;                                       // 0x650(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_163B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinimumPlayersToStart;                             // 0x654(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinimumPlayersForTimer;                            // 0x658(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_163D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APlayerCharacter>        BlueCharacterClass;                                // 0x660(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class APlayerCharacter>        RedCharacterClass;                                 // 0x688(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_163E[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerController*>             DeadPlayers;                                       // 0x6F0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APlayerController*>             RespawnableDeadPlayers;                            // 0x700(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                PlayerSpawnTag;                                    // 0x710(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerRespawned;                                 // 0x720(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               CharacterHUD;                                      // 0x730(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>            NormalSpectatorPawn;                               // 0x738(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMissionPlanManager*                   MissionPlanManager;                                // 0x740(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMissionExfiltrated;                               // 0x748(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsExfilEnabled;                                   // 0x749(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1648[0x26];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotGameMode* GetDefaultObj();

	void SwapPlayerTeams();
	void StartMatch();
	class ASpectatorPawn* SpawnSpectator(class APlayerController* Controller, TSubclassOf<class ASpectatorPawn> Class, const struct FTransform& SpawnTransform);
	class APlayerCharacter* SpawnPlayerCharacter(class APlayerController* Controller, TSubclassOf<class APlayerCharacter> Class, const struct FTransform& SpawnTransform);
	bool ShouldCountDownTimelimitNow();
	void SetPassword(const class FString& NewPassword);
	void SetMatchState(enum class EMatchState NewMatchState);
	void SetExfilEnabled(bool bEnabled);
	void RestartGame();
	void RespawnPlayer(class APlayerController* Player, bool bForceSpectator);
	void RespawnDeadPlayersOnTeam(enum class ETeamType Team);
	void RespawnDeadPlayers();
	void RespawnAllPlayersOnTeam(enum class ETeamType Team);
	void RespawnAllPlayers();
	bool RemoveDeadPlayerAt(int32 Index);
	bool RemoveDeadPlayer(class APlayerController* InPlayerController);
	void RefreshSession();
	void ProcessServerTravel(const class FString& URL, bool bAbsolute);
	void PlayerTakenDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void PlayerKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void PlayerFreed(class ACharacter* Freed, class ACharacter* Freer);
	void PlayerDowned(class AReadyOrNotCharacter* DownedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void PlayerArrested(class AReadyOrNotCharacter* ArrestedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnPlayerRespawned__DelegateSignature(class APawn* Pawn, class APlayerController* Controller);
	void OnOutOfBoundsTimeLimitEnded();
	void OnMatchStateChanged__DelegateSignature(enum class EMatchState NewMatchState);
	void OnMatchStarted__DelegateSignature();
	void OnExfiltrateMission__DelegateSignature();
	void OnExfilEnabledChange__DelegateSignature(bool bEnabled);
	void OnBanStatusChecked(const class FString& SteamId, bool bIsBanned, const class FString& BanReason, bool bIsMySteamId);
	void NextGame();
	bool KickPlayer(class APlayerController* KickedPlayer, class FText& KickReason);
	bool IsTeamDead(enum class ETeamType Team, bool bIncludeArrestedAsDead);
	class AActor* GetThisPlayersStartPointByTag(class APlayerController* Player, const class FString& IncomingName);
	class AReadyOrNotGameState* GetReadyOrNotGameState();
	class AReadyOrNotGameSession* GetReadyOrNotGameSession();
	enum class EMatchState GetMatchState();
	bool GetIsExfilEnabled();
	TArray<class APlayerCharacter*> GetAllPlayerCharactersInWorld();
	void ExfiltrateMission(const TArray<class ASWATCharacter*>& ExfilCharacters);
	bool DoesLevelRequireGeneration();
	void CheckToAnnounceTeamkill(class ACharacter* InstigatorCharacter, class ACharacter* KilledCharacter);
	bool AreAllPlayersDead();
	void AddAbuse(class AReadyOrNotCharacter* Abuser, class ACyberneticCharacter* Abused);
};

// 0x60 (0x7D0 - 0x770)
// Class ReadyOrNot.ReadyOrNotGameMode_PVP
class AReadyOrNotGameMode_PVP : public AReadyOrNotGameMode
{
public:
	FMulticastInlineDelegateProperty_            OnMatchStart;                                      // 0x770(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRoundWon;                                        // 0x780(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRoundStart;                                      // 0x790(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRoundEnd;                                        // 0x7A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        RoundEndResetDelay;                                // 0x7B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MatchEndResetDelay;                                // 0x7B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class URoundEndWidget_PVP>       RoundEndWidgetClass;                               // 0x7B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIncrementedRoundCounterThisRound : 1;             // Mask: 0x1, PropSize: 0x10x7C0(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1675[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotGameMode_PVP* GetDefaultObj();

	void TimeLimitVictoryConditions();
	void TimelimitReached();
	void RoundWonTeam(enum class ETeamType WinningTeam);
	void RoundWon(const TArray<class AReadyOrNotPlayerState*>& WinningPlayers);
	void RoundEnd();
	void OnRoundWon__DelegateSignature(enum class ETeamType WinningTeam);
	void OnRoundStarted();
	void OnRoundStart__DelegateSignature();
	void OnRoundEnded();
	void OnRoundEnd__DelegateSignature();
	void OnMatchStart__DelegateSignature();
	void NextRound();
	void Multicast_SetWinningTeam(enum class ETeamType WinningTeam);
	void MatchEnd();
	void CheckRoundEnd(float DeltaSeconds);
	bool AnyDeathsOnWinningTeam();
};

// 0x40 (0x810 - 0x7D0)
// Class ReadyOrNot.ArrestAndRescueGM
class AArrestAndRescueGM : public AReadyOrNotGameMode_PVP
{
public:
	bool                                         bSuddenDeath;                                      // 0x7D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1677[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerCharacter*>              ArrestedBlueCharacters;                            // 0x7D8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APlayerCharacter*>              ArrestedRedCharacters;                             // 0x7E8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPArrestedSound;                                  // 0x7F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPKilledSound;                                    // 0x800(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_167D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AArrestAndRescueGM* GetDefaultObj();

};

// 0x570 (0x7E0 - 0x270)
// Class ReadyOrNot.ReadyOrNotGameState
class AReadyOrNotGameState : public AGameStateBase
{
public:
	uint8                                        Pad_1733[0x34];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RandomStreamSeed;                                  // 0x2A4(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1735[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        NumSuspectsActive;                                 // 0x2B8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NumCiviliansActive;                                // 0x2B9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NumSwatActive;                                     // 0x2BA(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1736[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotVoiceConfig*                VoiceConfig;                                       // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1737[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULoadout_V2*                           Loadout_V2;                                        // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0x2D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                          NextHost;                                          // 0x2E0(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MigrationGUID;                                     // 0x2E8(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1738[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasHostFinishedLoading;                           // 0x2FC(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1739[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ABaseItem*>                     AllItems;                                          // 0x300(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEvidenceActor*>                AllEvidenceActors;                                 // 0x310(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReportableActor*>              AllReportableActors;                               // 0x320(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATrapActorAttachedToDoor*>      AllDoorTrapActors;                                 // 0x330(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ACoverLandmark*>                AllCoverLandmarks;                                 // 0x340(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AWallHoleTraversal*>            AllWallHoles;                                      // 0x350(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APairedInteractionDriver*>      AllPairedInteractionActors;                        // 0x360(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                    LoadedDataTables;                                  // 0x370(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AScoringManager*                       ScoringManager;                                    // 0x380(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class AAIFactionManager*> AIFactionManagers;                                 // 0x388(0x50)(NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   Rep_GameModeSettings;                              // 0x3D8(0x10)(Net, NoDestructor, NativeAccessSpecifierPublic)
	float                                        TimeTillGameStartCountdown;                        // 0x3E8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_173A[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ABadAIAction*>                  BadAIActionActors;                                 // 0x3F8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bHasLeftLoadOut;                                   // 0x408(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_173C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevelStreaming*                       PreMissionStreamedLevel;                           // 0x410(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 SubPreMissionPlanningLevel;                        // 0x418(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_173D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ModeName;                                          // 0x448(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ModeRules;                                         // 0x460(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class AObjective*>                    MissionObjectives;                                 // 0x478(0x10)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionObjectivesUpdated;                        // 0x488(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObituaryData*                         ObituaryData;                                      // 0x498(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAnnounceReinforcements;                           // 0x4A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRadioGlareEnabled;                                // 0x4A1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_173F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            ReplenishAllAmmoSound;                             // 0x4A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASpectatePawn*>                 SpectatePawns;                                     // 0x4B0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          RedTeamPlayers;                                    // 0x4C0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          BlueTeamPlayers;                                   // 0x4D0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AThrownItem*>                   AllThrownItems;                                    // 0x4E0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         AllDoors;                                          // 0x4F0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          AllReadyOrNotCharacters;                           // 0x500(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ACyberneticCharacter*>          AllAICharacters;                                   // 0x510(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInteractableComponent*>        AllInteractableComponents;                         // 0x520(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   AnnouncerAudioComponent;                           // 0x530(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalMissionAbuseCount;                            // 0x538(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1741[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TScriptInterface<class IListenForDeath>> DeathListeners;                                    // 0x540(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IListenForGameStart>> GameStartListeners;                                // 0x550(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IListenForGameEnd>> GameEndListeners;                                  // 0x560(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bDisableEquipment;                                 // 0x570(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableCommandChat;                                // 0x571(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseReinforcements;                                // 0x572(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1742[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Reinforcements_TimeRemaining;                      // 0x574(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRunWarmup;                                        // 0x578(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1743[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AActor>                    SceneCapturePlayerCameraClass;                     // 0x580(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowEnemiesAsSuspects;                            // 0x588(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1744[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKillFeedData>                 KillFeedData;                                      // 0x590(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUpdateKillFeed;                                  // 0x5A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        ServerTimeUntilNextMap;                            // 0x5B0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1745[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                GameRulesIntroAnnouncerRowName;                    // 0x5B8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWaitingForPlayers;                                // 0x5C8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1746[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlanningTimeLeft;                                  // 0x5CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RedTeamWins;                                       // 0x5D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BlueTeamWins;                                      // 0x5D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1747[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWinsUpdated;                                     // 0x5E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        EndPlayTimer;                                      // 0x5F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoundTimeRemaining;                                // 0x5F4(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseTimelimit;                                     // 0x5F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1748[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Scorelimit;                                        // 0x5FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceMatchStarted;                             // 0x600(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1749[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReferendum*                           CurrentReferendum;                                 // 0x608(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AReferendum>>       AllowedReferendumTypes;                            // 0x610(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bCanShowScoreboard;                                // 0x620(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsePlanningUICamera;                              // 0x621(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_174A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RoundTimeElapsed;                                  // 0x624(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RoundsPlayed;                                      // 0x628(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RoundsToPlay;                                      // 0x62C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         RoundWinningTeam;                                  // 0x630(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         MatchWinningTeam;                                  // 0x631(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_174B[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotPlayerState*>        RoundWinners;                                      // 0x638(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChatMessageReceived;                             // 0x648(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                MissionName;                                       // 0x658(0x10)(Edit, BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  MissionDescription;                                // 0x668(0x18)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	enum class EMatchState                       MatchState;                                        // 0x680(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_174D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCharacterArrested;                               // 0x688(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterKilled;                                 // 0x698(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                NextURLReplicated;                                 // 0x6A8(0x10)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSequenceStarted;                                 // 0x6B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FName>                          WhitelistedLabels;                                 // 0x6C8(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UDebugDisplayWidget>       DebugDisplayWidget;                                // 0x6D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ModeURL_Replicated;                                // 0x6E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFloorMapPointData>            DrawingPointData;                                  // 0x6F0(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                         bPvPMode;                                          // 0x700(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanReportToTOC;                                   // 0x701(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_174F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GametypeDamageModifier;                            // 0x704(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeadDamageModifier;                                // 0x708(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootDamageModifier;                                // 0x70C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LegDamageModifier;                                 // 0x710(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArmDamageModifier;                                 // 0x714(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OtherLimbDamageModifier;                           // 0x718(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFreeForAll;                                       // 0x71C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisablePickups;                                   // 0x71D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRevivesAllowed : 1;                               // Mask: 0x1, PropSize: 0x10x71E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1751[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FRChatMessage>                 SavedChatMessages;                                 // 0x720(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bBallisticsDebug;                                  // 0x730(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDamageDebug;                                      // 0x731(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpeechRecognitionDebug;                           // 0x732(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGOAPDebug;                                        // 0x733(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAnnounceTeamReinforcements;                       // 0x734(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1754[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  Msg_BothTeamsReinforced;                           // 0x738(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Msg_RedTeamReinforced;                             // 0x750(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Msg_BlueTeamReinforced;                            // 0x768(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UChallenge>>        GameModeChallenges;                                // 0x780(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        bInPlanningMenu : 1;                               // Mask: 0x1, PropSize: 0x10x790(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1755[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomTimeDilationApplied;                         // 0x794(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerController*>             AdminPlayerControllers;                            // 0x798(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATOCManager*                           TOCManager;                                        // 0x7A8(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHideLevelEffectsInPreMission;                     // 0x7B0(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1758[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APostProcessVolume*>            WorldPostProcessVolumes;                           // 0x7B8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AExponentialHeightFog*>         WorldExponentialHeightFogs;                        // 0x7C8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1759[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotGameState* GetDefaultObj();

	void UpdateDoorTickIntervals();
	void SkipMVPScreen();
	void SetTimeDilationSynced(float TimeDilation);
	void SetGlobalSuspendVoiceOver(bool bEnable);
	void ResetReplicatedTimers();
	void RemoveGameStartListener(TScriptInterface<class IListenForGameStart> GameStartListener);
	void RemoveGameEndListener(TScriptInterface<class IListenForGameEnd> GameEndListener);
	void RemoveDeathListener(TScriptInterface<class IListenForDeath> DeathListener);
	void PlayerKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void PlayerArrested(class AReadyOrNotCharacter* ArrestedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OverWriteModeNameText(class FText NewModeName);
	void OnWinsUpdated__DelegateSignature();
	void OnUpdateKillFeed__DelegateSignature(class AActor* Causer, class ACharacter* InstigatorCharacter, class ACharacter* KilledCharacter);
	void OnSequenceStartedFunc(class ULevelSequence* LevelSequence);
	void OnSequenceStarted__DelegateSignature(class ULevelSequence* LevelSequence);
	void OnRep_WinsUpdated();
	void OnRep_StreamSeed();
	void OnRep_NextHost();
	void OnRep_MissionObjectives();
	void OnRep_MatchState();
	void OnRep_DrawPointDataChanged();
	void OnRep_CustomTimeDilation();
	void OnLoadoutFinished();
	void OnChatMessage__DelegateSignature(const struct FRChatMessage& Message);
	void OnCharacterKilled__DelegateSignature(class AReadyOrNotCharacter* Character, class AReadyOrNotCharacter* KilledBy);
	void OnCharacterArrested__DelegateSignature(class AReadyOrNotCharacter* Character, class AReadyOrNotCharacter* ArrestedBy);
	void OnAuthenticationResponse(bool bSuccess, bool bSerialFound, bool bSerialValid, const class FString& FailedReason);
	void OnAlphaAccessChecked(bool bBanned, const class FString& BanReason);
	void Multicast_StopSequence(class ULevelSequence* Sequence);
	void Multicast_PlaySequence(class ULevelSequence* Sequence);
	void Multicast_PlayAnnouncerForTeam(const class FString& SpeechRowName, enum class ETeamType TeamType);
	void Multicast_OnRoundReset();
	void Multicast_OnGameStarted();
	void Multicast_OnGameEnded();
	void Multicast_OnCharacterDied(class AReadyOrNotCharacter* Victim, class AReadyOrNotCharacter* Killer, class AActor* Inflictor);
	void Multicast_BroadcastChatMessage(const struct FRChatMessage& ChatMessage);
	void LoadStartupWidgetsAfterLoadingScreen();
	bool IsEveryoneReady();
	bool IsAdminPlayerController(class APlayerController* PlayerController);
	float GetWinningScore(bool* bUsesScoring);
	int32 GetTotalMissionAbuseCount();
	float GetTeamScore(enum class ETeamType Team);
	int32 GetRemainingRounds();
	void GetPlayerStatesOnTeamOrderedByScore(enum class ETeamType Team, TArray<class AReadyOrNotPlayerState*>* PlayerStates);
	TArray<class AReadyOrNotPlayerState*> GetPlayerStatesOfTeam(enum class ETeamType Team);
	TArray<class AReadyOrNotPlayerState*> GetPlayersAvailableForVote();
	void GetNextMapMode(class FString* Map, class FString* Mode);
	class ABadAIAction* GetMostRecentBadAIActionReport();
	class FText GetModeText();
	int32 GetMaxSwatScore();
	int32 GetMaxSuspectScore();
	class FString GetMapURL();
	struct FGameModeSettings GetGameModeSettings();
	TArray<struct FDeploymentStatus> GetDeploymentStatusOfPlayers();
	int32 GetCurrentSwatScore();
	int32 GetCurrentSuspectScore();
	class UReadyOrNotProfile* GetCurrentProfile();
	TArray<class AReadyOrNotPlayerController*> GetControllersAvailableForVote();
	void Client_BindCharacterEvents(class APlayerCharacter* Character);
	void AddGameStartListener(TScriptInterface<class IListenForGameStart> GameStartListener);
	void AddGameEndListener(TScriptInterface<class IListenForGameEnd> GameEndListener);
	void AddDeathListener(TScriptInterface<class IListenForDeath> DeathListener);
};

// 0x8 (0x7E8 - 0x7E0)
// Class ReadyOrNot.ArrestAndRescueGS
class AArrestAndRescueGS : public AReadyOrNotGameState
{
public:
	int32                                        BlueRespawnWaves;                                  // 0x7E0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RedRespawnWaves;                                   // 0x7E4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AArrestAndRescueGS* GetDefaultObj();

};

// 0x170 (0x198 - 0x28)
// Class ReadyOrNot.BaseActivity
class UBaseActivity : public UObject
{
public:
	uint8                                        Pad_17A3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnStartActivity;                                   // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPerformActivity;                                 // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinishActivity;                                  // 0x50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFinishActivity_NoOwner;                          // 0x60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_17A4[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ActivityName;                                      // 0x88(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxActivityTime;                                   // 0x98(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivityStartDelay;                                // 0x9C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoResetDataOnFinish : 1;                          // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17A6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoveAcceptanceRadius;                              // 0xA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17A8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalCooldown;                                    // 0xB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalCooldownRandomRange : 1;                    // Mask: 0x1, PropSize: 0x10xB4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F8 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17AA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             GlobalCooldownRange;                               // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsProgressActivity : 1;                           // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFinishActivityWhenOverriden : 1;                  // Mask: 0x2, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortMoveWhenActivityFinished : 1;                // Mask: 0x4, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortMoveWhenActivityOverriden : 1;               // Mask: 0x8, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortActivityIfCannotReachLocation : 1;           // Mask: 0x10, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortActivityIfProjectedLocationFailed : 1;       // Mask: 0x20, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortIfTrackingEnemy : 1;                         // Mask: 0x40, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseIfTrackingEnemy : 1;                         // Mask: 0x80, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseIfRecentlyInCombat : 1;                      // Mask: 0x1, PropSize: 0x10xC1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17AD[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RecentCombatTimeThreshold;                         // 0xC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowWhileArrested : 1;                           // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoMoveActivity : 1;                               // Mask: 0x2, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bResetStateMachineWhenActivityResumed : 1;         // Mask: 0x4, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowPartialMove : 1;                             // Mask: 0x8, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowRePathOnInvalidation : 1;                    // Mask: 0x10, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortIfNotMovingForAWhile : 1;                    // Mask: 0x20, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysRequestMove : 1;                            // Mask: 0x40, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbortIfSurrendered : 1;                           // Mask: 0x80, PropSize: 0x10xC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17B0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ElapsedActivityTime;                               // 0xCC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeNotMoving;                                     // 0xD0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               Location;                                          // 0xD4(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                ProgressState;                                     // 0xE0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastAsyncMove;                            // 0xF0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastRequestedLocation;                             // 0xF4(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17B1[0x5C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EActivityStatus                   ActivityStatus;                                    // 0x15C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17B2[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_FA : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSearchingPath : 1;                                // Mask: 0x2, PropSize: 0x10x162(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bLastRequestedLocationWaitingForRepath : 1;        // Mask: 0x4, PropSize: 0x10x162(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_FB : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17B4[0x15];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastPathLength;                                    // 0x178(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17B5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACyberneticController*                 OwningController;                                  // 0x180(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACyberneticCharacter*                  OwningCharacter;                                   // 0x188(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UActivityFiniteStateMachine*           ActivityStateMachine;                              // 0x190(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UBaseActivity* GetDefaultObj();

	void StartActivity_Blueprint(class AAIController* Owner);
	bool ShouldForceStrafe();
	bool ShouldForceNoStrafe();
	void SetLocation(struct FVector& NewLocation, bool bRequestMove, const struct FVector& CustomExtent);
	void ResetData();
	void PerformActivity_Blueprint(float DeltaTime);
	bool OverrideFocalPoint_Blueprint(struct FVector* FocalPoint);
	void OnStartActivity__DelegateSignature(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void OnPerformActivity__DelegateSignature(class UBaseActivity* Activity, class ACyberneticController* Controller, float DeltaTime);
	void OnKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnIncapacitated(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnFinishActivity__DelegateSignature(class UBaseActivity* Activity, class ACyberneticController* Controller);
	bool IsProgressActivity();
	bool IsNoMoveActivity();
	bool IsActivityPaused();
	bool IsActivityInitialized();
	bool IsActivityComplete();
	bool HasStartedActivity();
	bool HasReachedLocation(float Tolerance);
	class FString GetProgressState();
	class ACyberneticController* GetOwningController();
	class FName GetMoveStyleOverride();
	struct FVector GetLocation();
	class ACyberneticCharacter* GetCharacter();
	enum class EActivityStatus GetActivityStatus();
	float GetActiveStateUptime();
	class FString GetActiveStateName();
	int32 GetActiveStateID();
	void FinishedActivity_Blueprint(bool bSuccess);
	void EquipWeapon();
	void EquipItemOfClass(TSubclassOf<class ABaseItem> InItemClass);
	void EquipItem(enum class EItemCategory InItemCategory);
	bool CanOverrideActivity();
	bool CanBePushed();
};

// 0x20 (0x1B8 - 0x198)
// Class ReadyOrNot.ArrestTargetActivity
class UArrestTargetActivity : public UBaseActivity
{
public:
	class ACyberneticCharacter*                  ArrestTarget;                                      // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionsData*                     ArrestInteraction;                                 // 0x1A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17C8[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UArrestTargetActivity* GetDefaultObj();

	void TickArrestStage(float DeltaTime, float Uptime);
	void OnArresterKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void EnterMoveToStage();
	void EnterArrestStage();
	bool CanArrest();
};

// 0x88 (0x2A8 - 0x220)
// Class ReadyOrNot.Objective
class AObjective : public AInfo
{
public:
	class UScoringComponent*                     ScoringComponent;                                  // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnObjectiveUpdated;                                // 0x228(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ObjectiveCompleteAudio;                            // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ObjectiveFailedAudio;                              // 0x240(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  ObjectiveName;                                     // 0x248(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ObjectiveDescription;                              // 0x260(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	enum class ECOOPMode                         LockedToMode;                                      // 0x278(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFailureEndsMission;                               // 0x279(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHiddenObjective;                                  // 0x27A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowCompletionWhileHidden;                       // 0x27B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EHiddenObjectiveUnlockMethod      UnlockMethod;                                      // 0x27C(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17E3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AReportableActor>          UnlockingReportableClass;                          // 0x280(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AObjective>                UnlockingObjectiveClass;                           // 0x288(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReportableActor*                      UnlockingReportable;                               // 0x290(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjective*                            UnlockingObjective;                                // 0x298(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EObjectiveStatus                  ObjectiveStatus;                                   // 0x2A0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_17E4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AObjective* GetDefaultObj();

	void TickObjective_BP();
	void OnUnlockingReportableReported(class AReportableActor* ReportableActor);
	void OnUnlockingObjectiveUpdated(class AObjective* Objective);
	void OnRep_ObjectiveStatus();
	void OnObjectiveFailed();
	void OnObjectiveCreated();
	void OnObjectiveCompleted();
	void ObjectiveFailed();
	void ObjectiveCompleted();
	void Multicast_UnlockObjective();
	bool IsObjectiveInProgress();
	bool IsObjectiveFailed();
	bool IsObjectiveCompleted();
	enum class EObjectiveStatus GetObjectiveStatus();
	class FText GetFormattedName();
	class FText GetFormattedDescription();
};

// 0x8 (0x2B0 - 0x2A8)
// Class ReadyOrNot.ArrestXSuspects
class AArrestXSuspects : public AObjective
{
public:
	int32                                        RequiredArrests;                                   // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_17EA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AArrestXSuspects* GetDefaultObj();

};

// 0x30 (0x2D8 - 0x2A8)
// Class ReadyOrNot.ASequenceInteraction
class AASequenceInteraction : public ALevelSequenceActor
{
public:
	uint8                                        Pad_17F5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAutoActivateInRange;                              // 0x2B8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17F7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                ReferencedCharacterViewTarget;                     // 0x2C0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         RadiusComp;                                        // 0x2C8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      LastPlayedSequencerCharacter;                      // 0x2D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AASequenceInteraction* GetDefaultObj();

	void OnSequencerFinished();
	void OnBoxOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnBoxEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
};

// 0x18 (0x138 - 0x120)
// Class ReadyOrNot.AspectRatioConstraintBox
class UAspectRatioConstraintBox : public UContentWidget
{
public:
	bool                                         bUseFixedConstraint;                               // 0x120(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1802[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FixedAspectRatio;                                  // 0x124(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1803[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAspectRatioConstraintBox* GetDefaultObj();

	void SetFixedAspectRatio(float NewAspectRatio);
	void OnSettingsUpdated();
	void EnableConstraint();
	void DisableConstraint();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.AsyncLoader
class UAsyncLoader : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAsyncLoader* GetDefaultObj();

	TSubclassOf<class UUserWidget> GetLazyLoadedWidget(TSoftClassPtr<class UUserWidget> Widget);
	TSubclassOf<class ABaseWeapon> GetLazyLoadedWeapon(TSoftClassPtr<class ABaseWeapon> Item);
	class USoundCue* GetLazyLoadedSoundCue(TSoftObjectPtr<class USoundCue> Cue);
	class USkeletalMesh* GetLazyLoadedSkeletalMesh(TSoftObjectPtr<class USkeletalMesh> Mesh);
	TArray<TSubclassOf<class AReadyOrNotGameMode>> GetLazyLoadedReadyOrNotGameModeArray(const TArray<TSoftClassPtr<class AReadyOrNotGameMode>>& Array);
	class UParticleSystem* GetLazyLoadedParticleSystem(TSoftObjectPtr<class UParticleSystem> Particle);
	class UObject* GetLazyLoadedObject(TSoftObjectPtr<class UObject> Object);
	class UStaticMesh* GetLazyLoadedMesh(TSoftObjectPtr<class UStaticMesh> Mesh);
	class UMaterialInstance* GetLazyLoadedMaterialInstance(TSoftObjectPtr<class UMaterialInstance> Material);
	TSubclassOf<class ABaseItem> GetLazyLoadedItem(TSoftClassPtr<class ABaseItem> Item);
	class UTexture2D* GetLazyLoadedImage(TSoftObjectPtr<class UTexture2D> Texture);
	TArray<TSubclassOf<class UClass>> GetLazyLoadedClassArray(const TArray<TSoftClassPtr<class UClass>>& Array);
	class UClass* GetLazyLoadedClass(TSoftClassPtr<class UClass> Class);
	class UAnimSequence* GetLazyLoadedAnimSequence(TSoftObjectPtr<class UAnimSequence> Anim);
	class UAnimMontage* GetLazyLoadedAnimMontage(TSoftObjectPtr<class UAnimMontage> Montage);
};

// 0x48 (0x2D0 - 0x288)
// Class ReadyOrNot.AttachmentSlot_V2
class UAttachmentSlot_V2 : public UCommonUserWidget
{
public:
	enum class EWeaponAttachmentType             AttachmentType;                                    // 0x288(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1842[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ItemImage;                                         // 0x290(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            EmptyImage;                                        // 0x298(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  ItemName;                                          // 0x2A0(0x18)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                            ItemType;                                          // 0x2B8(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWeaponAttachment*                     Attachment;                                        // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         Equipped;                                          // 0x2C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1844[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAttachmentSlot_V2* GetDefaultObj();

	void SetEquipped(bool IsEquipped);
	void SetAttachmentType(enum class EWeaponAttachmentType Type);
	void SetAttachment(class UWeaponAttachment* WeaponAttachment);
	void RefreshAttachmentInfo();
	void OnEquipped();
	bool GetEquipped();
	enum class EWeaponAttachmentType GetAttachmentType();
	TSubclassOf<class UWeaponAttachment> GetAttachment();
};

// 0x60 (0x280 - 0x220)
// Class ReadyOrNot.BadAIAction
class ABadAIAction : public AActor
{
public:
	class FText                                  Summary;                                           // 0x220(0x18)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x238(0x18)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	uint8                                        Pad_1853[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBillboardComponent*                   BillboardComponent;                                // 0x258(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1854[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABadAIAction* GetDefaultObj();

	void ReportBadAIAction();
	void Report(bool bReportToLog, bool bDrawString);
	void RemoveReport(bool bReportToLog, bool bDrawString);
	void RemoveBadAIAction();
	void AddNote(class FText& InSummary, class FText& InDescription);
};

// 0x7B0 (0x9D0 - 0x220)
// Class ReadyOrNot.BaseItem
class ABaseItem : public AActor
{
public:
	uint8                                        Pad_1938[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ItemName;                                          // 0x260(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             ItemIcon;                                          // 0x278(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  ItemDescription;                                   // 0x2A0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	enum class EItemClass                        ItemClass;                                         // 0x2B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       CategoryFlags;                                     // 0x2BC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LoadoutPriority;                                   // 0x2C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowInLoadout;                                    // 0x2C4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CustomizationTag;                                  // 0x2C8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ItemsPerSlot;                                      // 0x2D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  LookupTableIdx;                                    // 0x2D4(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ItemWeight;                                        // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementSpeedMultiplier;                           // 0x2E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HolsterPlayRate;                                   // 0x2E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DrawPlayRate;                                      // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanOffset;                                        // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisallowKicking;                                  // 0x2F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFreelookEnabled;                                  // 0x2F1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseLowReady;                                      // 0x2F2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PushbackRange;                                     // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowReadyRange;                                     // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowReadyRangeSightsModifier;                       // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableTickWhenNotEquipped;                       // 0x300(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EGameVersionRestriction>   LockedToDLC;                                       // 0x308(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FItemVisualData                       Visuals;                                           // 0x318(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                            HudOutline;                                        // 0x348(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobScaleH;                                   // 0x350(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobScaleV;                                   // 0x354(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobSpeedScaleH;                              // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobSpeedScaleV;                              // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobAmplitudeBaseSpeed;                       // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobIntensitySprintScale;                     // 0x364(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobAmplitudeWalkScale;                       // 0x368(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobAmplitudeSprintScale;                     // 0x36C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobScaleH;                                   // 0x370(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobScaleV;                                   // 0x374(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobScaleInjured;                             // 0x378(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobSpeedScaleH;                              // 0x37C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobSpeedScaleV;                              // 0x380(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobSpeedScaleInjured;                        // 0x384(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobCrouchModifier;                           // 0x388(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobADSModifier;                              // 0x38C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotPitchScale;                            // 0x390(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotRollScale;                             // 0x394(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotPitchSpeed;                            // 0x398(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotRollSpeed;                             // 0x39C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotCrouchModifier;                        // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponBobRotADSModifier;                           // 0x3A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComp;                                         // 0x3A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                ItemMesh;                                          // 0x3B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         InteractionBox;                                    // 0x3B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   FMODAudioComp;                                     // 0x3C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                InteractableComponent;                             // 0x3C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScoringComponent*                     ScoringComponent;                                  // 0x3D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PhysicsImpact;                                     // 0x3D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1942[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AThrownItem>               ThrownItemClass;                                   // 0x3F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1946[0x3C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAttachOnDrawComplete;                             // 0x434(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1948[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         Rep_CustomItemMeshFromAttachment;                  // 0x438(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCustomizationSkin>     DefaultSkin;                                       // 0x440(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationSkin*                    Skin;                                              // 0x468(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_194A[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInInventory;                                      // 0x471(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldTickAnimBPWhenNotEquipped;                  // 0x472(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_194B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Server_ReplicatedPhysicsLocation;                  // 0x474(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               TargetWorldScale;                                  // 0x480(0xC)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TargetWorldScaleInterpSpeed;                       // 0x48C(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_194D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bStartAsEvidence;                                  // 0x491(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsEvidence;                                       // 0x492(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMarkAsEvidenceWhenNoOwner;                        // 0x493(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsClearable;                                      // 0x494(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasBeenCleared;                                   // 0x495(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_194F[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UDamageType>>       BlockAnyDamageFrom;                                // 0x4A0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDamageType>>       BlockDirectHitsFrom;                               // 0x4B0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bTaserDamageBlocked;                               // 0x4C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1950[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<TSubclassOf<class UDamageType>, float>  MultiplyStunDamageFrom;                            // 0x4C8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class UDamageType>, struct FWeightStunMultiplier> MultiplyStunDamageByWeight;                        // 0x518(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      Dynamic1PMaterialInstances;                        // 0x568(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1951[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInstanceDynamic*>      DynamicWeaponFovMats;                              // 0x580(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class USkeletalMesh*, struct FMeshFOVMaterials> SkeletalMeshToFOVMats;                             // 0x590(0x50)(NativeAccessSpecifierPublic)
	TMap<class UStaticMesh*, struct FMeshFOVMaterials> StaticMeshToFOVMats;                               // 0x5E0(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_1953[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInstanceDynamic*>      FP_SkinMaterials;                                  // 0x638(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      TP_SkinMaterials;                                  // 0x648(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                MasterPoseRep;                                     // 0x658(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowStaticMeshOnBody;                             // 0x660(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1954[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  WeaponWheelCategoryName;                           // 0x664(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1955[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnItemUseCompleted;                                // 0x670(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1956[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanReloadSameMagazine;                            // 0x698(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1957[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          LastReloadAnim_3P;                                 // 0x6A0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanMultiplier;                               // 0x6A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeLeanMultiplier;                                // 0x6AC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEvidenceCollected;                               // 0x6B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EWeaponType                       WeaponType;                                        // 0x6C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableMeshspaceMovement;                         // 0x6C1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_195B[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            MeshspaceTransform_Default;                        // 0x6D0(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                            MeshspaceTransform_Aiming;                         // 0x700(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                            MeshspaceTransform_Back;                           // 0x730(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        InertiaDragAimRotation;                            // 0x760(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InertiaDragAimLocation;                            // 0x764(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InertiaDragStrafeRotation;                         // 0x768(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InertiaDragStrafeLocation;                         // 0x76C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MovementSpeedScale;                                // 0x770(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              MovementSpeedRotationScalePitchYawRoll;            // 0x77C(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        MeshSpaceAimInterp;                                // 0x788(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_195F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            MeshspaceTransform_OnDraw;                         // 0x790(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        OnDrawMeshspaceInterp;                             // 0x7C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1961[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            MeshspaceTransform_OnHolster;                      // 0x7D0(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        OnHolsterMeshspaceInterp;                          // 0x800(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BodySocket;                                        // 0x804(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  HandsSocket;                                       // 0x80C(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AnimationIndex1P;                                  // 0x814(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1964[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AnimationIndex3P;                                  // 0x81C(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1965[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDeployable;                                       // 0x824(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldEquipToHands;                               // 0x825(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1969[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EItemCategory>             ItemCategories;                                    // 0x828(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        Pad_196B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnItemDrawComplete;                                // 0x848(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_196D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       Reload_CameraShake;                                // 0x860(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       ReloadEmpty_CameraShake;                           // 0x868(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       DrawCameraShake;                                   // 0x870(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       HolsterCameraShake;                                // 0x878(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  PreviousOwner;                                     // 0x880(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1971[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                LastFPAnimInstanceClass;                           // 0x8C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1972[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                LastTPAnimInstanceClass;                           // 0x900(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBeingCollected;                                 // 0x908(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1975[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurrentCollectionTime;                             // 0x90C(0x4)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxCollectionTime;                                 // 0x910(0x4)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1977[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  CollectingCharacter;                               // 0x918(0x8)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDropping;                                         // 0x920(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1978[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDisableAnimInstanceWhenNotEquipped;               // 0x930(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_197B[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotWeaponAnimData*             AnimationData;                                     // 0x940(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             DefaultAnimationData;                              // 0x948(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             GripAnimationData;                                 // 0x950(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             ShieldRaisedAnimationData;                         // 0x958(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             ShieldLoweredAnimationData;                        // 0x960(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimLimit;                                      // 0x968(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimLimitADS;                                   // 0x96C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LazySpringStrength;                                // 0x970(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LazySpringStrengthADS;                             // 0x974(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimInterpSpeed;                                // 0x978(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimInterpADSModifier;                          // 0x97C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimInterpHipModifier;                          // 0x980(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimSlowMoveModifier;                           // 0x984(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeAimSlowMoveTolerance;                          // 0x988(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1984[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       MeleeUserCameraShake;                              // 0x990(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bADSCountsAsAbuse;                                 // 0x998(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1986[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HesitationBoostMultiplier;                         // 0x99C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAimingDownSights;                               // 0x9A0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1987[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LowReadyPitchThreshold;                            // 0x9A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponSound*                          SoundData;                                         // 0x9A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideBreathingEvent;                           // 0x9B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1988[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BreathingAudioOverride;                            // 0x9B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEasyPickup;                                       // 0x9C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoPickup;                                         // 0x9C1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bScriptedFPHidden;                                 // 0x9C2(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMotionBlockType                  ActiveMotionBlock;                                 // 0x9C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsOneHandedItem;                                  // 0x9C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_198B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FP_ADS_Motion_Weight;                              // 0x9C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_198C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseItem* GetDefaultObj();

	void StunTick(enum class EStunType StunType);
	void StunnedWhileEquipped();
	void StopTPMontage(class UAnimMontage* AnimMontage);
	void StopFPMontage(class UAnimMontage* AnimMontage);
	void SpawnThrownItemAtTransform(struct FTransform& Transform, struct FVector& ThrowDirection, struct FVector& ThrowLocation);
	bool ShouldHideInPictureInPictureScopes();
	void SetupBaseEvents();
	void Server_SetMasterPoseComponent(class USkeletalMeshComponent* Mesh);
	void Server_PlayTPMontage(class UAnimMontage* NewMontage, float PlayRate);
	void Server_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	void PlayWeaponCleaning();
	void PlayTPMontage(class UAnimMontage* NewMontage, float PlayRate);
	void PlayFPMontage(class UAnimMontage* NewMontage, float PlayRate);
	void PlayFMODAudio(class UFMODEvent* Event);
	bool PlayDraw(bool bDrawFirst);
	void PlayDoorPushAnimation();
	void PlayButtonPushAnimation();
	void OnThrownFromInventory(class AReadyOrNotCharacter* Thrower, bool bMarkAsEvidence);
	void OnRep_Skin();
	void OnRep_MasterPoseComponent();
	void OnRep_IsDropping();
	void OnRep_AttachmentRep();
	void OnPhysicsImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnOwnerPossessed();
	void OnMeshComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnItemUsed();
	void OnItemUseCompleted__DelegateSignature(class ABaseItem* Item);
	void OnItemUseComplete();
	void OnItemPrimaryUseEnd();
	void OnItemPrimaryUse__DelegateSignature(class ABaseItem* Item);
	void OnItemPrimaryUse();
	void OnItemEndUse();
	void OnItemDrawComplete__DelegateSignature(class ABaseItem* Item);
	void OnItemAttachmentsChanged__DelegateSignature(enum class EItemAttachment AttachmentChanged);
	void OnEvidenceCollected__DelegateSignature();
	void NextFireMode();
	void Multicast_PlayTPMontage(class UAnimMontage* NewMontage, float PlayRate);
	void MarkAsEvidence(bool bMarkAsEvidence);
	void LastStunTick(enum class EStunType StunType);
	bool IsPlayingStunnedEndAnimation();
	bool IsPlayingStunnedAnimation();
	bool IsPlayingHolster();
	bool IsPlayingDraw();
	bool IsMontagePlaying(class UAnimMontage* Montage, bool bIncludeFP, bool bIncludeTP);
	bool IsLocallyControlled();
	bool IsEquipped();
	bool IsDoorPushAnimationPlaying();
	bool IsDepleted();
	bool IsCurrentlyReloading();
	bool IsCollidesWhileNotEquipped();
	bool IsButtonPushAnimationPlaying();
	bool IsBlockingAnimationPlaying(const TArray<enum class EBlockingAnimationExclusion>& Exclusions);
	void InterpToTargetScale(const struct FVector& NewScale, float InterpSpeed);
	bool HasDoorPushAnimation();
	bool HasButtonPushAnimation();
	float GetWeight();
	float GetLowReadyRange();
	class USkeletalMeshComponent* GetItemMesh();
	class FName GetEquipSocket();
	class UAnimMontage* GetCurrentTPMontage();
	class UAnimMontage* GetCurrentFPMontage();
	void EndStunWhileEquipped();
	void DrawOutline();
	void DisableOutline();
	void DisableOrEnableAnimation();
	void DetachStatic();
	bool ContainsItemCategory(enum class EItemCategory TestCategory);
	void ClientPlayDraw(bool bDrawFirst);
	void Client_StopItemAnimation(struct FWeaponAnim& InWeaponAnim, bool bOnlyTP);
	void Client_SetFPModelVisibility(bool bVisibility);
	void Client_PlayItemAnimation(struct FWeaponAnim& InWeaponAnim, bool bRestartIfAlreadyPlaying, bool bOnlyLocal, bool bOnlyTP);
	void Client_PlayFPMontage(class UAnimMontage* NewMontage, float PlayRate);
	void Client_OnItemPickedUp(class AActor* NewOwner, bool bEquipped);
	bool CanShowActionSlot1(class AReadyOrNotCharacter* PC);
	bool CanEquip(class AReadyOrNotCharacter* ToCharacter);
	void CancelCurrentReloadAction(bool bCancel);
	void BP_AttachmentRep();
	void AttachStatic();
};

// 0x0 (0x9D0 - 0x9D0)
// Class ReadyOrNot.BaseDeployableGear
class ABaseDeployableGear : public ABaseItem
{
public:

	static class UClass* StaticClass();
	static class ABaseDeployableGear* GetDefaultObj();

};

// 0x40 (0xA10 - 0x9D0)
// Class ReadyOrNot.BallisticsShield
class ABallisticsShield : public ABaseDeployableGear
{
public:
	class UMaterialInstanceDynamic*              GlassMaterialInstance;                             // 0x9D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseMagazineWeapon*                   PistolEquippedWithShield;                          // 0x9D8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_19B4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            ShieldHitEvent;                                    // 0x9E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Damage;                                            // 0x9F0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlassPhaseParam;                                   // 0x9F4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_19B6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLowered;                                          // 0x9FA(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_19B8[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       ShieldHitCameraShake;                              // 0xA00(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_19B9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABallisticsShield* GetDefaultObj();

	void Server_SetLowered(bool bShouldLower);
	void OnTPShieldHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Client_SetPistol(class ABaseItem* NewPistol);
	void Client_PlayShieldHitSound();
};

// 0x70 (0xA40 - 0x9D0)
// Class ReadyOrNot.BaseArmour
class ABaseArmour : public ABaseItem
{
public:
	bool                                         bIsHeavy;                                          // 0x9D0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_19C3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ScaleLensFlare;                                    // 0x9D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                 Variations;                                        // 0x9D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UParticleSystem*                       ArmourHitParticle;                                 // 0x9E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ArmourHitSound;                                    // 0x9F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ArmourHitSoundFirstPerson;                         // 0x9F8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PaperdollTexture;                                  // 0xA00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PaperdollTexture_Crouch;                           // 0xA08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PaperdollTexture_Carry;                            // 0xA10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PaperdollTexture_Carry_Crouch;                     // 0xA18(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       InterceptShakeFront;                               // 0xA20(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       InterceptShakeBack;                                // 0xA28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       InterceptShakeLeft;                                // 0xA30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       InterceptShakeRight;                               // 0xA38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ABaseArmour* GetDefaultObj();

	bool HasRemainingProtection();
	float GetDurabilityPercentage();
};

// 0x278 (0x410 - 0x198)
// Class ReadyOrNot.BaseCombatActivity
class UBaseCombatActivity : public UBaseActivity
{
public:
	FMulticastInlineDelegateProperty_            OnTrackNewEnemy;                                   // 0x198(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScriptedFireAt                       CurrentScriptedFireAt;                             // 0x1A8(0x28)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FScriptedLookAt                       CurrentScriptedLookAt;                             // 0x1D0(0x18)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A13[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FleeDesire;                                        // 0x1F0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSincePerformingAnyCombatMove;                  // 0x1F4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimePerformingAnyCombatMove;                       // 0x1F8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A14[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTraverseHoleActivity*                 TraverseHoleActivity;                              // 0x200(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBaseCombatMoveActivity*               CombatMoveActivity;                                // 0x208(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBaseCombatMoveActivity*               PreviousCombatMoveActivity;                        // 0x210(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHardCoverCombatMove*                  HardCoverCombatMove;                               // 0x218(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuelingCombatMove*                    DuelingCombatMove;                                 // 0x220(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFlankingCombatMove*                   FlankingCombatMove;                                // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USuppressionCombatMove*                SuppressionCombatMove;                             // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPushCombatMove*                       PushCombatMove;                                    // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChargeCombatMove*                     ChargeCombatMove;                                  // 0x240(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFleeingCombatMove*                    FleeingCombatMove;                                 // 0x248(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URepositionCombatMove*                 RepositionCombatMove;                              // 0x250(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A16[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CoverLandmarkEvaluationCooldown;                   // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A18[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  LastTrackedEnemy;                                  // 0x278(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A19[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPickupItemActivity*                   PickupItemActivity;                                // 0x290(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReloadSafelyActivity*                 ReloadSafelyActivity;                              // 0x298(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayDeadActivity*                     PlayDeadActivity;                                  // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommitSuicideActivity*                CommitSuicideActivity;                             // 0x2A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A1A[0x160];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBaseCombatActivity* GetDefaultObj();

	void TrackEnemyKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void TrackEnemyFire(class AReadyOrNotCharacter* FromCharacter, class ABaseMagazineWeapon* Weapon, const struct FVector& FireDirection);
	void StopScriptedLook();
	void StopScriptedFire();
	void StartRunningCombatMove(class UBaseCombatMoveActivity* CombatMove);
	void ScriptedLookAtLocation(const struct FVector& InLocation, float InTime);
	void ScriptedLookAtActor(class AActor* InActor, float InTime);
	void ScriptedFireAtLocation(const struct FVector& InLocation, float InTime, bool bOverrideTarget, float AccuracyPenaltyMultiplier, bool bInfiniteAmmo);
	void ScriptedFireAtActor(class AActor* InActor, float InTime, bool bOverrideTarget, float AccuracyPenaltyMultiplier, bool bInfiniteAmmo);
	void PlayDeadStarted(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void PlayDeadFinished(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void PerformStrafeLogic(float DeltaTime, float Uptime);
	void PerformNoStrafeLogic(float DeltaTime, float Uptime);
	void OnTrackNewEnemy__DelegateSignature(class AReadyOrNotCharacter* NewTrackedEnemy);
	void OnTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnSuicideFakeOutSuccess();
	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnRequestCoverLandmark();
	void OnRequestCover();
	void OnNoCoverFound();
	void OnCoverLandmarkExit();
	void OnCoverFound();
	void OnCoverExit();
	bool IsTryingToFireAtScriptedActor();
	bool IsRunningCombatMoveActivity(class UClass* Class);
	bool IsFocusingOnActor(class AActor* InActor);
	int32 GetFailureCountForCombatMove(TSubclassOf<class UBaseCombatMoveActivity> CombatMoveClass);
	class UBaseCombatMoveActivity* GetCombatMoveActivity();
	void FinishCombatMove(bool bSuccess);
	void EnterStrafeState();
	void EnterNoStrafeState();
};

// 0x30 (0x1C8 - 0x198)
// Class ReadyOrNot.BaseCombatMoveActivity
class UBaseCombatMoveActivity : public UBaseActivity
{
public:
	class UBaseCombatActivity*                   OwningCombatActivity;                              // 0x198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FailureCount;                                      // 0x1A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastSuccessTime;                                   // 0x1A4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastFailTime;                                      // 0x1A8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A2A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBaseActivity*                         InterruptActivity;                                 // 0x1B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A2B[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bRequireMagazineWeapon;                            // 0x1C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A2C[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBaseCombatMoveActivity* GetDefaultObj();

	void RequestCombatMove_Blueprint(float DeltaTime);
	bool HasLOSToEnemy();
	bool HasAnyOtherCombatMoveGotLocation(struct FVector& TestLocation, float Tolerance);
	class UBaseActivity* GetInterruptActivity();
	void GenerateNavigablePoints(struct FVector& GenAroundLoc, struct FNavGenerationParameters& NavGenerationParameters, TArray<struct FVector>* OutLocations);
	void FinishCombatMove(bool bSuccess);
};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.BaseCredit
class UBaseCredit : public UUserWidget
{
public:
	bool                                         bRevealed;                                         // 0x260(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A2E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FAnimationSpeed;                                   // 0x264(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBaseCredit* GetDefaultObj();

};

// 0x480 (0xE50 - 0x9D0)
// Class ReadyOrNot.BaseGrenade
class ABaseGrenade : public ABaseItem
{
public:
	uint8                                        Pad_1A42[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPointLightComponent*                  DetonationLight;                                   // 0x9D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URadialForceComponent*                 DetonationRadialForce;                             // 0x9E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   FMODBounceSoundComponent;                          // 0x9E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIPerceptionStimuliSourceComponent*   DetonationStimuliComp;                             // 0x9F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GrenadeBounciness;                                 // 0x9F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDetonationTriggersStimuli;                        // 0x9FC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A4A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DetonationSoundMaxRange;                           // 0xA00(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DetonationLoudness;                                // 0xA04(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DetonationTag;                                     // 0xA08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ThrownTag;                                         // 0xA10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BounceTag;                                         // 0xA18(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A4C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AThrownGrenade*                        Thrown;                                            // 0xA28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedFixedThrowTrajectory : 1;                     // Mask: 0x1, PropSize: 0x10xA30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_119 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1A50[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       FirstBouncePath;                                   // 0xA38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                            FirstBounceHit;                                    // 0xA48(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A53[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       SecondBouncePath;                                  // 0xAD8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                            SecondBounceHit;                                   // 0xAE8(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A54[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       ThirdBouncePath;                                   // 0xB78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                            ThirdBounceHit;                                    // 0xB88(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A55[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector_NetQuantize>           CompletePath;                                      // 0xC18(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A56[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BouncePt1;                                         // 0xC34(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BouncePt2;                                         // 0xC38(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BouncePt3;                                         // 0xC3C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A58[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DeployGrenadeVoiceLine;                            // 0xC48(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GrenadeSpeed;                                      // 0xC58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A5A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BounceSoundMinImpulse;                             // 0xC64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    BounceSoundEffects;                                // 0xC68(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ActivationEffect;                                  // 0xC78(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       GrenadeBounceEffect;                               // 0xC80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ActivationSound;                                   // 0xC88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivationTime;                                    // 0xC90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivationElapsedTime;                             // 0xC94(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bActivated;                                        // 0xC98(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayDetonationEffectsExactlyOnce;                 // 0xC99(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDetonationEffectsPlayed;                          // 0xC9A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A5D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceUsed;                                     // 0xC9C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceDetonate;                                 // 0xCA0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A5E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDrawDebugTrace                   DrawDebugType;                                     // 0xCA5(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bThrowAsQuickThrow;                                // 0xCA6(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFastThrowOnceEquipped;                            // 0xCA7(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFastThrowing;                                     // 0xCA8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGrenadeReleased;                                  // 0xCA9(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A62[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ThrowImpulse;                                      // 0xCB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpImpulse;                                         // 0xCB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTriggersActionMusic;                              // 0xCB8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanThrowGrenade;                                  // 0xCB9(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A64[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DetonationTime;                                    // 0xCBC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIncreaseDamageRadiusOverTime;                     // 0xCC0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A65[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UnderarmForceScale;                                // 0xCC8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Drag;                                              // 0xCCC(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DragAppliedPerBounce;                              // 0xCD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DetonationFlashIntensitiy;                         // 0xCD4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DetonationFlashInterp;                             // 0xCD8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReDetonationTime;                                  // 0xCDC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTriggerSFXOnRedetonate;                           // 0xCE0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A66[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ThrowDistance;                                     // 0xCE4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RedotonateCount;                                   // 0xCE8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoMoraleDamage : 1;                               // Mask: 0x1, PropSize: 0x10xCEC(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1A68[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ListenerTriggerDistance;                           // 0xCF0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A69[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MaxRandomizedForceOnDetonation;                    // 0xD00(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               FixedForceOnDetonation;                            // 0xD0C(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>               DetonationParticles;                               // 0xD18(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UParticleSystemComponent*>      SpawnedParticles;                                  // 0xD28(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                              ParticleSpawnRotation;                             // 0xD38(0xC)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A6C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            DetonationFMODEvent;                               // 0xD48(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             DetonationEvent;                                   // 0xD50(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHideGrenadeOnDetonate;                            // 0xD58(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGrenadeType                      Type;                                              // 0xD59(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A6E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnGrenadeDetonated;                                // 0xD60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeThrown;                                   // 0xD70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        RedrawDelayAfterThrow;                             // 0xD80(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsed;                                             // 0xD84(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A72[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  ThrownBy;                                          // 0xD88(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A74[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGrenadeDamage>                DetonationDamage;                                  // 0xDA0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bUseScreenShake;                                   // 0xDB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A79[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       ExplosionScreenShake;                              // 0xDB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraShakeRadius;                                 // 0xDC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDetonationDecal;                               // 0xDC4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A7C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DetonationDecalTraceDistance;                      // 0xDC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A7D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    DetonationDecal;                                   // 0xDD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               DetonationDecalSize;                               // 0xDD8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A7E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          HideBonesOnUsed;                                   // 0xDE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        BounceActivationRadius;                            // 0xDF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A80[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FMODGrenadeBounce;                                 // 0xE00(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A81[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GrenadeOcclusionMultiplier;                        // 0xE10(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GrenadeFullOcclusionDepth;                         // 0xE14(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistanceDifference;                             // 0xE18(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        InterpStrength;                                    // 0xE1C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ClientReplicationFrequency;                        // 0xE20(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A82[0x2C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseGrenade* GetDefaultObj();

	void UpdateServerPath(TArray<struct FVector_NetQuantize>& Path, int32 Bounce1, int32 Bounce2, int32 Bounce3);
	void Throw(bool bLocalOnly, bool bOverarmThrow, struct FVector& ThrowDirection, struct FVector& ThrowStart);
	void SetFullyPrimed();
	void Server_UpdateThrowPosition(const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	void Server_ThrowGrenade(bool bOverarmThrow, const struct FVector& ThrowDirection, const struct FVector& ThrowStart);
	void Server_StartFastThrow();
	void Server_SetThrowOverarm(bool bThrowOverarm, bool bQuickThrow);
	void OnRep_GrenadeUsed();
	void OnRep_GrenadePath();
	void OnGrenadeThrown__DelegateSignature(class ABaseGrenade* ThrownGrenade);
	void OnGrenadeBounceSoundStopped();
	void OnDetonate__DelegateSignature(class ABaseGrenade* Grenade);
	void Multicast_OnDeadDropped();
	void Multicast_GrenadeThrow(bool bOverarmThrow, const struct FVector& ThrowDirection, const struct FVector& ThrowStart);
	void Multicast_DetonationEffects(const struct FVector& CalculatedForce);
	void Multicast_AddImpulse(const struct FVector& Impulse, const struct FVector& FromLocation);
	bool IsOutside();
	void DoThrowFast();
	void Detonate();
};

// 0x40 (0xE90 - 0xE50)
// Class ReadyOrNot.BaseGasGrenade
class ABaseGasGrenade : public ABaseGrenade
{
public:
	int32                                        MaxGasPoints;                                      // 0xE50(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A89[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LocationRecordingRate;                             // 0xE68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecordDistanceThreshold;                           // 0xE6C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A8A[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseGasGrenade* GetDefaultObj();

	void RecordLocation();
};

// 0x630 (0x1000 - 0x9D0)
// Class ReadyOrNot.BaseWeapon
class ABaseWeapon : public ABaseItem
{
public:
	bool                                         bPistolGrip;                                       // 0x9D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFireMode                         FiremodeBeforeSafe;                                // 0x9D1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AA5[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAmmoTypeData                         CurrentAmmoType;                                   // 0x9D8(0x160)(Edit, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_1AA6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            AmmoDataTable;                                     // 0xB40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                          AmmunitionTypes;                                   // 0xB48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0xB58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                       BulletSpawn;                                       // 0xB60(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                       ShellSpawn;                                        // 0xB68(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ShellParticle;                                     // 0xB70(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpotLightComponent*                   Flashlight;                                        // 0xB78(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScopedWeaponAttachment*               ScopeAttachment;                                   // 0xB80(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     MuzzleAttachment;                                  // 0xB88(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     UnderbarrelAttachment;                             // 0xB90(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     OverbarrelAttachment;                              // 0xB98(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     StockAttachment;                                   // 0xBA0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     GripAttachment;                                    // 0xBA8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     IlluminatorAttachment;                             // 0xBB0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponAttachment*                     AmmunitionAttachment;                              // 0xBB8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   ADSAudioComponent;                                 // 0xBC0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   ADSEndAudioComponent;                              // 0xBC8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   ADSAudioComponents[0x5];                           // 0xBD0(0x28)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   ADSEndAudioComponents[0x5];                        // 0xBF8(0x28)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AA8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AttachmentPoints;                                  // 0xC24(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSupressed;                                        // 0xC28(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AA9[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnFireModeChanged;                                 // 0xC38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EFireMode                         CurrentFireMode;                                   // 0xC48(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFireMode                         DefaultFireMode;                                   // 0xC49(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AAA[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EFireMode>                 AvailableFireModes;                                // 0xC50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        BurstBulletCount;                                  // 0xC60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasSafeMode;                                      // 0xC64(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AAB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AddedMagazineCountFromAttachments;                 // 0xC68(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Optics_UI_Socket;                                  // 0xC6C(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Grip_UI_Socket;                                    // 0xC74(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Muzzle_UI_Socket;                                  // 0xC7C(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Stock_UI_Socket;                                   // 0xC84(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Magazine_UI_Socket;                                // 0xC8C(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADSZoom;                                           // 0xC94(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADSZoomInSpeed;                                    // 0xC98(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADSZoomOutSpeed;                                   // 0xC9C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DefaultDamageType;                                 // 0xCA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0xCA8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       FireCameraShake;                                   // 0xCB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraShakeBase*                      FireCameraShakeInst;                               // 0xCB8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    DamageOverRange;                                   // 0xCC0(0x88)(Edit, NativeAccessSpecifierPublic)
	float                                        Damage;                                            // 0xD48(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageSeverityMultiplier;                          // 0xD4C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageSeverityChance;                              // 0xD50(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BleedoutDamageMultiplier;                          // 0xD54(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BleedoutDamageChance;                              // 0xD58(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultDamage;                                     // 0xD5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FireRate;                                          // 0xD60(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinFireRateAI;                                     // 0xD64(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFireRateAI;                                     // 0xD68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BulletsFiredUntilFullyAccurate;                    // 0xD6C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProjectileMovementSpeed;                           // 0xD70(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArmorPiercing;                                    // 0xD74(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AAC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AImpactEffect>             ImpactEffects;                                     // 0xD78(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AImpactEffect>             RicochetEffects;                                   // 0xD80(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       RicochetParticleSystem;                            // 0xD88(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            RicochetEvent;                                     // 0xD90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    SpallingDecal;                                     // 0xD98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       SpallingParticleSystem;                            // 0xDA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SpallingEvent;                                     // 0xDA8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AImpactEffect>             ExitEffects;                                       // 0xDB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Wobble;                                            // 0xDB8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialWobbleDelay;                                // 0xDBC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAttachBulletOnHit;                                // 0xDC0(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AAE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BulletPhysicsImpulseMultiplier;                    // 0xDC4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDestroyBulletOnHit;                               // 0xDC8(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AAF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         BulletProjectileMesh;                              // 0xDD0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           FakeProjectileMeshStatic;                          // 0xDD8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           BulletProjectileMeshStatic;                        // 0xDE0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BulletProjectileScale;                             // 0xDE8(0xC)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABaseShell>                ShellClass;                                        // 0xDF8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           ShellMesh;                                         // 0xE00(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                      RecoilPattern;                                     // 0xE08(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BulletDrag;                                        // 0xE1C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilInterpSpeed;                                 // 0xE20(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADSRecoilMultiplier;                               // 0xE24(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADSSpreadMultiplier;                               // 0xE28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilReturnRate;                                  // 0xE2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreAmmoTypeSpread;                             // 0xE30(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              SpreadPattern;                                     // 0xE34(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpreadReturnRate;                                  // 0xE44(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              PendingSpread;                                     // 0xE48(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              FireDirection;                                     // 0xE54(0xC)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        GlimmerIntensity;                                  // 0xE60(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SpawnProjectileCount;                              // 0xE64(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FirstShotRecoil;                                   // 0xE68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FirstShotSpread;                                   // 0xE6C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FirstShotResetTime;                                // 0xE70(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocitySpreadMultiplier;                          // 0xE74(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityRecoilMultiplier;                          // 0xE78(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilMultiplierPitch;                             // 0xE7C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilMultiplierYaw;                               // 0xE80(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RefireDelay;                                       // 0xE84(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilReturnPercentage;                            // 0xE88(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilReturnInterpSpeed;                           // 0xE8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB6[0x2A];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAcceptsScopeAttachments;                          // 0xEBA(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsMuzzleAttachments;                         // 0xEBB(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsUnderbarrelAttachments;                    // 0xEBC(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsOverbarrelAttachments;                     // 0xEBD(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsStockAttachments;                          // 0xEBE(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsGripAttachments;                           // 0xEBF(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsIlluminatorAttachments;                    // 0xEC0(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAcceptsAmmunitionAttachments;                     // 0xEC1(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AB7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UScopedWeaponAttachment>> AvailableScopeAttachments;                         // 0xEC8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableMuzzleAttachments;                        // 0xED8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableUnderbarrelAttachments;                   // 0xEE8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableOverbarrelAttachments;                    // 0xEF8(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableStockAttachments;                         // 0xF08(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableGripAttachments;                          // 0xF18(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableIlluminatorAttachments;                   // 0xF28(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWeaponAttachment>> AvailableAmmunitionAttachments;                    // 0xF38(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bCalculateProcRecoil;                              // 0xF48(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RecoilDampStrength;                                // 0xF4C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilFireTime;                                    // 0xF50(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilFireStrength;                                // 0xF54(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilFireStrengthFirst;                           // 0xF58(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilAngleStrength;                               // 0xF5C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilRandomness;                                  // 0xF60(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilFireADSModifier;                             // 0xF64(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilAngleADSModifier;                            // 0xF68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RecoilRotationBuildup;                             // 0xF6C(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RecoilPositionBuildup;                             // 0xF78(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecoilBuildupADSModifier;                          // 0xF84(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         RecoilHasBuildup;                                  // 0xF88(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RecoilBuildupDampStrength;                         // 0xF8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABC[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ProcRecoil_Trans;                                  // 0xFBC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              ProcRecoil_Rot;                                    // 0xFC8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               ProcRecoil_Trans_Buildup;                          // 0xFD4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              ProcRecoil_Rot_Buildup;                            // 0xFE0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        CurrentHighTimer;                                  // 0xFEC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReloadHighTimer;                                   // 0xFF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FireHighTimer;                                     // 0xFF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EquipHighTimer;                                    // 0xFF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseScopeMask;                                     // 0xFFC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABD[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseWeapon* GetDefaultObj();

	void UpdateStoredAttachments(TSubclassOf<class UWeaponAttachment> Attachment);
	void ResetRecoilSettingsToDefault();
	void RemoveAttachment(bool bScopedAttachment, bool bMuzzleAttachment, bool bUnderbarrelAttachment, bool bOverbarrelAttachment, bool bStockAttachment, bool bGripAttachment, bool bIlluminatorAttachment, bool bAmmunitionAttachment);
	void PlayFiringModeAnimation();
	void OnWeaponReloadStarted();
	void OnWeaponReloadComplete();
	void OnWeaponFireModeChanged__DelegateSignature(enum class EFireMode NewFireMode);
	void OnWeaponFiredEnd();
	void OnWeaponFired(const struct FRotator& FireDirection);
	void OnFireAtBulletSpawn();
	void OnEndAimDownSights(bool bWasAiming);
	void OnAimDownSights(bool bWasAiming);
	bool IsLethalWeapon();
	bool IsLessLethalWeapon();
	enum class EWeaponUnderbarrelAnimationType GetUnderbarrelAnimationType();
	struct FRotator GetSpread();
	struct FRotator GetRecoil();
	class ULightAttachment* GetLightAttachment();
	class ULaserAttachment* GetLaserAttachment();
	void EnableGlimmer();
	void DisableGlimmer();
	bool CanReload();
	bool CanAddAttachment(class UClass* AttachmentClass);
	void AddMagazineCountFromAttachments(float AddAmount);
	void AddAttachment(class UClass* Class, bool bReplicateAttachment);
};

// 0x430 (0x1430 - 0x1000)
// Class ReadyOrNot.BaseMagazineWeapon
class ABaseMagazineWeapon : public ABaseWeapon
{
public:
	uint8                                        Pad_1AF3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              MuzzleFlashParticleComponent;                      // 0x1008(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*              MuzzleSmokeParticleComponent;                      // 0x1010(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*              HeatSmokeParticleComponent;                        // 0x1018(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*              RicochetParticleComponent;                         // 0x1020(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*              RicochetParticleComponents[0x5];                   // 0x1028(0x28)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AF6[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODAudioComponent*                   FiringAudioComp;                                   // 0x1070(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                CartridgeText;                                     // 0x1078(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                RPMText;                                           // 0x1088(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                BarrelLengthText;                                  // 0x1098(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                CapacityText;                                      // 0x10A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MuzzleVelocityText;                                // 0x10B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SupressionStrength;                                // 0x10C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AF8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       SupressionCameraShake;                             // 0x10D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnNoTrail;                                     // 0x10D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ABulletTracer*>                 BulletTracers;                                     // 0x10E0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseShell*>                    SpawnedShells;                                     // 0x10F0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponFire;                                      // 0x1100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponDryFire;                                   // 0x1110(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFB[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bReloading;                                        // 0x1150(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCancelReloading;                                  // 0x1151(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHitScan;                                          // 0x1152(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnTracer;                                      // 0x1153(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoSpawnTracerForFiringPlayer;                     // 0x1154(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFD[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  MuzzleFlashParticleSocket;                         // 0x1160(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MuzzleSmokeParticleSocket;                         // 0x1168(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                          GunTails_Handle;                                   // 0x1170(0x8)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowParticlesWhenFiring;                          // 0x1178(0x1)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UDamageType>               ArmorPiercingDamageType;                           // 0x1180(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       ProjectileAttachedParticle;                        // 0x1188(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawBlood;                                        // 0x1190(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABulletProjectile>         FakeBulletProjectile;                              // 0x1198(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABulletProjectile>         BulletProjectile;                                  // 0x11A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABulletProjectile>         ArmorPiercingBulletProjectile;                     // 0x11A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PenetrationDistance;                               // 0x11B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B02[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           BreachShell;                                       // 0x11B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           BeanbagShell;                                      // 0x11C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           BuckShotShell;                                     // 0x11C8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           SlugShell;                                         // 0x11D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MagazineSocket;                                    // 0x11D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMagazine>                     Magazines;                                         // 0x11E0(0x10)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                        MagIndex;                                          // 0x11F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NextMagIndex;                                      // 0x11F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  HideBoneWhenNotReloading;                          // 0x11F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DesiredAmmoType;                                   // 0x1200(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInfiniteAmmo : 1;                                 // Mask: 0x1, PropSize: 0x10x1204(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B04[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        QueuedAmmoType;                                    // 0x1208(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBulletInChamberOnReload;                          // 0x120C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTacReloadWhenEmpty;                               // 0x120D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B05[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmmoMax;                                           // 0x1210(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockIntegrityMinDamage;                            // 0x1214(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockIntegrityMaxDamage;                            // 0x1218(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoseMagOnReload;                                  // 0x121C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnShell;                                       // 0x121D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B06[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnShellDelay;                                   // 0x1220(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B07[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            ShellBounceFMODAudio;                              // 0x1228(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B08[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpactDecalScale;                                  // 0x1244(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AImpactEffect*                         ImpactEffects_Instance;                            // 0x1248(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AImpactEffect*>                 SpawnedImpactEffects;                              // 0x1250(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  Magazine_HandSocket;                               // 0x1260(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowAmmoTypesOnHUD;                               // 0x1268(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B09[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MoraleHighReloadTableOverride;                     // 0x1270(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MoraleMediumReloadTableOverride;                   // 0x1280(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MoraleLowReloadTableOverride;                      // 0x1290(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B0A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABulletProjectile*                     LastSpawnedProjectile;                             // 0x12A8(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B0C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  MagCheckOverrideSocket;                            // 0x12B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasVisibleMags;                                   // 0x12C0(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B0D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  Mag_01_Socket;                                     // 0x12C4(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Mag_01_Bullets_Socket;                             // 0x12CC(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Mag_01_Extra_Socket;                               // 0x12D4(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B0F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  Mag_01_Comp;                                       // 0x12E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_01_Comp_TPOnly;                                // 0x12E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowBulletsWhenEmpty;                             // 0x12F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B10[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  Mag_01_Bullets_Comp;                               // 0x12F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_01_Extra_Comp;                                 // 0x1300(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_ReloadInterpFix_Comp;                          // 0x1308(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B11[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           Mag_01_Static;                                     // 0x1348(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_01_FMJ_Bullets_Static;                         // 0x1350(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_01_HP_Bullets_Static;                          // 0x1358(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_01_Extra_Static;                               // 0x1360(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Mag_02_Socket;                                     // 0x1368(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Mag_02_Bullets_Socket;                             // 0x1370(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Mag_02_Extra_Socket;                               // 0x1378(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_02_Comp;                                       // 0x1380(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_02_Bullets_Comp;                               // 0x1388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mag_02_Extra_Comp;                                 // 0x1390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_02_Static;                                     // 0x1398(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_02_FMJ_Bullets_Static;                         // 0x13A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_02_HP_Bullets_Static;                          // 0x13A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           Mag_02_Extra_Static;                               // 0x13B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseFireLoopAnims;                                 // 0x13B8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B14[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            MagCheckIcon_Empty;                                // 0x13C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            MagCheckIcon_Full;                                 // 0x13C8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DroppedMagazineHitEvent;                           // 0x13D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatPerShot;                                       // 0x13D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatThreshold;                                     // 0x13DC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatMax;                                           // 0x13E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatDissipation;                                   // 0x13E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentHeat;                                       // 0x13E8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatMinimumTime;                                   // 0x13EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeatTime;                                          // 0x13F0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHeatEffectPlayed;                                 // 0x13F4(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B15[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MagazineWeightFull;                                // 0x13F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MagazineWeightEmpty;                               // 0x13FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MagazineCountDefault;                              // 0x1400(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MagazineCountMin;                                  // 0x1404(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MagazineCountMax;                                  // 0x1408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MagazineLabel;                                     // 0x140C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasBeenDisassembled;                              // 0x1414(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B16[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GunshotOcclusionMultiplier;                        // 0x1418(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GunshotFullOcclusionDepth;                         // 0x141C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShootingYellBias;                                  // 0x1420(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bTwoHandedPistol;                                  // 0x1424(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHeavyRifle;                                       // 0x1425(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B17[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RagdollImpulseMultiplier;                          // 0x1428(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B18[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseMagazineWeapon* GetDefaultObj();

	void SetMagazineCount(int32 Count, const TArray<class FName>& AmmoTypes);
	void Server_SetTacticalReload(bool bIsTacticalReload);
	void Server_SetReloading(bool bIsReloading);
	void Server_SetDesiredAmmoTypeIndex(int32 Index);
	void Server_SetCancelReloading(bool bNewValue);
	void Server_OnFire(const struct FRotator& Direction, const struct FVector& SpawnLoc, int32 Seed);
	void Server_NextMagazine();
	void Server_HitscanHit(struct FHitResult& HitResult, float Time, const struct FVector& TraceBegin, float Distance, float Penetration, int32 AmmoTypeIndex);
	void Server_AddMagazine(const struct FMagazine& Magazine);
	void ReplenishAmmo();
	float RemoveAmmo(float Value);
	void PlaySound(class USoundCue* Cue);
	void PlayBulletWhizz(float Pan);
	void OnWeaponMagCheck__DelegateSignature(class ABaseMagazineWeapon* Weapon);
	void OnWeaponFire__DelegateSignature(class ABaseMagazineWeapon* Weapon, bool bServer);
	void OnReloadAnimEvent(enum class EReloadAnimEvent Type);
	void OnNewFireModeAnimEvent(enum class EFireMode NewFireMode);
	void OnFire(const struct FRotator& Direction, const struct FVector& SpawnLoc);
	void Multicast_SpawnShell(bool bOnlyLocallyControlled, bool bSkipLocallyControlled);
	void Multicast_SpawnParticleEffects(bool bSkipAuthority, bool bSkipLocalOwner);
	void Multicast_SimulateFireForViewTargets(const struct FVector_NetQuantize100& DirectionNet, const struct FVector_NetQuantize100& SpawnLoc, int32 Seed);
	void Multicast_PerformHitscan(struct FHitscanShot& HitscanShot, bool bLocalOnly, int32 Seed);
	void Multicast_OnFire(const struct FVector_NetQuantize100& DirectionNet, const struct FVector_NetQuantize100& SpawnLoc, int32 Seed);
	void Multicast_HandleSupression();
	bool IsPistolWithShield();
	bool InSingleMode();
	bool InSafeMode();
	bool InFullAutoMode();
	bool InBurstMode();
	bool HasAnyAmmoOfType(class FName AmmoType);
	bool HasAnyAmmo();
	bool HasAmmo();
	void GivenAmmoFromAmmoBag();
	float GetNextAmmo();
	class FText GetMagazineScreenName(struct FMagazine& Magazine);
	int32 GetMagazineCount();
	float GetMagazineAmmoPercentage(int32 MagazineIndex);
	struct FMagazine GetCurrentMagazine();
	float GetCurrentAmmoPercentage();
	float GetAmmoWeight(int32 Count);
	float GetAmmoInMagazine(int32 Index);
	float GetAmmo();
	void FindNextMagIndex();
	void Client_HitscanDebug(bool bSuccess, const struct FVector& Center, const struct FVector& Extent, const struct FVector& ImpactPoint);
	bool AllMagsEmpty();
};

// 0x20 (0x9F0 - 0x9D0)
// Class ReadyOrNot.BaseMagPouch
class ABaseMagPouch : public ABaseItem
{
public:
	class USkeletalMeshComponent*                MagazineMesh;                                      // 0x9D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationAsset*                       OpenPouchAnim;                                     // 0x9D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationAsset*                       ClosedPouchAnim;                                   // 0x9E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  MagSocket;                                         // 0x9E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ABaseMagPouch* GetDefaultObj();

	void ShowMagazine();
	void OpenPouch();
	void HideMagazine();
	void ClosePouch();
};

// 0x30 (0x58 - 0x28)
// Class ReadyOrNot.ReadyOrNotGameplayEffect
class UReadyOrNotGameplayEffect : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnGameplayEffectExpired;                           // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                Actor;                                             // 0x38(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                World;                                             // 0x40(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1B26[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotGameplayEffect* GetDefaultObj();

	void Server_ResetEffect(bool bMulticast);
	void Server_Initialize(class AActor* InActor, bool bMulticast);
	void Server_ApplyEffectFor(float Seconds, bool bMulticast);
	void Server_ApplyEffect(bool bMulticast);
	void ResetEffect();
	void OnEffectExpired();
	void Multicast_ResetEffect();
	void Multicast_Initialize(class AActor* InActor);
	void Multicast_ApplyEffectFor(float Seconds);
	void Multicast_ApplyEffect();
	void Initialize(class AActor* InActor);
	void ApplyEffectFor(float Seconds);
	void ApplyEffect();
};

// 0x8 (0x60 - 0x58)
// Class ReadyOrNot.BasePlayerEffect
class UBasePlayerEffect : public UReadyOrNotGameplayEffect
{
public:
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x58(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UBasePlayerEffect* GetDefaultObj();

};

// 0x248 (0x270 - 0x28)
// Class ReadyOrNot.BaseProfile
class UBaseProfile : public USaveGame
{
public:
	int32                                        BaseVersion;                                       // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B28[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSavedLoadout>                 Loadouts;                                          // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponAttachmentData> AttachmentSaveMap;                                 // 0x40(0x50)(NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseWeapon>, struct FStoredWeaponAttachments> LoadoutAttachmentSaveMap;                          // 0x90(0x50)(NativeAccessSpecifierPublic)
	TMap<enum class EItemType, TSubclassOf<class ABaseItem>> SavedWeaponClassOfTypeMap;                         // 0xE0(0x50)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseWeapon>, enum class EFireMode> WeaponClassToDefaultFireModeMap;                   // 0x130(0x50)(NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponPreset> WeaponToWeaponPresetsMap;                          // 0x180(0x50)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FSavedLoadout>    LoadoutPresetMap;                                  // 0x1D0(0x50)(NativeAccessSpecifierPublic)
	TMap<enum class EEquippingSwat, struct FSavedCustomization> Customizations;                                    // 0x220(0x50)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBaseProfile* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class ReadyOrNot.BaseRadialMenuScript
class UBaseRadialMenuScript : public UObject
{
public:
	TSoftObjectPtr<class UTexture2D>             RadialMenuIcon;                                    // 0x28(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URadialWidgetBase*                     RadialMenuOwner;                                   // 0x50(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                Actor;                                             // 0x58(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                World;                                             // 0x60(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UBaseRadialMenuScript* GetDefaultObj();

	void Initialize(class URadialWidgetBase* InRadialMenuOwner);
	void ExecuteScript();
};

// 0x38 (0x2A0 - 0x268)
// Class ReadyOrNot.BaseShell
class ABaseShell : public APooledActor
{
public:
	class UStaticMeshComponent*                  ShellMesh;                                         // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      MID_ShellMesh;                                     // 0x270(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EShellType                        ShellType;                                         // 0x280(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B2E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            ShellBounceFMODAudio;                              // 0x288(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShellNormalizeMax;                                 // 0x290(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShellNormalizeMin;                                 // 0x294(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B2F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseShell* GetDefaultObj();

	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.BaseTriggerable
class ABaseTriggerable : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bActivate;                                         // 0x228(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B30[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ActivateDelay;                                     // 0x22C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeactivateDelay;                                   // 0x230(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsActive;                                         // 0x234(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B31[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseTriggerable* GetDefaultObj();

	void Stop();
	void Deactivate();
	void Activate();
};

// 0x18 (0x278 - 0x260)
// Class ReadyOrNot.BaseWidget
class UBaseWidget : public UUserWidget
{
public:
	struct FVector2D                             MouseAxisDeltaThreshold;                           // 0x260(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             GamepadAxisDeltaThreshold;                         // 0x268(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotGameState*                  RONGS;                                             // 0x270(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UBaseWidget* GetDefaultObj();

	bool UpdateDebugInfo();
	void ToggleWidgetVisibility(bool bNotHitTestable);
	void StopWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation);
	void ShowWidget(bool bNotHitTestable);
	void PlayWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation, bool bRestartIfAlreadyPlaying);
	void PlaySoundEffect(class UFMODEvent* SoundEffectToPlay);
	void PauseWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation);
	bool IsMouseAxisBeyondThreshold(struct FVector2D& InMouseDelta);
	bool IsGamepadAxisBeyondThreshold(struct FVector2D& InGamepadAxis);
	bool IsBlockingAnimationPlaying();
	void HideWidget();
	bool HasMouseMoved();
	struct FVector2D GetMousePosition();
	struct FVector2D GetMouseDelta();
	struct FVector2D GetCenterScreenPosition();
};

// 0x5E0 (0x620 - 0x40)
// Class ReadyOrNot.StunDamage
class UStunDamage : public UDamageType
{
public:
	bool                                         bProjectileStun;                                   // 0x40(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B4B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       StunShake;                                         // 0x48(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x50(0x560)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAnimMontage*                          HitMontage_3P;                                     // 0x5B0(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              CameraRotationOffset;                              // 0x5B8(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        AppliedSpeed;                                      // 0x5C4(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxMovementSpeedWhenStunned;                       // 0x5C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DoorDamageMultiplier;                              // 0x5CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDamageAllDoorPiecesAtOnce;                        // 0x5D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanPushDoorWithForce;                             // 0x5D1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B4D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DoorPushScale;                                     // 0x5D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             ImpactSound;                                       // 0x5D8(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStunType                         StunType;                                          // 0x5E0(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayAudioWhenHit;                                 // 0x5E1(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B51[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            StunSoundEffect;                                   // 0x5E8(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCauseHealthDamage;                                // 0x5F0(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCausesSuppression;                                // 0x5F1(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBreaksDestructibles;                              // 0x5F2(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B52[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SuppressionAmount;                                 // 0x5F4(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       SuppressionCameraShake;                            // 0x5F8(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMustBeLookingAtDamageCauser;                      // 0x600(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStunLocksAim;                                     // 0x601(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B53[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StunSpeedMultiplier;                               // 0x604(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WeaponDownLengthOnStun;                            // 0x608(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNonLethal;                                        // 0x60C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B54[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LessThanLethalAmount;                              // 0x610(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdditionalUpcloseDamageIncrease;                   // 0x614(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdditionalHeadDamageIncrease;                      // 0x618(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSwatAIIsAbuse;                                    // 0x61C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bChildAIIsAbuse;                                   // 0x61D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCompliantIsAbuse;                                 // 0x61E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrestedIsAbuse;                                  // 0x61F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStunDamage* GetDefaultObj();

	void ScriptedStunEvent(class AReadyOrNotCharacter* Victim, float* Damage, struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.BeanbagDamageType
class UBeanbagDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UBeanbagDamageType* GetDefaultObj();

};

// 0x20 (0xD0 - 0xB0)
// Class ReadyOrNot.BleedComponent
class UBleedComponent : public UActorComponent
{
public:
	class UFMODEvent*                            BleedEvent;                                        // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBleeding;                                       // 0xB8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B5B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bTempStopBleeding;                                 // 0xC0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B5C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HealCount;                                         // 0xC4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B5D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBleedComponent* GetDefaultObj();

	void StopBleeding();
	void StartBleeding();
	bool IsBleeding();
	float GetHealCount();
	float GetBleedTime();
	void DoHeal();
	bool CanHeal();
};

// 0x0 (0x40 - 0x40)
// Class ReadyOrNot.BleedDamageType
class UBleedDamageType : public UDamageType
{
public:

	static class UClass* StaticClass();
	static class UBleedDamageType* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class ReadyOrNot.BlendRagdollAnimNotifyState
class UBlendRagdollAnimNotifyState : public UAnimNotifyState
{
public:
	float                                        TotalBlendDuration;                                // 0x30(0x4)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentBlendAmount;                                // 0x34(0x4)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PelvisWakeUpTime;                                  // 0x38(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B62[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUsePhysicalAnimComp;                              // 0x3D(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B63[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPhysicalAnimationData                PhysicalAnimData;                                  // 0x40(0x24)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B64[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlendRagdollAnimNotifyState* GetDefaultObj();

};

// 0x240 (0x270 - 0x30)
// Class ReadyOrNot.BloodData
class UBloodData : public UDataAsset
{
public:
	uint8                                        Pad_1B65[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            Splatters;                                         // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        SplatterMaxTraceDistance;                          // 0x48(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             SplatterSizeRange;                                 // 0x4C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B66[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            AnimatedSplatters;                                 // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AAnimatedDecal>            AnimatedDecalClass;                                // 0x68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          AnimatedSplatterBones;                             // 0x70(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        AnimatedSplatterMaxDistance;                       // 0x80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             AnimatedSplatterSizeRange;                         // 0x84(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimatedBloodTimescale;                            // 0x8C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    AnimatedBloodCurve;                                // 0x90(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            HeadshotSplatters;                                 // 0x118(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                           HeadshotDecalMesh;                                 // 0x128(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          HeadshotSplatterBones;                             // 0x130(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        HeadshotMaxSplatterDistance;                       // 0x140(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             HeadshotSplatterSizeRange;                         // 0x144(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B6C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystem*>               HitEntryParticles;                                 // 0x150(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                       SkinnedDecalImageCount;                            // 0x160(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             SkinnedDecalSizeRange;                             // 0x164(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B6F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FArteryData>                   Arteries;                                          // 0x170(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>               ArteryParticles;                                   // 0x180(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            ArteryParticleCollisionDecals;                     // 0x190(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ArteryParticleCollisionChance;                     // 0x1A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             ArteryParticleCollisionSizeRange;                  // 0x1A4(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B71[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystem*>               DismembermentParticles;                            // 0x1B0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            DismembermentParticleCollisionDecals;              // 0x1C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        DismembermentParticleCollisionChance;              // 0x1D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             DismembermentParticleCollisionSizeRange;           // 0x1D4(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B73[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGibData                              GibData;                                           // 0x1E0(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ABloodPool>                BloodPoolClass;                                    // 0x210(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BloodPoolSpawnDelay;                               // 0x218(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BloodPoolSpawnBone;                                // 0x21C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B75[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInstance*>             BigSplatterDecals;                                 // 0x228(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AExplosionGibs>            Gibs;                                              // 0x238(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BigSplatterTraceDistance;                          // 0x240(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BigSplatterDecalSize;                              // 0x244(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HitEvent;                                          // 0x250(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DeadHitEvent;                                      // 0x258(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            GoreEvent;                                         // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HeadshotEvent;                                     // 0x268(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBloodData* GetDefaultObj();

};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.BloodPool
class ABloodPool : public AActor
{
public:
	class UDecalComponent*                       Decal;                                             // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ABloodPool* GetDefaultObj();

};

// 0x70 (0x290 - 0x220)
// Class ReadyOrNot.BombActor
class ABombActor : public AActor
{
public:
	uint8                                        Pad_1B81[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnBombDefused;                                     // 0x230(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                InteractableComponent;                             // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ExplosionParticleComponent;                        // 0x250(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MultitoolUseTime;                                  // 0x258(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionRadius;                                   // 0x25C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBombState                        BombState;                                         // 0x260(0x1)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B84[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeUntilExplodes;                                 // 0x264(0x4)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPVPBombOnly;                                      // 0x268(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B86[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BombTickEvent;                                     // 0x270(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BombExplodeEvent;                                  // 0x278(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B87[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundSource*                          BombSoundSource;                                   // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ABombActor* GetDefaultObj();

	void OnBombDefusedSignature__DelegateSignature(class ABombActor* DefusedBomb);
	void Multicast_PlayBombExplodeSFX();
	float GetTimeUntilExplodes();
	enum class EBombState GetBombState();
	void Explode();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.TestInputBlueprintFunctionLibrary
class UTestInputBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UTestInputBlueprintFunctionLibrary* GetDefaultObj();

	void RonApplyInputAxis(class UObject* Context, class FName& AxisName, float AxisValue);
	void RonApplyInputAction(class UObject* Context, class FName& ActionName, enum class EInputEvent InputEventType);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.BpGameplayHelperLib
class UBpGameplayHelperLib : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBpGameplayHelperLib* GetDefaultObj();

	void UpdateInteractableComponentsWorldSpaceActionPrompts(class UObject* WorldContextObject, bool bEnableWorldSpaceActionPrompts);
	void UnloadCustomizationLevels(class UWorld* WorldContext);
	void ToggleGrenadeDrawDebug();
	void ToggleFriendlyNameplates();
	void ShowLoadoutOnMeshes(const struct FSavedLoadout& Loadout, class USkeletalMeshComponent* BodyMesh, class USkeletalMeshComponent* HeadMesh, class USkeletalMeshComponent* ArmorMesh, class USkeletalMeshComponent* ItemMesh, class UStaticMeshComponent* ItemMagMesh);
	void SetVoiceType(enum class EVoiceType InVoiceType);
	bool SetUseMeshpainting(bool bUseMeshPainting);
	bool SetShowFPS(bool bShowFPS);
	bool SetShowControls(bool bShowControls);
	bool SetShellLifetime(float ShellLifeTime);
	bool SetSendMapStatistics(bool bSendMapStatistics);
	bool SetPublicLobbyCooldown(int32 Seconds);
	bool SetMouseSensitivity(float MouseSensitivity);
	bool SetMouseInverted(bool bInvertVertical, bool bInvertHorizontal);
	bool SetMicInputGain(float MicInputGain);
	bool SetLastConnectedServerIP(const class FString& IP);
	bool SetGamepadLookSensitivity(float GamepadLookSensitivity);
	bool SetGamepadInverted(bool bInvertVertical, bool bInvertHorizontal);
	bool SetGamepadAimSensitivity(float GamepadAimSensitivity);
	bool SetFreelookSensitivity(float Sensitivity);
	bool SetFoV(float FOV);
	bool SetFlashlightShadows(bool bFlashLightShadows);
	bool SetBounceLightEnabled(bool bBounceLightEnabled);
	bool SaveZoomADSSetting(bool bZoomADS);
	bool SaveWorldSpaceActionPrompts(bool bWorldSpaceActionPrompts);
	bool SaveVOIPVolume(float Volume);
	bool SaveUIVolume(float Volume);
	bool SaveTogglePS5Gyro(bool TogglePS5Gyro);
	bool SaveToggleADS(bool ToggleADS);
	bool SaveTeamViewSetting(bool bEnabled, int32 TeamViewFPS);
	bool SaveSwayHUD(bool bSwayHUD);
	bool SaveSubtitlesSpeed(float SubtitlesSpeed);
	bool SaveSubtitlesSize(enum class ESubtitlesSize SubtitlesSize);
	bool SaveSubtitlesLocale(const class FString& SubtitlesLocale);
	bool SaveSubtitlesEnabled(bool bEnableSubtitles);
	bool SaveSubtitlesBackgroundOpacity(float SubtitlesBackgroundOpacity);
	bool SaveShowWeaponHUD(bool ShowWeaponHUD);
	bool SaveShowTeamStatus(bool bShowTeamStatus);
	bool SaveShowPlayerIconSetting(bool bShowPlayerIcon);
	bool SaveShowMultiplayerNames(bool bShowMultiplayerNames);
	bool SaveShowMagazineHUD(bool bShowMagazineHUD);
	bool SaveShowHUDSetting(bool bShowHUD);
	bool SaveShowHUD(bool bShowHUD);
	bool SaveShowHesitationBarSetting(bool bShowHesitationBar);
	bool SaveShowHealthIconSetting(bool bShowHealthIcons);
	bool SaveShowCompass(bool bShowCompass);
	bool SaveShowCommandContextHintSetting(bool bShowCommandContextHint);
	bool SaveShowChat(bool bShowChat);
	bool SaveShowButtonPrompts(bool bShowButtonPrompts);
	bool SaveShotgunSettings(enum class EShotgunReloadType ShotgunReloadType);
	bool SaveSFXVolume(float Volume);
	bool SaveSettings();
	bool SaveServersideChecksum(bool bServerSideChecksumEnabled);
	bool SaveSelectedAudioDevice(const class FString& InAudioDevice);
	bool SaveScoreReadoutSetting(enum class EScoreReadoutMode InScoreReadoutMode);
	bool SaveSafeZoneSettings(float SafeZoneX, float SafeZoneY);
	bool SaveQuickThrowScale(float QuickThrowScale);
	bool SavePiPResolutionScale(float ResolutionScale);
	bool SavePiPFPS(bool bEnabled, float FPS);
	bool SaveOptiwandViewMode(enum class EOptiwandViewMode OptiwandViewMode);
	bool SaveNVGStyle(enum class ENVGStyle NewNVGStyle);
	bool SaveMusicVolume(float Volume);
	bool SaveMirrorResolutionScale(float ResolutionScale);
	bool SaveMirrorReflectionEnabled(bool bEnabled);
	bool SaveMirrorEnabledOnlyInLobby(bool bEnabled);
	bool SaveMirrorDynamicShadowsEnabled(bool bShowDynamicShadows);
	bool SaveMirrorDecalsEnabled(bool bShowDecals);
	bool SaveMirrorAntiAliasEnabled(bool bShowAntiAlias);
	bool SaveMaxShellsInWorld(int32 NewMaxShells);
	bool SaveMasterVolume(float Volume);
	bool SaveLowReadyStyle(bool bUseHighReady);
	bool SaveLoadout(const struct FSavedLoadout& Loadout, const class FString& LoadoutName);
	void SaveLicenseSave(class ULicenseSave* LevelStats);
	bool SaveKeybinds();
	bool SaveItemSelectionStyleSettings(enum class EItemSelectionInterfaceType ItemSelectionInterface);
	bool SaveIconScale(float IconScale);
	bool SaveHUDSettings(bool bShowHUD, bool bCurvedHUD, bool bShowCompass, bool ShowWeaponHUD, bool bShowMagazineHUD, bool bShowChat, bool bSwayHUD, bool b2DReload, float IconScale, float QuickThrowScale, int32 FireModeDisplayOption, bool bShowMultiplayerNames, bool bShowButtonPrompts);
	bool SaveHotkeyHintSetting(bool bShowHotkeyHint);
	bool SaveHoldCrouch(bool HoldCrouch);
	bool SaveHitmarkerSfxEnabled(bool bHitmarkerSfxEnabled);
	bool SaveHighlightWeapons(bool bHighlightWeapons);
	bool SaveGrenadeSettings(enum class EGrenadeThrowSettingType GrenadeThrowType);
	bool SaveFireModeDisplayOption(int32 FireModeDisplayOption);
	bool SaveEmptyMagReloadSettings(enum class EEmptyMagReloadType EmptyMagReloadType);
	bool SaveDefaultSurfaceCommand(enum class ESwatCommand DefaultCommand, int32 DefaultCommandIndex);
	bool SaveDefaultDoorUnlockedCommand(enum class ESwatCommand DefaultDoorUnlockedCommand, int32 DefaultDoorUnlockedCommandIndex);
	bool SaveDefaultDoorUnknownCommand(enum class ESwatCommand DefaultDoorUnknownCommand, int32 DefaultDoorUnknownCommandIndex);
	bool SaveDefaultDoorOpenCommand(enum class ESwatCommand DefaultDoorOpenCommand, int32 DefaultDoorOpenCommandIndex);
	bool SaveDefaultDoorLockedCommand(enum class ESwatCommand DefaultDoorLockedCommand, int32 DefaultDoorLockedCommandIndex);
	bool SaveDefaultCommandAsOption(int32 DefaultCommandOption, int32 DefaultDoorUnknownCommandOption, int32 DefaultDoorOpenCommandOption, int32 DefaultDoorLockedCommandOption, int32 DefaultDoorUnlockedCommandOption);
	bool SaveDefaultCommand(enum class ESwatCommand DefaultCommand, enum class ESwatCommand DefaultDoorUnknownCommand, enum class ESwatCommand DefaultDoorOpenCommand, enum class ESwatCommand DefaultDoorLockedCommand, enum class ESwatCommand DefaultDoorUnlockedCommand);
	bool SaveCurvedHUD(bool bCurvedHUD);
	bool SaveControlScheme(bool UsingAlternateControls);
	bool SaveColorblindStrength(float ColorblindStrength);
	bool SaveColorblindMode(enum class EColorVisionDeficiency ColorVisionDeficiency);
	bool Save2DReload(bool b2DReload);
	void RemoveWidgetFromViewport(const class FString& WidgetName);
	bool ReloadSettings();
	void PlayInterfaceSound(class UWorld* WorldContext, enum class EInterfaceSoundType SoundClass);
	bool LoadZoomADSSetting(bool* bZoomADS);
	bool LoadWorldSpaceActionPrompts(bool* bWorldSpaceActionPrompts);
	bool LoadTogglePS5Gyro(bool* TogglePS5Gyro);
	bool LoadToggleADS(bool* ToggleADS);
	bool LoadTeamViewFPSSetting(bool* bEnabled, int32* TeamViewFPS);
	bool LoadSwayHUD(bool* bSwayHUD);
	bool LoadSubtitlesSpeed(float* SubtitlesSpeed);
	bool LoadSubtitlesSize(enum class ESubtitlesSize* SubtitlesSize);
	bool LoadSubtitlesLocale(class FString* SubtitlesLocale);
	bool LoadSubtitlesEnabled(bool* bEnableSubtitles);
	bool LoadSubtitlesBackgroundOpacity(float* SubtitlesBackgroundOpacity);
	bool LoadShowWeaponHUD(bool* ShowWeaponHUD);
	bool LoadShowTeamStatus(bool* bShowTeamStatus);
	bool LoadShowPlayerNamesSetting(bool* bShowPlayerNames);
	bool LoadShowPlayerIconSetting(bool* bShowPlayerIcon);
	bool LoadShowMultiplayerNames(bool* bShowMultiplayerNames);
	bool LoadShowMagazineHUD(bool* bShowMagazineHUD);
	bool LoadShowHUDSetting(bool* bShowHUD);
	bool LoadShowHUD(bool* bShowHUD);
	bool LoadShowHesitationBarSetting(bool* bShowHesitationBar);
	bool LoadShowHealthIconSetting(bool* bShowHealthIcons);
	bool LoadShowCompass(bool* bShowCompass);
	bool LoadShowCommandContextHintSetting(bool* bShowCommandContextHint);
	bool LoadShowChat(bool* bShowChat);
	bool LoadShowButtonPrompts(bool* bShowButtonPrompts);
	bool LoadShotgunSettings(enum class EShotgunReloadType* ShotgunReloadType);
	bool LoadServersideChecksum(bool* bServerSideChecksumEnabled);
	bool LoadSelectedAudioDevice(class FString* OutAudioDevice);
	bool LoadScoreReadoutSetting(enum class EScoreReadoutMode* OutScoreReadoutMode);
	bool LoadSafeZoneSettings(float* SafeZoneX, float* SafeZoneY);
	bool LoadQuickThrowScale(float* QuickThrowScale);
	bool LoadPiPResolutionScale(float* ResolutionScale);
	bool LoadPiPFPS(bool* bEnabled, float* FPS);
	bool LoadOptiwandViewMode(enum class EOptiwandViewMode* OptiwandViewMode);
	bool LoadNVGStyle(enum class ENVGStyle* NVGStyle);
	bool LoadMirrorResolutionScale(float* ResolutionScale);
	bool LoadMirrorReflectionEnabled(bool* bEnabled);
	bool LoadMirrorEnabledOnlyInLobby(bool* bEnabled);
	bool LoadMirrorDynamicShadowsEnabled(bool* bShowDynamicShadows);
	bool LoadMirrorDecalsEnabled(bool* bShowDecals);
	bool LoadMirrorAntiAliasEnabled(bool* bShowAntiAlias);
	bool LoadMaxShellsInWorld(int32* MaxShells);
	bool LoadLowReadyStyle(bool* bUseHighReady);
	bool LoadLoadoutAndEquipPlayer(struct FSavedLoadout* Loadout, class AReadyOrNotCharacter* EquipPlayer, const class FString& LoadoutName);
	bool LoadLoadout(struct FSavedLoadout* Loadout, const class FString& LoadoutName);
	class ULicenseSave* LoadLicenseSave();
	bool LoadItemSelectionStyleSettings(enum class EItemSelectionInterfaceType* ItemSelectionInterface);
	bool LoadIconScale(float* IconScale);
	bool LoadHUDSettings(bool* bShowHUD, bool* bCurvedHUD, bool* bShowCompass, bool* bShowWeaponHUD, bool* bShowMagazineHUD, bool* bShowChat, bool* bSwayHUD, bool* b2DReload, float* IconScale, float* QuickThrowScale, int32* FireModeDisplayOption, bool* bShowPlayerNames, bool* bShowButtonPrompts);
	bool LoadHotkeyHintSetting(bool* bShowHotkeyHint);
	bool LoadHoldCrouch(bool* HoldCrouch);
	bool LoadHighlightWeapons(bool* bHighlightWeapons);
	bool LoadGrenadeSettings(enum class EGrenadeThrowSettingType* GrenadeThrowType);
	bool LoadFireModeDisplayOption(int32* FireModeDisplayOption);
	bool LoadEmptyMagReloadSettings(enum class EEmptyMagReloadType* EmptyMagReloadType);
	bool LoadDefaultSurfaceCommand(enum class ESwatCommand* DefaultCommand, int32* DefaultCommandIndex);
	void LoadDefaultLoadout(struct FSavedLoadout* OutLoadout, const class FString& LoadoutName);
	bool LoadDefaultDoorUnlockedCommand(enum class ESwatCommand* DefaultDoorUnlockedCommand, int32* DefaultDoorUnlockedCommandIndex);
	bool LoadDefaultDoorUnknownCommand(enum class ESwatCommand* DefaultDoorUnknownCommand, int32* DefaultDoorUnknownCommandIndex);
	bool LoadDefaultDoorOpenCommand(enum class ESwatCommand* DefaultDoorOpenCommand, int32* DefaultDoorOpenCommandIndex);
	bool LoadDefaultDoorLockedCommand(enum class ESwatCommand* DefaultDoorLockedCommand, int32* DefaultDoorLockedCommandIndex);
	bool LoadDefaultCommandsAsOption(int32* DefaultCommandOption, int32* DefaultDoorUnknownCommandOption, int32* DefaultDoorOpenCommandOption, int32* DefaultDoorLockedCommandOption, int32* DefaultDoorUnlockedCommandOption);
	bool LoadDefaultCommands(enum class ESwatCommand* DefaultCommand, enum class ESwatCommand* DefaultDoorUnknownCommand, enum class ESwatCommand* DefaultDoorOpenCommand, enum class ESwatCommand* DefaultDoorLockedCommand, enum class ESwatCommand* DefaultDoorUnlockedCommand);
	void LoadCustomizationLevels(class UWorld* WorldContext);
	bool LoadCurvedHUD(bool* bCurvedHUD);
	bool LoadControlScheme(bool* UsingAlternateControls);
	bool LoadColorblindStrength(float* ColorblindStrength);
	bool LoadColorblindMode(enum class EColorVisionDeficiency* ColorVisionDeficiency);
	bool Load2DReload(bool* b2DReload);
	bool IsWidgetOfClassInViewport(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass);
	bool IsSupporterOnlyBuild();
	bool IsShowHUDEnabled();
	bool IsShippingBuild();
	bool IsRTXDMOBuild();
	bool IsPvPSupported(const struct FLevelDataLookupTable& LookupTable);
	bool IsPreMissionBriefingBeforeLoadout();
	bool IsObjectiveTarget(class AReadyOrNotCharacter* Target, class AReadyOrNotCharacter* LocalPlayer);
	bool IsMultiplayer(class UObject* WorldContextObject);
	bool IsLobby(class UObject* WorldContextObject);
	bool IsLeadPlayer(class UObject* WorldContextObject);
	bool IsIronmanMode(class UObject* WorldContextObject);
	bool IsInPublicLobbyCooldown(float* SecondsRemaining);
	bool IsFriendlyWithMe(class AReadyOrNotGameState* GameState, enum class ETeamType TeamType);
	bool IsFriendly(class AReadyOrNotGameState* GameState, enum class ETeamType TeamOne, enum class ETeamType TeamTwo);
	bool IsEnemy(enum class ETeamType TeamOne, enum class ETeamType TeamTwo);
	bool IsEditorBuild();
	bool IsDMOPVPOnly();
	bool IsDMOMatchMake();
	bool IsDMOBuild();
	bool IsDLCLocked(TSubclassOf<class ABaseItem> Item);
	bool IsCOOPSupported(const struct FLevelDataLookupTable& LookupTable);
	bool IsConsole(class UObject* WorldContextObject);
	bool IsCommanderMode(class UObject* WorldContextObject);
	bool HasWidgetInViewport(const class FString& WidgetName);
	bool HasLineOfSightLoc(class UWorld* WorldContext, const struct FVector& A, const struct FVector& B, const TArray<class AActor*>& IgnoredActors, enum class ECollisionChannel CollisionChannel);
	bool HasLineOfSightExt(class AActor* Observer, class AActor* B, struct FHitResult* HitResult);
	bool HasLineOfSight(class AActor* Observer, class AActor* B);
	class UWorld* GetWorldStatic();
	class UWorld* GetWorldBP(class APlayerController* PC);
	TArray<class UUserWidget*> GetWidgetsFromViewport(const class FString& WidgetName);
	struct FWidgetLookupData GetWidgetDataFromLookupData(const class FString& WidgetName, bool bWarnIfMissing);
	class UWidgetsData* GetWidgetData();
	bool GetVolumes(float* MasterVolume, float* UIVolume, float* SFXVolume, float* MusicVolume, float* VOIPVolume);
	bool GetVoiceType(enum class EVoiceType* OutVoiceType);
	bool GetUseMeshpainting(bool* bUseMeshPainting);
	class UDataTable* GetTrapLookupDataTable();
	class UDataTable* GetSuspectArmourDataTable();
	class UDataTable* GetSpeechLookupDataTable(const class FString& Speaker);
	bool GetShowFPS(bool* bShowFPS);
	bool GetShowControls(bool* bShowControls);
	bool GetShellLifetime(float* ShellLifeTime);
	bool GetSendMapStatistics(bool* bSendMapStatistics);
	class UReadyOrNotGameInstance* GetRONGameInstance();
	class UDataSingleton* GetRoNData();
	bool GetRandomLoadingScreenTip(class FText* Tip);
	int32 GetProjectVersionAsInt();
	class FString GetProjectVersion();
	class FString GetProjectName();
	class UPenetrationData* GetPenetrationData();
	class UDataTable* GetPairedInteractionDataTable();
	class UMusicData* GetMusicData(class UWorld* WorldContext);
	class UReadyOrNotMultiplayerProfile* GetMultiplayerProfile(const class FString& LoadSlotName);
	class UDataTable* GetMoveStyleDataTable();
	bool GetMouseSensitivity(float* MouseSensitvity);
	bool GetMouseInverted(bool* bInvertVertical, bool* bInvertHorizontal);
	bool GetMicInputGain(float* MicInputGain);
	class AMapStatisticsSystem* GetMapStatistics(class UWorld* WorldContext);
	struct FLevelDataLookupTable GetMapDetailsFromName(const class FString& MapName);
	class ULookupData* GetLookupData();
	class AReadyOrNotPlayerState* GetLocalPlayerState(class UWorld* World);
	bool GetLocalization(class FString* Target);
	class FString GetLoadURLFromData(const struct FLevelDataLookupTable& LookUp);
	bool GetLoadoutNames(TArray<class FString>* LoadoutNames);
	class UTexture2D* GetLoadingScreenLevelImage(const class FString& Level);
	class UReadyOrNotSaveGame* GetLoadGameInstance(const class FString& LoadSlotName);
	TArray<struct FLevelDataLookupTable> GetLevels();
	class UDataTable* GetLevelLookupDataTable();
	struct FLevelDataLookupTable GetLevelData(class UWorld* WorldContext);
	bool GetLastConnectedServerIP(class FString* IP);
	class UDataTable* GetItemLookupDataTable();
	class UItemData* GetItemData(class UWorld* WorldContext);
	class UDataTable* GetInputKeyGamepadIconLookupDataTable();
	class UHumanCharacterHUD_V2* GetHUDWidget();
	bool GetHitmarkerSfxEnabled(bool* bHitmarkerSfxEnabled);
	bool GetGamepadLookSensitivity(float* GamepadLookSensitivity);
	bool GetGamepadInverted(bool* bInvertVertical, bool* bInvertHorizontal);
	bool GetGamepadAimSensitivity(float* GamepadAimSensitivity);
	class UDataTable* GetGameModeSettingsLookupDataTable();
	class UReadyOrNotGameInstance* GetGameInstance(class UWorld* WorldContext);
	class FString GetFriendlyModeFromECoopMode(enum class ECOOPMode InCoopMode);
	void GetFriendlyMapAndModeFromName(const class FString& InUrl, class FString* OutInternalMapName, class FString* OutFriendlyMap, class FString* OutFriendlyMode);
	bool GetFreelookSensitivity(float* Sensitivity);
	bool GetFoV(float* FOV);
	bool GetFlashlightShadows(bool* bFlashLightShadows);
	class UUserWidget* GetFirstWidgetFromViewport(const class FString& WidgetName);
	class APlayerCharacter* GetFirstAlivePlayerControlledCharacter(class UWorld* WorldContext);
	class UDataTable* GetDoorLookupDataTable();
	enum class ETeamType GetDMOTeamType();
	class FString GetDMOGameMode();
	class FString GetDMOAddress();
	float GetDistanceBetweenActors2D(class AActor* Actor1, class AActor* Actor2);
	float GetDistanceBetweenActors(class AActor* Actor1, class AActor* Actor2);
	class UReadyOrNotProfile* GetCurrentProfile(class UWorld* WorldContext);
	enum class ECOOPMode GetCoopModeFromModeName(const class FString& InCoopName);
	class UDataTable* GetConversationLookupDataTable();
	class ASuspectCharacter* GetClosestActiveSuspect(struct FVector& Location, float Distance, bool bMustHaveTarget);
	class ACivilianCharacter* GetClosestActiveCivilian(struct FVector& Location, float Distance, bool bMustHaveTarget);
	class UDataTable* GetCharacterLookOverrideDataTable();
	class UCampaignData* GetCampaignData();
	class FString GetBuildTime();
	class FString GetBuildDate();
	bool GetBounceLightEnabled(bool* bBounceLightEnabled);
	int32 GetAttachmentPointsRemaining(const struct FSavedLoadout& Loadout);
	class UDataTable* GetAnimatedIconLookupDataTable();
	struct FAnimatedIcon GetAnimatedIconFromTable(class FName RowName, bool* bSuccess);
	class UDataTable* GetAmmoLookupDataTable();
	class UDataTable* GetAILookupDataTable();
	class FString GetAdditionalBugReportInformation(class APlayerController* PC);
	class APlayerCharacter* FindClosestDeadGuyInRadius(const struct FVector& Origin, class AActor* Causer, float Radius, bool bIncludeUnconscious);
	bool EquipLoadoutOnPlayer(const struct FSavedLoadout& Loadout, class AReadyOrNotCharacter* EquipPlayer, const struct FLoadoutEquipOptions& LoadoutEquipOptions);
	void EnableInteractionForController(class AActor* InInteractableActor, class APlayerController* InPlayerCharacter);
	void EnableInteractionFor(class AActor* InInteractableActor, class APlayerCharacter* InPlayerCharacter);
	void EnableInteractionCompForController(class UInteractableComponent* InteractableComponent, class APlayerController* InPlayerController);
	void DisableInteractionForController(class AActor* InInteractableActor, class APlayerController* InPlayerCharacter);
	void DisableInteractionFor(class AActor* InInteractableActor, class APlayerCharacter* InPlayerCharacter);
	void DisableInteractionCompForController(class UInteractableComponent* InteractableComponent, class APlayerController* InPlayerController);
	void DeleteLoadout(const class FString& LoadoutName);
	enum class EItemType ConvertWeaponTypeToItemType(enum class EWeaponType WeaponType);
	struct FVector2D ConvertSquareVectorToCircle(const struct FVector2D& SquareVector);
	enum class EWeaponType ConvertItemTypeToWeaponType(enum class EItemType ItemType);
	class FString ConvertFloatToStringMinutes_Detail(float Val);
	class FString ConvertFloatToStringMinutes(float Val);
	class FString ConvertDegreeIntoLetter(float Degrees);
	void ChangeLocalization(const class FString& Target);
	struct FRadialDamageEvent CastToRadialDamageEvent(const struct FDamageEvent& DamageEvent, enum class EStructureCastPathway* Branches);
	struct FPointDamageEvent CastToPointDamageEvent(const struct FDamageEvent& DamageEvent, enum class EStructureCastPathway* Branches);
	void AttachMagazinesToWeapon(TSubclassOf<class ABaseMagazineWeapon> WeaponClass, class ABaseMagazineWeapon* Weapon);
	void AddDefaultItemsToPlayer(class AReadyOrNotCharacter* Player);
};

// 0x68 (0x90 - 0x28)
// Class ReadyOrNot.ReadyOrNotSaveGame
class UReadyOrNotSaveGame : public USaveGame
{
public:
	class FString                                SaveSlotName;                                      // 0x28(0x10)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       UserIndex;                                         // 0x38(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2178[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class ETeamType, TSubclassOf<class USkinComponent>> SkinSaveMap;                                       // 0x40(0x50)(BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotSaveGame* GetDefaultObj();

	class UReadyOrNotSaveGame* CreateDefaultSavegame(const class FString& LoadSlotName);
};

// 0xB8 (0xE0 - 0x28)
// Class ReadyOrNot.ReadyOrNotSessionData
class UReadyOrNotSessionData : public USaveGame
{
public:
	class FString                                SaveSlotName;                                      // 0x28(0x10)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       UserIndex;                                         // 0x38(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2183[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, int32>                   SavedTeamKillData;                                 // 0x40(0x50)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>           BanReasonData;                                     // 0x90(0x50)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotSessionData* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class ReadyOrNot.ReadyOrNotModData
class UReadyOrNotModData : public USaveGame
{
public:
	class FString                                SaveSlotName;                                      // 0x28(0x10)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       UserIndex;                                         // 0x38(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2186[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int64>                                DisabledMods;                                      // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                ErroredMods;                                       // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotModData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.BpVideoSettingsLib
class UBpVideoSettingsLib : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBpVideoSettingsLib* GetDefaultObj();

	bool SupportsRayTracing();
	bool SetWorldDecalEnabled(bool bEnabled, float FadeDistance, float Density);
	bool SetVSyncEnabled(bool bEnabled);
	bool SetVideoQualitySettings(int32 AntiAliasing, int32 Effects, int32 PostProcess, float ResolutionScaling, int32 Shadow, int32 Texture, int32 ViewDistance);
	bool SetScreenResolution(int32 Width, int32 Height, enum class EWindowMode NewWindowMode);
	bool SetReflexLatencyOptions(bool bGameToRenderLatencyEnabled, bool bGameLatencyEnabled, bool bRenderLatencyEnabled);
	bool SetReflexEnabled(uint8 ReflexMode, bool bFlashIndicatorEnabled);
	bool SetRaytracingSettings(bool bRTXEnabled, bool bRTXReflectionsEnabled, bool bRTXShadowsEnabled, bool bRTXAmbientOcclusionEnabled, bool bRTXGlobalIllumination, bool bRTXTranslucency);
	bool SetOverallVideoQuality(int32 Quality);
	bool SetMotionBlurStrength(float Strength);
	bool SetMotionBlurEnabled(bool bEnabled);
	bool SetInterfaceAspectRatio(float InAspectRatio);
	bool SetGraphicsPresetIndex(int32 GraphicsPresetIndex);
	bool SetFSRQuality(int32 Quality);
	bool SetFrameRateLimit(int32 FrameRateLimit, bool bEnabled);
	bool SetDlssQuality(int32 Quality);
	bool SetDepthofFieldSetting(bool bDoFEnabled);
	bool SaveVideoModeAndQuality();
	bool IsNvidiaReflexEnabled();
	bool GetWorldDecalsEnabled(bool* bEnabled, float* FadeDistance, float* Density);
	bool GetVSyncEnabled(bool* bEnabled);
	bool GetViewDistanceQuality(int32* ViewDistance);
	bool GetVideoQualitySettingsAsString(class FText* OverallSetting, class FText* AntiAliasing, class FText* Effects, class FText* PostProcess, class FText* Shadow, class FText* Texture, class FText* ViewDistance);
	bool GetVideoQualitySettings(int32* AntiAliasing, int32* Effects, int32* PostProcess, float* ResolutionScaling, int32* Shadow, int32* Texture, int32* ViewDistance);
	bool GetTextureQuality(int32* Texture);
	bool GetSupportedScreenResolutions(TArray<class FString>* Resolutions);
	bool GetShadowQuality(int32* Shadow);
	bool GetResolutionScaling(float* ResolutionScaling);
	bool GetReflexLatencyOptions(bool* bGameToRenderLatencyEnabled, bool* bGameLatencyEnabled, bool* bRenderLatencyEnabled);
	void GetReflexLatency(bool* bGameToRenderLatencyEnabled, float* GametoRenderLatency, bool* bGameLatencyEnabled, float* GameLatencyInMS, bool* bRenderLatencyEnabled, float* RenderLatencyInMS);
	bool GetReflexEnabled(uint8* ReflexMode, bool* bFlashIndicatorEnabled);
	bool GetRaytracingSettings(bool* bRTXEnabled, bool* bRTXReflectionsEnabled, bool* bRTXShadowsEnabled, bool* bRTXAmbientOcclusionEnabled, bool* bRTXGlobalIllumination, bool* bRTXTranslucency);
	bool GetPostProcessQuality(int32* PostProcess);
	bool GetOverallVideoQuality(int32* Quality);
	bool GetMotionBlurStrength(float* Strength);
	bool GetMotionBlurEnabled(bool* bEnabled);
	bool GetInterfaceAspectRatio(float* OutAspectRatio);
	int32 GetGraphicsPresetIndex();
	bool GetFSRQuality(int32* Quality);
	bool GetFrameRateLimit(int32* FrameRateLimit, bool* bEnabled);
	bool GetEffectsQuality(int32* Effects);
	bool GetDlssQuality(int32* Quality);
	bool GetDepthOfFieldSetting(bool* bDoFEnabled);
	class FString GetCurrentScreenResolution();
	enum class EWindowMode GetCurrentScreenMode();
	bool GetAntiAliasingQuality(int32* AntiAliasing);
	class FText GenerateQualityString(int32 Quality);
	class FText GenerateFSRQualityString(int32 Quality);
	class FText GenerateDlssQualityString(int32 Quality);
	void ForceReloadSettings();
	bool ChangeScreenResolution(int32 Width, int32 Height, enum class EWindowMode NewWindowMode);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.BpWidgetLib
class UBpWidgetLib : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBpWidgetLib* GetDefaultObj();

	bool PostBugReport(const class FString& Summary, const class FString& Description, const class FString& Category);
	void PlayEventFromTablet(class UObject* WorldContextObject, class UFMODEvent* Event);
	bool IsWorldTearingDown(class UObject* WorldContextObject);
	class ATablet* GetPlayerTablet(class UObject* WorldContextObject);
	struct FVector2D GetNormalizedClick(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent);
	void DrawLineWithThickness(struct FPaintContext& Context, const struct FVector2D& PositionA, const struct FVector2D& PositionB, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness, const struct FVector2D& Offset);
	void DrawLineWithCenteredOffset(struct FPaintContext& Context, const struct FVector2D& PositionA, const struct FVector2D& PositionB, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness, const struct FVector2D& Offset, const struct FVector2D& Center, float Scale);
	void DrawLinesWithThickness(struct FPaintContext& Context, TArray<struct FVector2D>& Points, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness, const struct FVector2D& Offset);
	void DrawLinesWithCenteredOffset(struct FPaintContext& Context, TArray<struct FVector2D>& Points, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness, const struct FVector2D& Offset, const struct FVector2D& Center, float Scale);
	class FText ChangeStringTableTextKey(class FText Target, const class FString& NewKey);
};

// 0x70 (0x14A0 - 0x1430)
// Class ReadyOrNot.Shotgun
class AShotgun : public ABaseMagazineWeapon
{
public:
	uint8                                        bIsSawnOff : 1;                                    // Mask: 0x1, PropSize: 0x10x1430(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_152 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2290[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxShells;                                         // 0x1434(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                Shells;                                            // 0x1438(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<int32>                                OriginalShellCounts;                               // 0x1448(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        MaxShellsInWeapon;                                 // 0x1458(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ShellsPerSlot;                                     // 0x145C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShellWeight;                                       // 0x1460(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2291[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           CurrentShellMesh;                                  // 0x1468(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTapReload;                                        // 0x1470(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2292[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FShotgunVisuals                       ShotgunVisuals;                                    // 0x1478(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                         bBlockingFireAnimation;                            // 0x1488(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2293[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ShellsInRack;                                      // 0x148C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UShellRackShellComponent*>      ShellMeshComponents;                               // 0x1490(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AShotgun* GetDefaultObj();

	void RefreshEntireShellRack();
	void PlayReloadLoop();
	void OnRep_ShellsReplicated();
	void LoadNextShellInRack();
	void FinishedLoadingShellFromRack();
	void CheckReloadSettings();
};

// 0x0 (0x14A0 - 0x14A0)
// Class ReadyOrNot.BreachingShotgun
class ABreachingShotgun : public AShotgun
{
public:

	static class UClass* StaticClass();
	static class ABreachingShotgun* GetDefaultObj();

};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.BreakableGlass
class ABreakableGlass : public AActor
{
public:
	bool                                         bCanSoundPass;                                     // 0x220(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2298[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABreakableGlass* GetDefaultObj();

	void Multicast_DestructibleHit(const struct FVector_NetQuantize& Location);
	void Multicast_ConvertHitAndExecute(int32 FirstPositionBox, int32 TextureX, int32 TextureY, const struct FVector_NetQuantize& HitPosition, const struct FVector_NetQuantize& Direction, float Damage);
	void FirstHitPositionObject(int32 FirstPositionBox, int32 TextureY, int32 TextureX, const struct FVector& HitPosition, const struct FVector& ObjectiveDirection, float DamageRadius, bool bFirstHitCanBreakIt, float CharacterVelocityToBreak);
	void DestructibleHit(const struct FVector& Location);
	void ConvertHitAndExecute(const struct FHitResult& Hit, float Damage);
};

// 0x58 (0x2D0 - 0x278)
// Class ReadyOrNot.BriefingWidget
class UBriefingWidget : public UBaseWidget
{
public:
	uint8                                        Pad_22B1[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBriefingWidget* GetDefaultObj();

	void PlayMissionAudio(const class FString& AudioName);
	void MoveCameraToMouseCursor(const struct FPointerEvent& PointerEvent);
	void GetWhiteboardTimelineAsString(class FString* OutString);
	void GetWhiteboardObjectiveText(class FString* OutString);
	void GetLevelNickname(class FString* OutNickname);
	void GetBriefing(struct FMissionAudio* OutBriefing);
	void GetBios(enum class EBioType BioType, TArray<struct FCharacterBio>* OutBios);
	void GetBioDetails(const struct FCharacterBio& Bio, TArray<struct FCriminalRecord>* RapSheet, class UTexture2D** ProfileImage, class FString* OutDescription, class FString* OutBioText);
	void DoesLevelHaveMissionAudio(const class FString& AudioName, bool* bHasMissionAudio);
};

// 0x0 (0x2A8 - 0x2A8)
// Class ReadyOrNot.BringOrderToChaos
class ABringOrderToChaos : public AObjective
{
public:

	static class UClass* StaticClass();
	static class ABringOrderToChaos* GetDefaultObj();

};

// 0x98 (0x2C0 - 0x228)
// Class ReadyOrNot.BuildingTrigger
class ABuildingTrigger : public ATriggerBox
{
public:
	int32                                        NumberOfFloors;                                    // 0x228(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAuto : 1;                                         // Mask: 0x1, PropSize: 0x10x22C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUniformFloorSpacing : 1;                          // Mask: 0x2, PropSize: 0x10x22C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_155 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22C2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpacingBetweenFloors;                              // 0x230(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22C4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                SpacingPerFloor;                                   // 0x238(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                  BuildingName;                                      // 0x248(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<int32, class FString>                   FloorNumberToFloorName;                            // 0x260(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuildingFloor>                GeneratedFloors;                                   // 0x2B0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ABuildingTrigger* GetDefaultObj();

	void OnBuildingExit(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnBuildingEnter(class AActor* OverlappedActor, class AActor* OtherActor);
	bool IsActorOnFloor(class AActor* Actor, int32 FloorNumber);
	int32 GetFloorNumberFromActorLocation(class AActor* Actor);
	struct FVector GetFloorLocation(int32 FloorNumber);
	void GenerateFloors();
};

// 0x10 (0x2D0 - 0x2C0)
// Class ReadyOrNot.BuildingTrigger_Incrimination
class ABuildingTrigger_Incrimination : public ABuildingTrigger
{
public:
	TArray<class AIncriminationClueSpawnPoint*>  ClueSpawnPoints;                                   // 0x2C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ABuildingTrigger_Incrimination* GetDefaultObj();

};

// 0x30 (0x70 - 0x40)
// Class ReadyOrNot.BulletDamageType
class UBulletDamageType : public UDamageType
{
public:
	TSubclassOf<class UUserWidget>               HitVisuals;                                        // 0x40(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       HitShake;                                          // 0x48(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArmorPiercing;                                    // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNonLethal;                                        // 0x51(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22CB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AggressionChangeInAI;                              // 0x54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeadDamageMultiplier;                              // 0x58(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpperBodyDamageMultiplier;                         // 0x5C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowerBodyDamageMultiplier;                         // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArmDamageMultiplier;                               // 0x64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LegDamageMultiplier;                               // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootDamageMultiplier;                              // 0x6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBulletDamageType* GetDefaultObj();

};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.Projectile
class AProjectile : public AActor
{
public:
	class UBulletProjectileMovementComponent*    MovementComp;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      CollisionComp;                                     // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22D1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            ProjectileHitSound;                                // 0x240(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22D2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AImpactEffect>             ImpactEffectsClass;                                // 0x250(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AProjectile* GetDefaultObj();

	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Multicast_SpawnImpactEffects(const struct FHitResult& Hit, TSubclassOf<class AImpactEffect> EffectsClass, float DecalScale, bool bExitImpact, bool bArmorImpact);
};

// 0x20 (0x278 - 0x258)
// Class ReadyOrNot.DamageProjectile
class ADamageProjectile : public AProjectile
{
public:
	uint8                                        Pad_22D3[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Damage;                                            // 0x264(0x4)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x268(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HitMarker;                                         // 0x270(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ADamageProjectile* GetDefaultObj();

};

// 0xF0 (0x368 - 0x278)
// Class ReadyOrNot.BulletProjectile
class ABulletProjectile : public ADamageProjectile
{
public:
	class UStaticMeshComponent*                  BulletMesh;                                        // 0x278(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_22D8[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseItem*                             FiredFromWeapon;                                   // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      FiredFromPlayer;                                   // 0x2A0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitAngleMultiplier;                                // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RequiredAngleToDeflect;                            // 0x2AC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentageToDeflect;                               // 0x2B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeflectionAmount;                                  // 0x2B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22D9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpeedLossMultiplierPerSurface;                     // 0x2C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageLossMultiplierPerSurface;                    // 0x2C4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityRequiredToRespawn;                         // 0x2C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawBlood;                                        // 0x2CC(0x1)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DA[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BulletProjectileScale;                             // 0x2DC(0xC)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecalScale;                                        // 0x2E8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAffectedByGravity;                                // 0x2EC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             BulletWizzSound;                                   // 0x2F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinimumDistanceForWizz;                            // 0x2F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RequiredSpeedForWizz;                              // 0x2FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DebugLineSize;                                     // 0x300(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AImpactEffect>             ExitEffects;                                       // 0x308(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AImpactEffect>             RicochetEffects;                                   // 0x310(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       RichochetParticle;                                 // 0x318(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArmorPiercing;                                     // 0x320(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDestroyOnHit;                                     // 0x324(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAttachOnHit;                                      // 0x325(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DD[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InitialSpeed;                                      // 0x328(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               InitialLocation;                                   // 0x32C(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                OwningActor;                                       // 0x338(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockIntegrityDamage;                               // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UDamageType>               InitialDamageType;                                 // 0x348(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LifeSpan;                                          // 0x350(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Drag;                                              // 0x354(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Wobble;                                            // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialWobbleDelay;                                // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PhysicsImpulseMultiplier;                          // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22DF[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanPenetrate;                                     // 0x365(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bServerValidated;                                  // 0x366(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22E0[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABulletProjectile* GetDefaultObj();

	void OnRespawnProjectile(const struct FVector& RespawnLocation, const struct FRotator& RespawnRotation, float NewSpeed, float NewDamage, enum class EProjectileReaction ProjectileReaction);
	void OnRep_UpdateMesh();
	void OnProjectileValidated();
	void OnMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnDeflect(const struct FHitResult& DeflectionHit);
	void Multicast_SimulatePhysics(bool bSimulate);
	void Multicast_OnRespawnProjectile(const struct FVector_NetQuantize100& RespawnLocation, const struct FVector_NetQuantize100& RespawnRotation, float NewSpeed, float NewDamage, enum class EProjectileReaction ProjectileReaction);
	void Multicast_AttachToComponent(const struct FVector& NewLocation, class USceneComponent* Component, class FName BoneName);
	void Multicast_ApplyForceToHitObjects(struct FHitResult& Hit, const struct FVector& Velocity);
};

// 0x10 (0x1E0 - 0x1D0)
// Class ReadyOrNot.BulletProjectileMovementComponent
class UBulletProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	bool                                         bReduceFrictionAfterFirstBounce;                   // 0x1D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22E2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FrictionAfterFirstBounce;                          // 0x1D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22E3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBulletProjectileMovementComponent* GetDefaultObj();

};

// 0x40 (0x260 - 0x220)
// Class ReadyOrNot.BulletTracer
class ABulletTracer : public AActor
{
public:
	class USceneComponent*                       RootComp;                                          // 0x220(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22E5[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              ParticleComponent;                                 // 0x248(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       TracerParticle;                                    // 0x250(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       SmokeParticle;                                     // 0x258(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ABulletTracer* GetDefaultObj();

};

// 0xB0 (0xA80 - 0x9D0)
// Class ReadyOrNot.C2Explosive
class AC2Explosive : public ABaseItem
{
public:
	bool                                         bIsValidPlacement;                                 // 0x9D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22E8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHitResult                            LastGoodPlacement;                                 // 0x9D4(0x88)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_22E9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlacedC2Explosive*                    LastPlacedC2Explosive;                             // 0xA60(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxPlacementDistance;                              // 0xA68(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22EA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                CurrentActorPlacement;                             // 0xA70(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlacedC2Explosive>        PlacedC2Class;                                     // 0xA78(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AC2Explosive* GetDefaultObj();

	void Server_StartC2Placement(class AActor* Actor);
	void Server_FinishC2Placement();
	void OnRep_LastPlacedC2Explosive();
	void Multicast_StartPlaceC2Explosive();
	void EquipDetonator(bool bFromExplosives);
	void Client_C2PlacementFinished();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CachedAnimDataLibrary
class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCachedAnimDataLibrary* GetDefaultObj();

	bool StateMachine_IsStateRelevant(class UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData);
	float StateMachine_GetLocalWeight(class UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData);
	float StateMachine_GetGlobalWeight(class UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData);
};

// 0x58 (0x88 - 0x30)
// Class ReadyOrNot.CampaignData
class UCampaignData : public UDataAsset
{
public:
	class FText                                  CampaignTitle;                                     // 0x30(0x18)(Edit, NativeAccessSpecifierPublic)
	class FText                                  CampaignAuthor;                                    // 0x48(0x18)(Edit, NativeAccessSpecifierPublic)
	class FText                                  CampaignDescription;                               // 0x60(0x18)(Edit, NativeAccessSpecifierPublic)
	TArray<class FString>                        Levels;                                            // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCampaignData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CanIssueCommandOn
class ICanIssueCommandOn : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICanIssueCommandOn* GetDefaultObj();

	class AActor* GetCommandActor();
	bool CanIssueCommand();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CanPlaceC2On
class ICanPlaceC2On : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICanPlaceC2On* GetDefaultObj();

	void OnC2Removed(class APlacedC2Explosive* C2);
	void OnC2Detonated(class APlacedC2Explosive* C2);
	struct FRotator GetPlacementRotation(const struct FHitResult& TraceHit);
	struct FVector GetPlacementLocation(const struct FHitResult& TraceHit);
	bool CanPlaceC2OnNow(class APlayerCharacter* C2Owner, class AC2Explosive* C2, const struct FHitResult& Hit);
	void C2StopPlacement(class AC2Explosive* C2);
	void C2StartPlacement(class AC2Explosive* C2);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CanUse
class ICanUse : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICanUse* GetDefaultObj();

	bool UsesHoldButtonPrompt();
	bool StartUse(class APlayerCharacter* User);
	bool PlaysUseIconComplete();
	bool OverridesUseButtonPromptText();
	bool IsAvailableForUse();
	TArray<class USceneComponent*> GetUseViewComponents();
	class USceneComponent* GetUseIconBoltComponent();
	class FText GetUseButtonPromptText();
	void EndUse(class APlayerCharacter* User);
	bool CanUse(class APlayerCharacter* User);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CanUseMultitoolOn
class ICanUseMultitoolOn : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICanUseMultitoolOn* GetDefaultObj();

	bool ShouldOperate();
	void Server_FinishedUsingMultitool(class AReadyOrNotCharacter* ToolOwner);
	enum class EMultitoolFunctions GetMultitoolUseType();
	float GetMultitoolUseTime();
	void Client_FinishedUsingMultitool(class AReadyOrNotCharacter* ToolOwner);
	bool CanUseMultitoolNow(class AReadyOrNotCharacter* ToolOwner, class AMultitool* Tool, const struct FHitResult& TraceHit);
	bool CanCancelMultitoolAction();
};

// 0x40 (0x810 - 0x7D0)
// Class ReadyOrNot.CaptureTheFlagGM
class ACaptureTheFlagGM : public AReadyOrNotGameMode_PVP
{
public:
	FMulticastInlineDelegateProperty_            OnFlagCaptured;                                    // 0x7D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFlagDropped;                                     // 0x7E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class ACTF_Flag>                 FlagClassToSpawn;                                  // 0x7F0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACTF_Flag*                             Flag;                                              // 0x7F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2300[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACaptureTheFlagGM* GetDefaultObj();

	void OnFlagDroppedSignature__DelegateSignature(class APlayerCharacter* DroppedByCharacter, enum class ETeamType DroppedByTeam);
	void OnFlagCapturedSignature__DelegateSignature(class APlayerCharacter* CapturedByCharacter, enum class ETeamType CpaturedByTeam);
	void OnFlagBearerKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void DropFlag();
	class ACTF_FlagSpawnPoint* ChooseFlagSpawnPoint();
	void CaptureFlag(class ACTF_Flag* CapturedFlag, class APlayerCharacter* NewFlagBearer);
};

// 0x18 (0x7F8 - 0x7E0)
// Class ReadyOrNot.CaptureTheFlagGS
class ACaptureTheFlagGS : public AReadyOrNotGameState
{
public:
	class ACTF_Flag*                             Flag;                                              // 0x7E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      FlagBearer;                                        // 0x7E8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         FlagBearerTeam;                                    // 0x7F0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFlagCaptured : 1;                                 // Mask: 0x1, PropSize: 0x10x7F1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGameWon : 1;                                      // Mask: 0x2, PropSize: 0x10x7F1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2302[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACaptureTheFlagGS* GetDefaultObj();

	void OnRep_FlagStatus();
};

// 0x48 (0x70 - 0x28)
// Class ReadyOrNot.Challenge
class UChallenge : public UObject
{
public:
	class FText                                  ChallengeName;                                     // 0x28(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ChallengeDescription;                              // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                  ChallengeProgressName;                             // 0x58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ChallengeProgressCurrent;                          // 0x60(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ChallengeProgressMax;                              // 0x64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHiddenChallenge;                                  // 0x68(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bChallengeComplete;                                // 0x69(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLevelSpecificChallenge;                           // 0x6A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2305[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UChallenge* GetDefaultObj();

	void UpdateFromProfile(class UReadyOrNotProfile* Profile);
	void ResetChallengeProgress();
	void OnChallengeInit(class AReadyOrNotGameState* Gs);
	void OnChallengeAchieved();
	void IncrementChallengeProgress(int32 IncrementBy);
	void DecrementChallengeProgress(int32 DecrementBy);
};

// 0x18 (0x48 - 0x30)
// Class ReadyOrNot.ChallengeManager
class UChallengeManager : public UWorldSubsystem
{
public:
	TArray<class UChallenge*>                    Challenges;                                        // 0x30(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UReadyOrNotProfile*                    Profile;                                           // 0x40(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UChallengeManager* GetDefaultObj();

	void SaveChallenges();
	void InitChallenges(class AReadyOrNotGameState* GameState, const struct FLevelDataLookupTable& LevelData);
};

// 0x68 (0x288 - 0x220)
// Class ReadyOrNot.CharacterCustomizationPortal
class ACharacterCustomizationPortal : public AActor
{
public:
	uint8                                        Pad_230F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  CustomizationCharacter;                            // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                   BillboardComponent;                                // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArrowComponent*                       CharacterSpawnPoint;                               // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2310[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshComponent*>          CompsToOutline;                                    // 0x258(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class ULightComponent*>               LightsToEnable;                                    // 0x268(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FName                                  LightActorsOfTag;                                  // 0x278(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bHasLocked;                                        // 0x280(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2312[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACharacterCustomizationPortal* GetDefaultObj();

	void UpdateCharacterLookOverride(class FName Head, class FName Body);
	bool SaveCharacterLookOverride(class FName InHead, class FName InBody);
	bool IsDLCLocked(const struct FCharacterPersonalizationData& Data);
	void GetCustomizationEntries(TArray<struct FCharacterPersonalizationData>* OutHeads, TArray<struct FCharacterPersonalizationData>* OutBodys);
	bool GetCurrentCharacterLookOverride(class FName* OutHead, class FName* OutBody);
	bool GetCharacterLookOverride(class FName Head, class FName Body, struct FCharacterLookOverride* OutCharacterLookOverride);
	void GetAllCompatibleHeads(class FName InBody, TArray<class FName>* OutHeads);
	void GetAllCompatibleBodies(class FName InHead, TArray<class FName>* OutBodies);
};

// 0x0 (0x108 - 0x108)
// Class ReadyOrNot.HealthComponent
class UHealthComponent : public UResourceComponent
{
public:

	static class UClass* StaticClass();
	static class UHealthComponent* GetDefaultObj();

};

// 0x190 (0x298 - 0x108)
// Class ReadyOrNot.CharacterHealthComponent
class UCharacterHealthComponent : public UHealthComponent
{
public:
	FMulticastInlineDelegateProperty_            OnLimbFullHealth;                                  // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLimbLowHealth;                                   // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLimbNoHealth;                                    // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLimbBroken;                                      // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLimbFullTickets;                                 // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLimbNoTickets;                                   // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	enum class EPlayerHealthStatus               HealthStatus;                                      // 0x168(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableIncapacitation : 1;                         // Mask: 0x1, PropSize: 0x10x169(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_156 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2337[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IncapacitationHealthMultiplier;                    // 0x16C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLimbHealthData                       RightLeg;                                          // 0x170(0x34)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLimbHealthData                       LeftLeg;                                           // 0x1A4(0x34)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLimbHealthData                       RightArm;                                          // 0x1D8(0x34)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLimbHealthData                       LeftArm;                                           // 0x20C(0x34)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLimbHealthData                       Head;                                              // 0x240(0x34)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bUnlimitedRevives : 1;                             // Mask: 0x1, PropSize: 0x10x274(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_157 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2339[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxRevives;                                        // 0x278(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReviveTime;                                        // 0x27C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReviveTimeDecrement;                               // 0x280(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReviveOperatingTime;                               // 0x284(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxReviveHealth;                                   // 0x288(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RemainingRevives;                                  // 0x28C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RemainingReviveTime;                               // 0x290(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RemainingReviveHealth;                             // 0x294(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCharacterHealthComponent* GetDefaultObj();

	void UseAllLimbTickets(enum class ELimbType& Limb);
	void UpdatePreviousLimbHealth(enum class ELimbType& Limb);
	void SetReviveHealth(float NewReviveHealth);
	void SetRemainingRevives(int32 NewRemainingRevives);
	void SetMaxLimbHealth(enum class ELimbType& Limb, float NewMaxHealth);
	void SetLimbHealth(enum class ELimbType& Limb, float NewHealthAmount);
	void SetHealthStatus(enum class EPlayerHealthStatus NewHealthStatus);
	void SetCurrentLimbHealthToMax(enum class ELimbType& Limb);
	void Server_UseAllRemainingLimbTickets(enum class ELimbType& Limb);
	void Server_UpdatePreviousLimbHealth(enum class ELimbType& Limb);
	void Server_SetReviveHealth(float NewReviveHealth);
	void Server_SetRemainingRevives(int32 NewRemainingRevives);
	void Server_SetMaxLimbHealth(enum class ELimbType& Limb, float NewMaxHealth);
	void Server_SetLimbHealth(enum class ELimbType& Limb, float NewHealthAmount);
	void Server_SetHealthStatus(enum class EPlayerHealthStatus NewHealthStatus);
	void Server_SetCurrentLimbHealthToMax(enum class ELimbType& Limb);
	void Server_ResetRevives();
	void Server_ResetReviveHealth();
	void Server_ResetLimbTickets(enum class ELimbType& Limb);
	void Server_ResetLimbHealth(enum class ELimbType& Limb);
	void Server_ResetAllLimbTickets();
	void Server_ResetAllLimbHealth();
	void Server_IncreaseReviveHealth(float Amount);
	void Server_IncreaseRevive();
	void Server_IncreaseLimbTickets(enum class ELimbType& Limb, int32 Amount);
	void Server_IncreaseLimbHealth(enum class ELimbType& Limb, float Amount);
	void Server_HalfMaxLimbHealth(enum class ELimbType& Limb);
	void Server_DecreaseReviveHealth(float Amount);
	void Server_DecreaseRevive();
	void Server_DecreaseLimbTickets(enum class ELimbType& Limb, int32 Amount);
	void Server_DecreaseLimbHealth(enum class ELimbType& Limb, float Amount);
	void ResetRevives();
	void ResetReviveHealth();
	void ResetLimbTickets(enum class ELimbType& Limb);
	void ResetLimbHealth(enum class ELimbType& Limb);
	void ResetAllLimbTickets();
	void ResetAllLimbHealth();
	void OnLimbNoTicketsRemainingSignature__DelegateSignature(enum class ELimbType Limb);
	void OnLimbNoHealthSignature__DelegateSignature(enum class ELimbType Limb);
	void OnLimbLowHealthSignature__DelegateSignature(enum class ELimbType AffectedLimb, float LimbHealth);
	void OnLimbFullTicketsSignature__DelegateSignature(enum class ELimbType Limb);
	void OnLimbFullHealthSignature__DelegateSignature(enum class ELimbType Limb);
	void OnLimbBrokenSignature__DelegateSignature(enum class ELimbType Limb);
	bool IsUsingUnlimitedRevives();
	bool IsReviveHealthDepleted();
	bool IsLimbNoHealth(enum class ELimbType& Limb);
	bool IsLimbLowHealth(enum class ELimbType& Limb);
	bool IsLimbHealthBelow(enum class ELimbType& Limb, float HealthValue);
	bool IsLimbHealthAtOrBelow(enum class ELimbType& Limb, float HealthValue);
	bool IsLimbHealthAtOrAbove(enum class ELimbType& Limb, float HealthValue);
	bool IsLimbHealthAt(enum class ELimbType& Limb, float HealthValue);
	bool IsLimbHealthAbove(enum class ELimbType& Limb, float HealthValue);
	bool IsLimbFullHealth(enum class ELimbType& Limb);
	bool IsLimbEqualTo(struct FLimbHealthData& InLimbHealthData, struct FLimbHealthData& OtherLimbHealthData);
	bool IsLimbBroken(enum class ELimbType& Limb);
	bool IsIncapacitationEnabled();
	bool IsIncapacitated();
	bool IsAnyLimbBroken(enum class ELimbType* OutLimbType);
	bool IsAnyLimbBelowFullHealth(enum class ELimbType* OutLimbType);
	bool IsAnyLimbAtNoHealth(enum class ELimbType* OutLimbType);
	void IncreaseReviveHealth(float Amount);
	void IncreaseRevive();
	void IncreaseLimbTickets(enum class ELimbType& Limb, int32 Amount);
	void IncreaseLimbHealth(enum class ELimbType& Limb, float Amount);
	bool HalfMaxLimbHealth(enum class ELimbType& Limb);
	struct FLimbHealthData GetRightLegHealth_Copy();
	struct FLimbHealthData GetRightArmHealth_Copy();
	float GetReviveOperatingTime();
	float GetRemainingReviveTime();
	int32 GetRemainingRevives();
	float GetRemainingReviveHealth();
	int32 GetMaxRevives();
	float GetMaxReviveHealth();
	struct FLimbHealthData GetLimb_Copy(enum class ELimbType& Limb);
	struct FLimbHealthData GetLeftLegHealth_Copy();
	struct FLimbHealthData GetLeftArmHealth_Copy();
	float GetIncapacitationHealthMultiplier();
	enum class EPlayerHealthStatus GetHealthStatus();
	struct FLimbHealthData GetHeadHealth_Copy();
	TArray<enum class ELimbType> GetBrokenLimbs();
	void DecreaseReviveHealth(float Amount);
	void DecreaseRevive();
	void DecreaseLimbTickets(enum class ELimbType& Limb, int32 Amount);
	void DecreaseLimbHealth(enum class ELimbType& Limb, float Amount);
	bool CanUseReviveSystem();
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.ReactionInterestPoint
class AReactionInterestPoint : public AActor
{
public:
	class UBillboardComponent*                   BillboardComponent;                                // 0x220(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AReactionInterestPoint* GetDefaultObj();

};

// 0xA8 (0x300 - 0x258)
// Class ReadyOrNot.CharacterReactionVolume
class ACharacterReactionVolume : public AVolume
{
public:
	TArray<class FString>                        PossibleVoiceLines;                                // 0x258(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseStealthVoiceLines;                             // 0x268(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_233B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PossibleStealthVoiceLines;                         // 0x270(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseEligibleSpeakersOnly;                          // 0x280(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_233C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        EligibleSpeakers;                                  // 0x288(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseSpecificVoiceLines;                            // 0x298(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_233D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InspectTimeBeforeReaction;                         // 0x29C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeBetweenReactionAttempts;                       // 0x2A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeWithoutCombat;                                 // 0x2A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxReactions;                                      // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  VolumeTag;                                         // 0x2AC(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSwatOnly;                                         // 0x2B4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_233F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReactionInterestPoint*>        InterestPoints;                                    // 0x2B8(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          OverlappingCharacters;                             // 0x2C8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2340[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACharacterReactionVolume* GetDefaultObj();

	void ReactionLengthReady(float Length);
	void PlayReaction(class AReadyOrNotCharacter* Character);
	void OnTaggedVolumeTriggered(class ACharacterReactionVolume* Volume, class FName Tag);
	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
	void AttemptReaction();
};

// 0x10 (0x330 - 0x320)
// Class ReadyOrNot.CharacterStatusWidget
class UCharacterStatusWidget : public UCommonActivatableWidget
{
public:
	TArray<class UCharacterProxy*>               CharacterProxies;                                  // 0x320(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UCharacterStatusWidget* GetDefaultObj();

	void OnCharacterRemoved(class UCharacterProxy* CharacterProxy);
	void OnCharacterAdded(class UCharacterProxy* CharacterProxy);
	TArray<class UCharacterProxy*> GetCharacterProxies();
};

// 0x20 (0x48 - 0x28)
// Class ReadyOrNot.CharacterProxy
class UCharacterProxy : public UObject
{
public:
	FMulticastInlineDelegateProperty_            OnStatusUpdated;                                   // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLoadoutUpdated;                                  // 0x38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCharacterProxy* GetDefaultObj();

	void OnCharacterUpdated__DelegateSignature();
	bool IsPlayer();
	bool IsLocalPlayer();
	class URosterTrait* GetTrait(bool* bIsUnlocked);
	enum class ETeamType GetTeam();
	class FText GetStatus();
	int32 GetNumber();
	class FText GetName();
	struct FRosterLoadout GetLoadout();
	TSoftObjectPtr<class UTexture2D> GetImage();
	float GetHealth();
	class FText GetFirstName();
};

// 0x8 (0x50 - 0x48)
// Class ReadyOrNot.PlayerCharacterProxy
class UPlayerCharacterProxy : public UCharacterProxy
{
public:
	class APlayerState*                          PlayerState;                                       // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlayerCharacterProxy* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class ReadyOrNot.CoopCharacterProxy
class UCoopCharacterProxy : public UCharacterProxy
{
public:
	class ASWATCharacter*                        SWATCharacter;                                     // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCoopCharacterProxy* GetDefaultObj();

};

// 0x0 (0x1C8 - 0x1C8)
// Class ReadyOrNot.ChargeCombatMove
class UChargeCombatMove : public UBaseCombatMoveActivity
{
public:

	static class UClass* StaticClass();
	static class UChargeCombatMove* GetDefaultObj();

};

// 0x0 (0x2D8 - 0x2D8)
// Class ReadyOrNot.CheckpointActivityTriggerVolume
class ACheckpointActivityTriggerVolume : public AActivityTriggerVolume
{
public:

	static class UClass* StaticClass();
	static class ACheckpointActivityTriggerVolume* GetDefaultObj();

};

// 0x40 (0xA10 - 0x9D0)
// Class ReadyOrNot.Chemlight
class AChemlight : public ABaseItem
{
public:
	uint8                                        Pad_2351[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAmmoComponent*                        Ammo;                                              // 0x9E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  SocketSpawnName;                                   // 0x9E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2353[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AChemlight* GetDefaultObj();

	void SetFPMeshHidden(bool bFPMeshHidden);
	void Server_SpawnThrownChemlight();
	void QuickThrow();
	void OnChemlightThrown();
	void NormalThrow();
	void Multicast_SpawnThrownChemlight();
	bool IsPlayingChemlightThrowAnimations();
	int32 GetRemainingAmmo();
	bool CanThrow();
	void CancelThrow();
};

// 0x1170 (0x1628 - 0x4B8)
// Class ReadyOrNot.ReadyOrNotCharacter
class AReadyOrNotCharacter : public ACharacter
{
public:
	uint8                                        Pad_23E7[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                CustomizationFaceMesh;                             // 0x528(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>        CustomizationSkeletalMeshes;                       // 0x530(0x10)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>          CustomizationStaticMeshes;                         // 0x540(0x10)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        CustomizationActors;                               // 0x550(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FSavedCustomization                   Customization;                                     // 0x560(0xD0)(Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                        Pad_23E8[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                MeshGearSlot;                                      // 0x680(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                InteractableComponent;                             // 0x688(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerComponent*             PlayerMarkerComponent;                             // 0x690(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                FaceMesh;                                          // 0x698(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioPropagationComponent*        FMODAudioPropagationComp;                          // 0x6A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   FMODVoiceAudioComp;                                // 0x6A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterHealthComponent*             CharacterHealth;                                   // 0x6B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInventoryComponent*                   InventoryComp;                                     // 0x6B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x6C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGibComponent*                         GibComponent;                                      // 0x6C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicalAnimationComponent*           PhysicalAnimationComp;                             // 0x6D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkinnedDecalSampler*                  SkinnedDecalSampler;                               // 0x6D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URagdollComponent*                     RagdollComponent;                                  // 0x6E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_23EA[0x3C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ReplicatedControlRotation;                         // 0x724(0xC)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterKilled;                                 // 0x730(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterIncapacitated;                          // 0x740(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponFire;                                      // 0x750(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponDryFire;                                   // 0x760(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerDowned;                                    // 0x770(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPointDamageReceived;                             // 0x780(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStunDamageReceived;                              // 0x790(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerFreed;                                     // 0x7A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerHit;                                       // 0x7B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerArmorHit;                                  // 0x7C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ABaseItem*                             ThrownItem;                                        // 0x7D0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGetupComplete;                                   // 0x7D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemThrown_FromAnimNotify;                       // 0x7E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorLockPickBegin_FromAnimNotify;                // 0x7F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorLockPickEnd_FromAnimNotify;                  // 0x808(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorChecked_FromAnimNotify;                      // 0x818(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnC2Placed_FromAnimNotify;                         // 0x828(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnC2Detonate_FromAnimNotify;                       // 0x838(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTrapDisarmBegin_FromAnimNotify;                  // 0x848(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTrapDisarmEnd_FromAnimNotify;                    // 0x858(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMirrorDoorStarted_FromAnimNotify;                // 0x868(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMirrorDoorFinished_FromAnimNotify;               // 0x878(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStartDoorWedgePlacement_FromAnimNotify;          // 0x888(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndDoorWedgePlacement_FromAnimNotify;            // 0x898(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_23EE[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacterDamageEvent                 LastDamageEvent;                                   // 0x8D8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_23EF[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bBulletForceTransferred;                           // 0x902(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumBodyFallImpulse;                            // 0x904(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxRagdollSounds;                                  // 0x908(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RagdollSoundsPlayed;                               // 0x90C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BodyFallEvent;                                     // 0x910(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundSource*                          BodyFallSoundSource;                               // 0x920(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCapsuleCollisionRagdolled;                        // 0x928(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCapsuleFloorAngleRagdolled;                       // 0x929(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CapsuleCollisionRagdollTriggerThreshold;           // 0x92C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CapsuleFloorAngleRagdollTriggerThreshold;          // 0x930(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CapsuleFloorAngleRagdollDelayThreshold;            // 0x934(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBlendingAnim2Ragdoll;                             // 0x938(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F4[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Anim2RagdollPelvisWakeUpTime;                      // 0x948(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F5[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundSource*                          VoiceSoundSource;                                  // 0x958(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F7[0x1D0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bBlendInPhysics;                                   // 0xB30(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartBlendInIncapacitation;                       // 0xB31(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBlendInIncapacitation;                            // 0xB32(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F8[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IncapacitationBlendTime;                           // 0xB34(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IncapacitationBlendOutTime;                        // 0xB38(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         IncapacitationLoopAnim;                            // 0xB40(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendInterpAmount;                                 // 0xB48(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23FA[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FinalBlendInTime;                                  // 0xB58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23FB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlendInAfterStartOfAnim;                           // 0xB60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPreviewCharacter : 1;                           // Mask: 0x1, PropSize: 0x10xB64(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_158 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23FC[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  ArrestedBy;                                        // 0xB70(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  KilledBy;                                          // 0xB78(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  IncapacitatedBy;                                   // 0xB80(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECharacterDeathReason             DeathReason;                                       // 0xB88(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23FE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCharacterTakeDamage;                             // 0xB90(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAIStunnedPlaySound;                              // 0xBA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStunnedEvent;                                    // 0xBB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStunnedEndedEvent;                               // 0xBC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMeleeHitTaken;                                   // 0xBD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FName>                          HeadBones;                                         // 0xBE0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          UpperBody;                                         // 0xBF0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2400[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          LowerBody;                                         // 0xC10(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_Leg;                                             // 0xC20(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          L_Leg;                                             // 0xC30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          L_Foot;                                            // 0xC40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_Foot;                                            // 0xC50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          L_Arm;                                             // 0xC60(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_Arm;                                             // 0xC70(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          L_Hand;                                            // 0xC80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          R_Hand;                                            // 0xC90(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bLowReadyPointUp;                                  // 0xCA0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bLowReadyPointDown;                                // 0xCA1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2401[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LowReadyDistance;                                  // 0xCA4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2402[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCapsuleComponent*>             LowReadyIgnoredCapsules;                           // 0xCB0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        bIsCrouching : 1;                                  // Mask: 0x1, PropSize: 0x10xCC0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_159 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2403[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        QuickLeanAmount;                                   // 0xCC4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanIntensity;                                // 0xCC8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanInterpSpeed;                              // 0xCCC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeLeanX;                                         // 0xCD0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreeLeanZ;                                         // 0xCD4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFreeLeaning;                                      // 0xCD8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLeaning;                                        // 0xCD9(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningLeft;                                      // 0xCDA(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningRight;                                     // 0xCDB(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningUp;                                        // 0xCDC(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningDown;                                      // 0xCDD(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeanLeftToggle;                                   // 0xCDE(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bLeanRightToggle;                                  // 0xCDF(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   LeanAudioComponent;                                // 0xCE0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            LeanAudioEvent;                                    // 0xCE8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LeanMovementValue;                                 // 0xCF0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LeanPos_CurrentFrame;                              // 0xCF4(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LeanPos_LastFrame;                                 // 0xD00(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESquadPosition                    SquadPosition;                                     // 0xD0C(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         DefaultTeam;                                       // 0xD0D(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2406[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FPMeleeImpactFMODEvent;                            // 0xD10(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            TPMeleeImpactFMODEvent;                            // 0xD18(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       MeleeImpactParticle;                               // 0xD20(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMatineeCameraShake>       MeleeCameraShake;                                  // 0xD28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	float                                        MeleeRange;                                        // 0xD30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MeleeDamage;                                       // 0xD34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UDamageType>             MeleeDamageType;                                   // 0xD38(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)


	FMulticastInlineDelegateProperty_            OnPlayerArrested;                                  // 0xD60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerArrestStart;                               // 0xD70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerArrestedCanceled;                          // 0xD80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  PendingAutoReport;                                 // 0xD90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCarryArrestedAnimState               Rep_CarryArrestedAnimState;                        // 0xD98(0x8)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bSurrendered;                                      // 0xDA0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSurrenderComplete;                                // 0xDA1(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2407[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOrderedToRotateForArrest : 1;                     // Mask: 0x1, PropSize: 0x10xDB8(0x1)(Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_15A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2409[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlacedZipcuffs*                       PlacedZipcuffs;                                    // 0xDC0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class APlacedZipcuffs>           SpawnedZipcuffsClass;                              // 0xDC8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class APlacedZipcuffs>           SpawnedFPZipcuffsClass;                            // 0xDD0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  ZipcuffBone;                                       // 0xDD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsBeingCarried;                                   // 0xDE0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCarryingDead;                                     // 0xDE1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_240A[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  CarriedByCharacter;                                // 0xDE8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  ThrownByCharacter;                                 // 0xDF0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  PendingCarryCharacter;                             // 0xDF8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  CurrentCarryCharacter;                             // 0xE00(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASkeletalMeshActor*                    FakeCarryCharacterMesh;                            // 0xE08(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentCarryConfirmTime;                           // 0xE10(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_240B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         CarryMasterIdleLoop;                               // 0xE18(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                         CarrySlaveIdleLoop;                                // 0xE20(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxCarryConfirmTime;                               // 0xE28(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxRagdollArrestConfirmTime;                       // 0xE2C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentRagdollArrestConfirmTime;                   // 0xE30(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_240C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  PendingRagdollArrestCharacter;                     // 0xE38(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  CurrentRagdollArrestCharacter;                     // 0xE40(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  LastCharacterMakingArrest;                         // 0xE48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  CurrentlyArresting;                                // 0xE50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBeingArrested;                                  // 0xE58(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrestComplete;                                   // 0xE59(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrestedAsRagdoll;                                // 0xE5A(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrestedAsRagdoll_Flipped;                        // 0xE5B(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPairedInteractionPlaying;                       // 0xE5C(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoTeamDamage;                                     // 0xE5D(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableInteraction;                               // 0xE5E(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPrimed;                                           // 0xE5F(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverarmThrow;                                     // 0xE60(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_240D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnQuickThrowStart;                                 // 0xE68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnQuickThrowEnd;                                   // 0xE78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCarryingChanged;                                 // 0xE88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_240E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsStrafing;                                       // 0xE99(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_240F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, class UAnimMontage*>     PlayedTableMontageMap3P;                           // 0xEA0(0x50)(NativeAccessSpecifierPublic)
	class FString                                LastTableMontagePlayed;                            // 0xEF0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2410[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacterLookOverride                CharacterLookOverride;                             // 0xF78(0xD0)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FString                                Rep_CharacterLookOverride;                         // 0x1048(0x10)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class ABaseArmour>, class USkeletalMesh*> ArmorOverrideMapTP;                                // 0x1058(0x50)(Edit, Protected, NativeAccessSpecifierProtected)
	class USkeletalMesh*                         Rep_BodyMesh;                                      // 0x10A8(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMesh*                         Rep_FaceMesh;                                      // 0x10B0(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMesh*                         Rep_FPMesh;                                        // 0x10B8(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UAnimMontage*, float>             AnimMontageCooldown;                               // 0x10C0(0x50)(Protected, NativeAccessSpecifierProtected)
	class UPoseAsset*                            CurrentFaceROM;                                    // 0x1110(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AnimationBlockingTime;                             // 0x1118(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2411[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ATOCManager*                           TOCManager;                                        // 0x1140(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMatineeCameraShake>       ReportToTOC_PVP_CameraShake;                       // 0x1148(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                TOCLine;                                           // 0x1150(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                SpeechCharacterName;                               // 0x1160(0x10)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2413[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasBeenReported;                                  // 0x1178(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2414[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpeakCooldown;                                     // 0x117C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ReportPlayerDeadFMODEvent;                         // 0x1180(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ReportPlayerArrestedFMODEvent;                     // 0x1188(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ReportPlayerGeneralFMODEvent;                      // 0x1190(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVoiceAudioStoppedDelegate;                       // 0x1198(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2415[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, float>                   SpeechCooldownMap;                                 // 0x11C0(0x50)(Protected, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODVoiceLine2D;                                   // 0x1210(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODVoiceLineSpatalized;                           // 0x1218(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2416[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FSuppressionData>   BoneSuppressionAmount;                             // 0x1228(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBoneDamaged;                                     // 0x1278(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBodyPartDamaged;                                 // 0x1288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        bBodyHit : 1;                                      // Mask: 0x1, PropSize: 0x10x1298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRightFootHit : 1;                                 // Mask: 0x2, PropSize: 0x10x1298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLeftFootHit : 1;                                  // Mask: 0x4, PropSize: 0x10x1298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBlockedByBodyArmor : 1;                           // Mask: 0x8, PropSize: 0x10x1298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBlockedByHeadArmor : 1;                           // Mask: 0x10, PropSize: 0x10x1298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15B : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2418[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EGibAreas, float>            DismembermentDamageMap;                            // 0x12B0(0x50)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                          DamageExcludedBones;                               // 0x1300(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	uint8                                        Pad_2419[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GasDamageAccumulated;                              // 0x1320(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GasDamageDecay;                                    // 0x1324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_241A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bGodMode : 1;                                      // Mask: 0x1, PropSize: 0x10x1330(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bNoTarget;                                         // 0x1331(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_241B[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       ArmorImpactEffect;                                 // 0x1338(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBloodData*                            Blood;                                             // 0x1340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ABaseWeapon*>                   DamagedByWeapons;                                  // 0x1348(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_241C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bRepStunned;                                       // 0x1360(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EStunType                         RepStunnedWith;                                    // 0x1361(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_241E[0x56];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHasEverBeenStunned : 1;                           // Mask: 0x1, PropSize: 0x10x13B8(0x1)(Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_15D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_241F[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotCharacter*>          AITrackingMe;                                      // 0x13D0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          DamagedByCharacters;                               // 0x13E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                               OriginalSpawnLocation;                             // 0x13F0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2420[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnEvidenceCollected;                               // 0x1400(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2421[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                PendingEvidence;                                   // 0x1418(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsCollectingEvidence;                             // 0x1420(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCollectionAnimHasTriggered;                       // 0x1421(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2422[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          CollectingLoopAnim1P;                              // 0x1428(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          CollectingLoopAnim3P;                              // 0x1430(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ACollectedEvidenceActor>   CollectedEvidenceClass;                            // 0x1438(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            Reward;                                            // 0x1440(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECharacterEmotion                 CurrentEmotion;                                    // 0x1448(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2423[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FacialAnimationOverrideTime;                       // 0x144C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FacialAnimationBlend;                              // 0x1450(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FacialAnimationBlendTarget;                        // 0x1454(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FacialAnimationBlendDecay;                         // 0x1458(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FacialAnimationPriority;                           // 0x145C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAiming;                                           // 0x1460(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementLocked;                                   // 0x1461(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAimLocked;                                        // 0x1462(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bActionsLocked;                                    // 0x1463(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bItemSelectionLocked;                              // 0x1464(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCommandMenuLocked;                                // 0x1465(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bWeaponAttachmentsLocked;                          // 0x1466(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCantedSightLocked;                                // 0x1467(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADoor*                                 QueuedDoorToOpen;                                  // 0x1468(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 QueuedDoorToClose;                                 // 0x1470(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 LastKickedDoor;                                    // 0x1478(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickInteractionFront;                          // 0x1480(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickInteractionBack;                           // 0x1488(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickFailureInteractionFront;                   // 0x1490(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickFailureInteractionBack;                    // 0x1498(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickBreakInteractionFront;                     // 0x14A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DoorKickBreakInteractionBack;                      // 0x14A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     CarryArrestedInteractionData;                      // 0x14B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     DropArrestedInteractionData;                       // 0x14B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionsData*                     ThrowArrestedInteractionData;                      // 0x14C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_            Event_OnItemPrimaryUse;                            // 0x14C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bNVGOn;                                            // 0x14D8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2424[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnNightVisionGogglesToggled;                       // 0x14E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2425[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldPlayFootstepFoley;                          // 0x1518(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPlayEveryStep;                                    // 0x1519(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2426[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AImpactEffect>             FootstepImpactEffectFast;                          // 0x1520(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AImpactEffect>             FootstepImpactEffectSlow;                          // 0x1528(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            CurrentFootstepFoleyEvent;                         // 0x1530(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            CurrentFootstepFoleyEventRemote;                   // 0x1538(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FootstepsLocal;                                    // 0x1540(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FootstepsRemote;                                   // 0x1548(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            MovementFoley;                                     // 0x1550(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  MovementFoleySocket;                               // 0x1558(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         DefaultRagdollPhysAsset;                           // 0x1560(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         DefaultAlivePhysAsset;                             // 0x1568(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         CuffedRagdollPhysAsset;                            // 0x1570(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         Rep_ActiveRagdollPhysAsset;                        // 0x1578(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsRelevant;                                       // 0x1580(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2427[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ANeutralizeSuspectByTag*               NeutralizeSuspectTag;                              // 0x1588(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAnimMontage*>                  TorsoDeathAnims;                                   // 0x1590(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  HeadDeathAnims;                                    // 0x15A0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  LeftArmDeathAnims;                                 // 0x15B0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  RightArmDeathAnims;                                // 0x15C0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  LeftLegDeathAnims;                                 // 0x15D0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  RightLegDeathAnims;                                // 0x15E0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                          CurrentDeathMontage;                               // 0x15F0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlayingDeathMontage : 1;                          // Mask: 0x1, PropSize: 0x10x15F8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartedPlayingDeath : 1;                          // Mask: 0x2, PropSize: 0x10x15F8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FRonReplicatedAcceleration            ReplicatedAcceleration;                            // 0x15F9(0x3)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	float                                        ReplicatedMaxSpeed;                                // 0x15FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBlendRagdollNotifyActive;                       // 0x1600(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2428[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FootstepOcclusionMultiplier;                       // 0x1604(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootstepFullOcclusionDepth;                        // 0x1608(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2429[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCharacterSnapshot>            Snapshots;                                         // 0x1618(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AReadyOrNotCharacter* GetDefaultObj();

	void VoiceAudioEvent__DelegateSignature(class AReadyOrNotCharacter* Speaker);
	bool UsingReviveSystem();
	void UpdateOverridesFromCharacterLookOverrideDataTable(const class FString& LookOverride);
	void UnlockWeaponAttachments();
	void UnlockMovementAndActions();
	void UnlockMovement();
	void UnlockItemSelection();
	void UnlockCommandMenu();
	void UnlockCantedSight();
	void UnlockAllActions();
	void UnlockAim();
	void ToggleNightvisionGoggles();
	void ToggleLeanRight();
	void ToggleLeanLeft();
	void ToggleFreeLean();
	void TestPhysicalAnimationComponent();
	void StopTPMontageFromTable(const class FString& Animation, float BlendoutTime);
	void StopTPMontage(class UAnimMontage* AnimMontage, float BlendoutTime);
	void StopTPAnimMontage(class UAnimMontage* AnimMontage);
	void StopFPAnimMontage(class UAnimMontage* AnimMontage, float BlendoutTime);
	void StartStun(enum class EStunType StunType, class AActor* StunCauser);
	void StartPepperSprayed(class APepperspray* PeppersprayUsed);
	void StartBeingTasered(float PingStunDuration, class ATaser* WeaponUsed);
	void SpawnFootstepEffect();
	class ACollectedEvidenceActor* SpawnEvidenceCollectionBag(const struct FTransform& SpawnTransform);
	void SpawnBloodPool();
	void Server_Yell();
	void Server_UpdateLean(float QuickLean, float NewFreeLeanY, float NewFreeLeanZ);
	void Server_ThrowArrestedTarget(class AReadyOrNotCharacter* ArrestedCharacter);
	void Server_ReportToTOC(class AActor* Actor, bool bPlayAnimation, bool bTocResponse);
	void Server_ReportTarget(class AActor* Character);
	void Server_RepNVGOn(bool bIsOn);
	void Server_PlayTOCConversation();
	void Server_PlayNonLocal3PMontage(class UAnimMontage* NewMontage);
	void Server_Play3PMontage(class UAnimMontage* NewMontage, float StartTime, float PlayRate);
	void Server_MeleeInteract(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_Kill();
	void Server_KickQueuedDoor();
	void Server_KickFailQueuedDoor();
	void Server_KickBreakQueuedDoor();
	void Server_Interact_PrimaryUse(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_Interact(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_Incapacitate();
	void Server_EndInteract_PrimaryUse(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_EndInteract(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_DropArrestedTarget(class AReadyOrNotCharacter* ArrestedCharacter);
	void Server_DoubleTapInteract(class UObject* Interactable, class UInteractableComponent* InInteractableComponent);
	void Server_DoMelee();
	void Server_CollectEvidenceActor(class AEvidenceActor* InEvidenceActor);
	void Server_CollectEvidence(class ABaseItem* Item);
	void Server_ChangeTPMesh(class USkeletalMesh* Body, class USkeletalMesh* Face);
	void Server_CarryArrestedTarget(class AReadyOrNotCharacter* ArrestedCharacter);
	void Server_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	void ResetPhysicsAsset();
	void ResetHealth();
	void RequestAnim2RagdollBlend(float Duration);
	void RagdollArrestTarget(class AReadyOrNotCharacter* RagdollCharacter);
	void PlayTOCResponse(const class FString& Line, bool bIsNetworked, enum class ETOCPriority Priority, bool bCanPrefix, float Delay);
	void PlaySpecificDebugVoiceLine(const class FString& Filename);
	void PlayROEViolateTOCResponse();
	void PlayReportSpeech(const class FString& VoiceLine, const class FString& InTOCLine);
	void PlayRawVOWithCooldown(const class FString& VoiceLine, float Cooldown, const class FString& OverrideSpeakerName);
	bool PlayRawVO(const class FString& VoiceLine, const class FString& OverrideSpeakerName, bool bIgnoreIfAlreadyPlaying);
	void PlayRandomDebugVoiceLine(const class FString& Line);
	void PlayRandomDebugConversation();
	void PlayRadioSelectAnimation();
	class APairedInteractionDriver* PlayPairedInteraction(class UInteractionsData* InteractionData, class AActor* Driver, class AActor* Slave, class ABaseItem* OptionalItem);
	class UAnimMontage* PlayMontageFromTableWithIndex(const class FString& Animation, int32 Index);
	class UAnimMontage* PlayMontageFromTable(const class FString& Animation);
	void Play3PMontageDeferred(class UAnimMontage* Montage, const class FString& AnimationName);
	void Play3PMontage(class UAnimMontage* NewMontage, float StartTime, float PlayRate);
	void Play1PMontageDeferred(class UAnimMontage* Montage, const class FString& AnimationName);
	void Play1PMontage(class UAnimMontage* NewMontage, float PlayRate);
	void PickupEvidence(class AActor* InEvidence);
	bool OpenDoor(class ADoor* Door, bool bOpenDoor);
	void OnYellExecute();
	void OnWeaponFire__DelegateSignature(class AReadyOrNotCharacter* Character, class ABaseMagazineWeapon* Weapon, const struct FVector& FireDirection);
	void OnVoiceAudioStopped();
	void OnStunnedPlaySound__DelegateSignature(enum class EStunType StunType, bool bIsImmune);
	void OnStunnedEnded__DelegateSignature(enum class EStunType StunType);
	void OnStunned__DelegateSignature(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnStunDamage__DelegateSignature(float Damage, class AActor* Causer, class ACharacter* InstigatorCharacter, class ACharacter* HitCharacter, class UStunDamage* DamageEvent);
	void OnRep_Surrendered();
	void OnRep_ReplicatedAcceleration();
	void OnRep_MeshReplicated();
	void OnRep_Customization();
	void OnRep_CurrentRagdollArrestCharacterChanged();
	void OnRep_CurrentCarryCharacterChanged();
	void OnRep_ControlRotation();
	void OnRep_CharacterLookOverride();
	void OnRep_ActiveRagdollPhysAsset();
	void OnRagdollStart(class URagdollComponent* InRagdollComponent);
	void OnRagdollPhysBodyHit(class URagdollComponent* InRagdollComponent, const struct FVector& Impulse, struct FHitResult& Hit);
	void OnRagdollBlendStop(class URagdollComponent* InRagdollComponent);
	void OnQuickthrowStart__DelegateSignature(class AReadyOrNotCharacter* Character, class ABaseItem* LastItemBeforeQuickThrow, class ABaseItem* QuickThrowGrenade);
	void OnQuickthrowEnd__DelegateSignature(class ABaseItem* QuickThrowGrenade);
	void OnPointDamage__DelegateSignature(float Damage, class AActor* Causer, class ACharacter* InstigatorCharacter, class ACharacter* HitCharacter, class UBulletDamageType* DamageEvent);
	void OnPlayerHitEvent__DelegateSignature(float Damage, class FName HitBone);
	void OnPickupItemNotifyEvent__DelegateSignature();
	void OnNightVisionGogglesToggled__DelegateSignature(class AReadyOrNotCharacter* Character, bool bOn);
	void OnMirrorDoorNotifyEvent__DelegateSignature();
	void OnMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnMeleeHitTaken__DelegateSignature(class AReadyOrNotCharacter* InstigatorCharacter);
	void OnLeanStart();
	void OnLeanEnd();
	void OnKilled(class AReadyOrNotCharacter* InstigatorCharacter);
	void OnItemUse__DelegateSignature(class AReadyOrNotCharacter* ItemOwner, class ABaseItem* Item);
	void OnItemThrownNotifyEvent__DelegateSignature(class ABaseItem* InThrownItem);
	void OnItemHolstered(class ABaseItem* HolsteredItem);
	void OnItemEquipped(class ABaseItem* NewEquippedItem);
	void OnIncapacitated(class AReadyOrNotCharacter* InstigatorCharacter);
	void OnHealthDepleted();
	void OnGetupComplete__DelegateSignature();
	void OnFreed__DelegateSignature(class ACharacter* Freed, class ACharacter* Freer);
	void OnFootstep__DelegateSignature();
	void OnEvidenceCollected__DelegateSignature(class AActor* Evidence);
	void OnEquippedWeaponMagCheck(class ABaseMagazineWeapon* Weapon);
	void OnEquippedWeaponFire(class ABaseMagazineWeapon* Weapon, bool bServer);
	void OnEquippedWeaponDryFire(class ABaseMagazineWeapon* Weapon, bool bServer);
	void OnDowned__DelegateSignature(class AReadyOrNotCharacter* DownedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnDoorWedgePlacedNotifyEvent__DelegateSignature();
	void OnDoorLockPickNotifyEvent__DelegateSignature();
	void OnDoorCheckedNotifyEvent__DelegateSignature();
	void OnDismembermentParticleCollision(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat);
	void OnDisarmTrapNotifyEvent__DelegateSignature();
	void OnDeadHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnCharacterTakeDamage__DelegateSignature(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnCharacterKilled__DelegateSignature(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnCharacterIncapacitated__DelegateSignature(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnCarryThrowComplete_Slave(class AActor* Slave);
	void OnCarryThrowComplete_Driver(class AActor* Driver);
	void OnCarryThrowComplete(class AActor* Driver, class AActor* Slave);
	void OnCarryPickupComplete_Slave(class AActor* Slave);
	void OnCarryPickupComplete_Driver(class AActor* Driver);
	void OnCarryPickupComplete(class AActor* Driver, class AActor* Slave);
	void OnCarryingChanged__DelegateSignature();
	void OnCarryDropComplete_Slave(class AActor* Slave);
	void OnCarryDropComplete_Driver(class AActor* Driver);
	void OnCarryDropComplete(class AActor* Driver, class AActor* Slave);
	void OnCapsuleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnC2NotifyEvent__DelegateSignature();
	void OnBoneDamaged__DelegateSignature(class FName BoneHit);
	void OnBodyPartDamaged__DelegateSignature(bool bHeadDamaged, bool bBodyDamaged, bool bLeftArmDamaged, bool bRightArmDamaged, bool bLeftLegDamaged, bool bRightLegDamaged, bool bLeftFootDamaged, bool bRightFootDamaged);
	void OnBodyFallAudioStop();
	void OnArteryBleedParticleCollision(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat);
	void OnArrest__DelegateSignature(class AReadyOrNotCharacter* ArrestedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnActorSpawned(class AActor* Actor);
	void Multicast_TakeDamage(float Damage, struct FDamageEvent& DamageEvent, class AReadyOrNotCharacter* InstigatorCharacter, class AActor* DamageCauser);
	void Multicast_Stop3PMontage(class UAnimMontage* Montage, float BlendoutTime);
	void Multicast_Stop1PMontage(class UAnimMontage* Montage, float BlendoutTime);
	void Multicast_SpawnDismembermentEffects(enum class EGibAreas GibArea, const struct FHitResult& HitResult);
	void Multicast_SpawnBloodEffects(const struct FHitResult& Hit, float WoundSize, class AController* HitInstigator);
	void Multicast_SpawnArterialBloodEffects(const struct FHitResult& HitResult, class FName Artery);
	void Multicast_SavePoseSnapshot(class FName& SnapshotName);
	void Multicast_PlayRawVO(const class FString& SpecificFileName, const class FString& OverrideSpeakerName, bool bIgnoreIfAlreadyPlaying);
	void Multicast_PlayNonLocal3PMontage(class UAnimMontage* NewMontage);
	void Multicast_PlayMeleeImpactEffects(class UFMODEvent* ImpactSound, class UParticleSystem* ImpactParticle);
	void Multicast_PlayDeathAnimation(class UAnimMontage* Montage);
	void Multicast_Play3PMontage(class UAnimMontage* NewMontage, float StartTime, float PlayRate);
	void Multicast_PauseAllAnims(bool bPaused);
	void Multicast_OnTargetReported();
	void Multicast_OnKilled(class FName LastBoneHit, class AActor* DamageCauser);
	void Multicast_OnIncapacitated(class FName LastBone);
	void Multicast_OnExplosiveVestDetonation();
	void Multicast_InflictSuppression_NoLineOfSight(const struct FSuppressionData& SuppressionData, TSubclassOf<class UMatineeCameraShake> CameraShake, bool bLessLethal);
	void Multicast_InflictSuppression(const struct FSuppressionData& SuppressionData, TSubclassOf<class UMatineeCameraShake> CameraShake, bool bLessLethal);
	void Multicast_EnableRagdollBlendIn();
	void Multicast_EnableRagdoll(float Duration);
	void Multicast_DisableRagdoll();
	void Multicast_ChangeFaceEmotion(enum class ECharacterEmotion NewEmotion, float OverrideTime, float Blend, float BlendDecay, int32 Priority);
	void Multicast_AddMoveIgnoreActor(class AReadyOrNotCharacter* MoveIgnoreCharacter, bool bAdd);
	void LockWeaponAttachments();
	void LockMovementAndActions();
	void LockMovement();
	void LockItemSelection();
	void LockCommandMenu();
	void LockCantedSight();
	void LockAllActions();
	void LockAim();
	void LeanUp(float Val);
	void LeanRight(float Val);
	void Lean(float Val);
	void Kill();
	void KickDoor(class ADoor* Door);
	bool IsUpperBodyMontagePlaying();
	bool IsUnconsciousNotDead();
	bool IsTableMontagePlayingWithTimeRemaining(const class FString& Animation, float* TimeRemaining);
	bool IsTableMontagePlaying(const class FString& Animation);
	bool IsTableMontage(class UAnimMontage* Montage);
	bool IsSuspect();
	bool IsSurrenderedFor(float Seconds);
	bool IsSurrendered();
	bool IsSurrenderComplete();
	bool IsStunnedWith(enum class EStunType StunType);
	bool IsStunned();
	bool IsStartling();
	bool IsSpeechTimerActive();
	bool IsReviveHealthDepleted();
	bool IsReloading();
	bool IsRagdollBlending();
	bool IsPlayingRootMotionFromMontage();
	bool IsPlayingNonInterruptibleMontage(const class FString& MontageNameTryingToBePlayed);
	bool IsPlayingCarryAnims();
	bool IsPepperSprayedLocationValid(struct FHitResult& Hit, class APepperspray* Pepperspray);
	bool IsPepperSprayed();
	bool IsOutside();
	bool IsOnSWATTeam();
	bool IsOnSameTeam(class AReadyOrNotCharacter* A, class AReadyOrNotCharacter* B);
	bool IsOnlyStunnedWithGas();
	bool IsMontageSlotPlaying(class FName SlotName);
	bool IsMontagePlayingWithTimeRemaining(class UAnimMontage* Animation, float* TimeRemaining);
	bool IsLowHealth();
	bool IsLocalPlayer();
	bool IsLoadingTableMontage();
	bool IsLimbHit(enum class ELimbType Limb);
	bool IsLimbBroken(enum class ELimbType Limb);
	bool IsInRagdoll();
	bool IsInjured();
	bool IsIncapacitated();
	bool IsHealthDepleted();
	bool IsHalfHealth();
	bool IsGettingUp();
	bool IsFullHealth();
	bool IsFullBodyMontagePlaying();
	bool IsDropping();
	bool IsDowned();
	bool IsDeadOrUnconscious();
	bool IsDeadNotUnconscious();
	bool IsCurrentlyTased();
	bool IsCurrentlyStung();
	bool IsCurrentlySprayed();
	bool IsCurrentlyGassed();
	bool IsCurrentlyFlashed();
	bool IsCivilian();
	bool IsCarrying();
	bool IsCarried();
	bool IsBeingThrown();
	bool IsBeingCarried();
	bool IsBeingArrested();
	bool IsArrestedOrSurrendered();
	bool IsArrestedAndIncapacitated();
	bool IsArrestedAndDead();
	bool IsArrested();
	bool IsAnyTableMontagePlaying(class FString* OutMontage);
	bool IsAnyLimbHit();
	bool IsAnimationBlocking();
	bool IsAffectedByDamageTypeClass(TSubclassOf<class UDamageType> DamageType);
	bool IsAffectedByDamageType(class UDamageType* DamageType);
	bool IsActiveForMovement();
	bool IsActive();
	bool Is3PMontagePlaying(class UAnimMontage* Montage);
	void IncreaseHealth(float Amount);
	void Incapacitate();
	bool HasRecentlyTakenStunDamage(float Tolerance);
	bool HasRecentlyTakenDamage(float Tolerance);
	bool HasLineOfSightTo(struct FVector& Location);
	bool HasEverBeenStunned();
	bool HasBeenReported();
	float GetTimeSinceLastStun();
	float GetTimeSinceLastBulletDamage();
	enum class ETeamType GetTeam();
	TArray<class FString> GetTableMontageQueue();
	class FString GetSpeechCharacterName();
	float GetSpeakCooldown();
	TArray<class ABaseItem*> GetRemovedItems();
	class UAnimMontage* GetMontageFromTableWithIndex(const class FString& Animation, int32 Index);
	class UAnimMontage* GetMontageFromTable(const class FString& Animation);
	int32 GetMontageAnimCountFromTable(const class FString& Animation);
	float GetMaxHealth();
	struct FLimbHealthData GetLimbHealth(enum class ELimbType Limb);
	float GetLeanAmount(const struct FVector& Component, float* InOutPendingVal, float MaxValue);
	class FString GetLastTableMontagePlayed();
	enum class EPlayerHealthStatus GetHealthStatus();
	class UCharacterHealthComponent* GetHealthComponent();
	bool GetFMODFootstepParameters(int32* Stance, int32* Speed, int32* Surface);
	class ABaseMagazineWeapon* GetEquippedWeapon();
	class ABaseItem* GetEquippedItem();
	float GetDeltaRotationToCharacter(class AReadyOrNotCharacter* Character);
	enum class EAnimWeaponType GetCurrentWeaponAnimType();
	float GetCurrentStunTime();
	float GetCurrentStunDuration();
	float GetCurrentReviveTime();
	float GetCurrentReviveHealth();
	float GetCurrentHealth();
	TArray<class UPrimitiveComponent*> GetCollisionIgnoredComponents();
	TArray<class AActor*> GetCollisionIgnoredActors();
	void ForceMeshUsingOverride(class USkeletalMesh* InFPMesh, class USkeletalMesh* InTPMesh, class USkeletalMesh* InFaceMesh);
	void EndStun(enum class EStunType StunType);
	void EndPepperSprayed();
	void EndEvidenceCollection_COOP(class UInteractableComponent* CollectionInteractableComp);
	void EnableRagdoll(float Duration);
	void EnableNightVisionGoggles();
	bool DoesMontageFromTableExist(const class FString& Animation);
	void DisableRagdoll();
	void DisableNightVisionGoggles();
	void DepleteHealth();
	void DecreaseHealth(float Amount);
	bool DamageHitHead(struct FPointDamageEvent& DamageEvent);
	void CompleteEvidenceCollection_COOP(class AActor* InEvidenceActor);
	void CollectPendingEvidence();
	void Client_SetControlRotation(const struct FRotator& NewRotation);
	void Client_PlayScreenShake(TSubclassOf<class UMatineeCameraShake> CameraShake);
	void Client_PlayMeleeImpactEffects();
	void Client_PlayFMODEvent2D(class UFMODEvent* Event);
	void Client_Play1PMontage(class UAnimMontage* NewMontage, float PlayRate);
	void Client_OnBoneDamaged(class FName& BoneHit);
	void Client_OnBodyPartDamaged(bool bInHeadHit, bool bInBodyHit, bool bInLeftArmHit, bool bInRightArmHit, bool bInLeftLegHit, bool bInRightLegHit, bool bInLeftFootHit, bool bInRightFootHit);
	bool CanYell();
	bool CanMelee();
	bool CanDropCharacter(class AReadyOrNotCharacter* CharacterToDrop);
	void CancelArrest(class AReadyOrNotCharacter* PlayerMakingArrest);
	bool CanCarryCharacter(class AReadyOrNotCharacter* CharacterToPickup);
	bool CanBePickedUp();
	bool CanArrestRagdoll();
	bool CanArrest();
	void CalculateLeanMovement(float DeltaTime);
	void BeginEvidenceCollection_COOP(class AActor* InEvidenceActor, class UInteractableComponent* CollectionInteractableComp, float CollectionTime);
	void ArrestComplete(class AReadyOrNotCharacter* PlayerMakingArrest, class AZipcuffs* Zipcuffs);
	void Arrest(class AReadyOrNotCharacter* PlayerMakingArrest);
	void ApplyDamageToBone(float* Damage, class FName& HitBone, struct FPointDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	bool AnyBodyPartHit();
};

// 0x968 (0x1F90 - 0x1628)
// Class ReadyOrNot.CyberneticCharacter
class ACyberneticCharacter : public AReadyOrNotCharacter
{
public:
	uint8                                        Pad_2468[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 ClosestPawn;                                       // 0x1640(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2469[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VisibleSwatPercentage;                             // 0x1670(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_246A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URoNMoveStyleComponent*                MoveStyle;                                         // 0x1678(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_246B[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceComplianceStrength;                           // 0x16A4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverDirection                   ActiveCoverDirection;                              // 0x16A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverAimType                     ActiveCoverAimType;                                // 0x16A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverFireType                    ActiveCoverFireType;                               // 0x16AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_246D[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         ActiveCoverFirePose;                               // 0x16B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         ActiveCoverIdlePose;                               // 0x16B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACoverLandmark*                        CurrentCoverLandmarkInUse;                         // 0x16C0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACoverLandmark*                        LastCoverLandmarkUsed;                             // 0x16C8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWallHoleTraversal*                    CurrentWallHoleTraversalInUse;                     // 0x16D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWallHoleTraversal*                    LastWallHoleTraversalUsed;                         // 0x16D8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_246E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            VoiceLineEventMask;                                // 0x16E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_246F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshComponent*>          SimulatingAttachedStaticMeshes;                    // 0x16F8(0x10)(ExportObject, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAttachedMeshData>             AttachedMeshData;                                  // 0x1708(0x10)(Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAttachedSkeletalMeshData>     AttachedSkeletalMeshData;                          // 0x1718(0x10)(Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                         bIsMoving;                                         // 0x1728(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2471[0x27];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseItem*                             LastEquippedBreachItem;                            // 0x1750(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSurrendered;                                     // 0x1758(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFakeSurrendered;                                 // 0x1768(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpottedEnemy;                                    // 0x1778(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpottedFriendly;                                 // 0x1788(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSpottedNeutral;                                  // 0x1798(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSensedActor;                                     // 0x17A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSensedCharacter;                                 // 0x17B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAIFinishSpawning;                                // 0x17C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2472[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextRenderComponent*                  NoBuenoTextRender;                                 // 0x17E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AbuseCount;                                        // 0x17F0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2473[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ReasonsToSprint;                                   // 0x17F8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        ReasonsToStandStill;                               // 0x1808(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        ReasonsToWalk;                                     // 0x1818(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCoverAnimStateMachineData            Rep_CoverAnimState;                                // 0x1828(0x18)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FHidingAnimStateMachineData           Rep_HidingAnimState;                               // 0x1840(0x10)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FHoleTraversalAnimStateMachineData    Rep_HoleTraversalAnimState;                        // 0x1850(0x10)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                             AimOffset;                                         // 0x1860(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2474[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AReadyOrNotCharacter*, int32>     MeleeCountMap;                                     // 0x1880(0x50)(NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWorldBuildingActivity>> CivilianCowerActivities;                           // 0x18D0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        CivilianCowerActivityDuration;                     // 0x18E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2476[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AAIFactionManager*                     FactionManager;                                    // 0x18F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2477[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AAISpawn*                              SpawnedFromSpawner;                                // 0x19B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECombatState                      CombatState;                                       // 0x19B8(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2478[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  RecentMeleeVictim;                                 // 0x19C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  PendingMeleeTarget;                                // 0x19C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasEverShot;                                      // 0x19D0(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2479[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWeaponForceFire_FromAnimNotify;                  // 0x19D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorShotgunBreach_FromAnimNotify;                // 0x19E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorKickBreach_FromAnimNotify;                   // 0x19F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorRamBreach_FromAnimNotify;                    // 0x1A08(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPendingItemThrown_FromAnimNotify;                // 0x1A18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ABaseItem*                             PendingThrownItem;                                 // 0x1A28(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAIFire;                                          // 0x1A30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCollectPendingEvidenceBegin_FromAnimNotify;      // 0x1A40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCollectPendingEvidenceEnd_FromAnimNotify;        // 0x1A50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_247A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnHeardOfficerYell;                                // 0x1A68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExitedSurrender;                                 // 0x1A78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_247B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SuppressionAmount;                                 // 0x1A8C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  BeingRestrainedBy;                                 // 0x1A90(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScoringComponent*                     ScoringComponent;                                  // 0x1A98(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_247D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAIArchetypeData*                      Archetype;                                         // 0x1AA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               SpawnLocation;                                     // 0x1AB0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_247E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAIArchetypeData*                      DefaultSuspectArchetype;                           // 0x1AC0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIArchetypeData*                      DefaultCivilianArchetype;                          // 0x1AC8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityRouteCollection              ActivityRouteCollection;                           // 0x1AD0(0x20)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FVector                               Rep_AimOffsetFocalPoint;                           // 0x1AF0(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Rep_FocalPoint;                                    // 0x1AFC(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Rep_HeadFocalPoint;                                // 0x1B08(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_247F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Rep_FocalActor;                                    // 0x1B18(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasLOSToFocalPoint;                               // 0x1B20(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHeardYellFromOfficer : 1;                         // Mask: 0x1, PropSize: 0x10x1B21(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2480[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceHeardOfficerYell;                         // 0x1B24(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastAggressiveForce;                      // 0x1B28(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArrestedTime;                                      // 0x1B2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFemale;                                           // 0x1B30(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bChild;                                            // 0x1B31(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2482[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          LastGetUpMontage;                                  // 0x1B38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecoveringFromRagdoll : 1;                        // Mask: 0x1, PropSize: 0x10x1B40(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsKnockedOut : 1;                                 // Mask: 0x2, PropSize: 0x10x1B40(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPlayingDead : 1;                                // Mask: 0x4, PropSize: 0x10x1B40(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_160 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2483[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeHiding;                                        // 0x1B44(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimePlayingDead;                                   // 0x1B48(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastPlayDead;                             // 0x1B4C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceAtLastCoverLandmark;                      // 0x1B50(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastSeenCharacterWhilstHiding;            // 0x1B54(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceSeenCharacterNotLookingWhilstHiding;      // 0x1B58(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasEverSeenCharacterWhilstHiding;                 // 0x1B5C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2484[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  CharacterSeenWhilstHiding;                         // 0x1B60(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Unarmed_Calm_AD;                                   // 0x1B68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Unarmed_Sr_AD;                                     // 0x1B70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Unarmed_Ar_AD;                                     // 0x1B78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Unarmed_Ar_Crouch_AD;                              // 0x1B80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Unarmed_Alert_AD;                                  // 0x1B88(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Rifle_AD;                                          // 0x1B90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Pistol_AD;                                         // 0x1B98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotCharacterAnimData*          Pistol_OneHanded_AD;                               // 0x1BA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  AvoidingCharacter;                                 // 0x1BA8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIMoveDataBlock                      MoveDataOverride;                                  // 0x1BB0(0x98)(NativeAccessSpecifierPublic)
	struct FAIMoveDataBlock                      CurMoveDataBlock;                                  // 0x1C48(0x98)(Edit, NativeAccessSpecifierPublic)
	struct FAIMovementStyleData                  MovementStyleData;                                 // 0x1CE0(0x40)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2486[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Stress;                                            // 0x1D24(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartingStress;                                    // 0x1D28(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastShot;                                 // 0x1D2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceArrest;                                   // 0x1D30(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasPlayedSurrenderAnim;                           // 0x1D34(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFakeSurrender;                                  // 0x1D35(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasEverFakeSurrendered;                           // 0x1D36(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFinishedEquippingLoadout;                         // 0x1D37(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFinishedEquippingArmour;                          // 0x1D38(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceFiringEnabled;                               // 0x1D39(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2488[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacterMesh                        CharacterMeshData;                                 // 0x1D40(0x88)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_2489[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAimedAt;                                         // 0x1DD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_248A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAimingAtTarget : 1;                               // Mask: 0x1, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasEverAimedAtTarget : 1;                         // Mask: 0x2, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsFleeing : 1;                                    // Mask: 0x4, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsExitingLandmark : 1;                            // Mask: 0x8, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawingWeapon : 1;                                // Mask: 0x10, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPickingUpWeapon : 1;                              // Mask: 0x20, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasDamagedSWATTeam : 1;                           // Mask: 0x40, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHitScannedFriendly : 1;                           // Mask: 0x80, PropSize: 0x10x1DE8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDiedWhilstTraversingHole : 1;                     // Mask: 0x1, PropSize: 0x10x1DE9(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDiedWhilstHiding : 1;                             // Mask: 0x2, PropSize: 0x10x1DE9(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRaisingWeapon : 1;                              // Mask: 0x4, PropSize: 0x10x1DE9(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsLoweringWeapon : 1;                             // Mask: 0x8, PropSize: 0x10x1DE9(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_161 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_248B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DrawingWeaponTime;                                 // 0x1DEC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PickingUpWeaponTime;                               // 0x1DF0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RaisingWeaponTime;                                 // 0x1DF4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoweringWeaponTime;                                // 0x1DF8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            CachedHitScanResult;                               // 0x1DFC(0x88)(BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_248D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWorldBuildingAnimState               Rep_WorldBuildingAnimState;                        // 0x1E88(0x10)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FTakeHostageAnimState                 Rep_TakeHostageAnimState;                          // 0x1E98(0x18)(BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_248E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         HostageMasterIdleLoop;                             // 0x1EB8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         HostageSlaveIdleLoop;                              // 0x1EC0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  TakenHostageBy;                                    // 0x1EC8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_248F[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSurrendered;                                   // 0x1EFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsComplying : 1;                                  // Mask: 0x1, PropSize: 0x10x1F00(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsWaiting : 1;                                    // Mask: 0x2, PropSize: 0x10x1F00(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_162 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2490[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PepperSprayAbuseLevel;                             // 0x1F04(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastTasered;                              // 0x1F08(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TimesTasered;                                      // 0x1F0C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               RagdollMeshLocation;                               // 0x1F10(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              RagdollMeshRotation;                               // 0x1F1C(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2492[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HesitationTime;                                    // 0x1F2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2493[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FocalPointInterpSpeed;                             // 0x1F58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAlphaBlendOption                 FocalPointInterpCurve;                             // 0x1F5C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAlphaBlendOption                 AimOffsetInterpCurve;                              // 0x1F5D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2494[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FocusTurnSpeed;                                    // 0x1F60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnDegreesPerSecond;                              // 0x1F64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActorRotationInterpStandingSpeed;                  // 0x1F68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActorRotationInterpMovingSpeed;                    // 0x1F6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimOffsetInterpSpeed;                              // 0x1F70(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2496[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UEnvQuery*                             EscapeGasQuery;                                    // 0x1F78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASafeZoneVolume*                       LastUsedSafeZone;                                  // 0x1F80(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                      DebugAISelectionWidget;                            // 0x1F88(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACyberneticCharacter* GetDefaultObj();

	bool WasRecentlyYelledAt(float Seconds);
	bool SurrenderExit(enum class ESurrenderExitType ExitType, const struct FVector& FocalPoint);
	void Surrender();
	void StopPlayingDead();
	void PlayShootingWeaponConversation();
	bool PlayMontageWithFocalPoint(class UAnimMontage* Montage, struct FVector& FocalPoint);
	class UAnimMontage* PlayMontageFromTableWithIndexWithFocalPoint(const class FString& Animation, int32 Index, struct FVector& FocalPoint);
	class UAnimMontage* PlayMontageFromTableWithFocalPoint(const class FString& Animation, struct FVector& FocalPoint);
	void PlayDead(float Duration, bool bPlayVO);
	void PlayBarkOrStartConversation(const class FString& SpeechRow, bool bHasSharedCooldown, float Cooldown);
	void OnWeaponForceFireNotifyEvent__DelegateSignature();
	void OnSurrendered__DelegateSignature(class AReadyOrNotCharacter* Character);
	void OnSpottedCharacter__DelegateSignature(class ACyberneticCharacter* Spotter, class AReadyOrNotCharacter* Character);
	void OnSensedCharacter__DelegateSignature(class AReadyOrNotCharacter* Character);
	void OnSensedActor__DelegateSignature(class AActor* Actor);
	void OnRep_SimulatingAttachedStaticMeshes();
	void OnRep_CharacterMeshData();
	void OnRep_AttachedSkeletalMeshData();
	void OnRep_AttachedMeshData();
	void OnOfficerShouted(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void OnHeardOfficerYellSignature__DelegateSignature(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void OnGetupAfterRagdollComplete();
	void OnExitedSurrender__DelegateSignature(class ACyberneticCharacter* Character, enum class ESurrenderExitType ExitType);
	void OnDoorBreachNotifyEvent__DelegateSignature();
	void OnCollectPendingEvidenceNotify__DelegateSignature();
	void OnAimedAt__DelegateSignature(class ACyberneticCharacter* Character, class AReadyOrNotCharacter* Target);
	void OnAIFire__DelegateSignature(class ACyberneticCharacter* AICharacter, class ABaseMagazineWeapon* MagazineWeapon, const struct FVector& FireDirection);
	void Multicast_SendCharacterMeshData(const struct FCharacterMesh& RPC_CharacterMeshData);
	void Multicast_PlayArmourHitEffects(class ABaseArmour* Armour, const struct FHitResult& Hit, class AController* HitInstigator);
	void Knockout(float Duration, bool bPlayVO);
	bool IsWearingHeadArmor();
	bool IsWearingExplosiveVest();
	bool IsUnjustifiedUseOfForce(class AReadyOrNotCharacter* Aggressor, class ABaseItem* ForceWeapon, class UDamageType* ForceUsed);
	bool IsTakingHostage();
	bool IsTakingCoverAtLandmark();
	bool IsTakingCover();
	bool IsSameFaction(class ACyberneticCharacter* OtherAI);
	bool IsRaisingWeapon();
	bool IsPlayingStunAnimation();
	bool IsPlayingDead();
	bool IsMovingToLandmarkCover();
	bool IsMovingToCover();
	bool IsLoweringWeapon();
	bool IsHiding();
	bool IsHesitatingFor(float Seconds);
	bool IsHesitating();
	bool IsFiringFromCover();
	bool IsExitingSurrender();
	bool IsEndingHostageTake();
	bool IsDamagedByLethal();
	bool IsDamagedByLessLethal();
	bool IsBeingTakenHostage();
	bool IsBeginningHostageTake();
	bool IsArrestCapable(class APlayerCharacter* PlayerCharacter);
	bool IsActiveForCombat();
	void IncreaseStress(float Amount);
	bool HasLineOfSightToCharacter(class AReadyOrNotCharacter* InCharacter);
	bool HasDamagedSWAT();
	float GetVisibleSWATPercentage();
	struct FRotator GetLookAtRotation(float YawLimit, float PitchLimit);
	float GetHesitationTime();
	struct FVector GetFocalPoint();
	TArray<struct FDebugData> GetDebugInfoOnROE();
	class ACyberneticController* GetCyberneticsController();
	class ABaseArmour* GetArmour();
	class UAIArchetypeData* GetAIArchetype();
	void ForceFireGun(float Chance);
	void FakeSurrender();
	void DrawWeapon();
	enum class ESurrenderExitType DetermineSurrenderExitType();
	void DecreaseStress(float Amount);
	bool CanExitSurrender();
	bool CanEverSuicide();
	void AIFinishedSpawningDelegate__DelegateSignature();
};

// 0x0 (0x1F90 - 0x1F90)
// Class ReadyOrNot.CivilianCharacter
class ACivilianCharacter : public ACyberneticCharacter
{
public:

	static class UClass* StaticClass();
	static class ACivilianCharacter* GetDefaultObj();

};

// 0x8 (0x418 - 0x410)
// Class ReadyOrNot.CivilianCombatActivity
class UCivilianCombatActivity : public UBaseCombatActivity
{
public:
	class UCivilianFleeCombatMove*               CivilianFleeCombatMove;                            // 0x410(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCivilianCombatActivity* GetDefaultObj();

};

// 0x5B0 (0x8D8 - 0x328)
// Class ReadyOrNot.CyberneticController
class ACyberneticController : public AAIController
{
public:
	uint8                                        Pad_24DD[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAIAction*>                     CustomActions;                                     // 0x338(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAIPerceptionComponent*                AIPerceptionComponent;                             // 0x348(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReadyOrNotAISenseConfig_Sight*        SightConfig;                                       // 0x350(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAISenseConfig_Touch*                  TouchConfig;                                       // 0x358(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAISenseConfig_Damage*                 DamageConfig;                                      // 0x360(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAISenseConfig_Hearing*                HearingConfig;                                     // 0x368(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoraleComponent*                      MoraleComponent;                                   // 0x370(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTargetingComponent*                   TargetingComponent;                                // 0x378(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AActor*, float>                   LastHeardActorTime;                                // 0x380(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      SensingCharacter;                                  // 0x3D0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                LastSensedActor;                                   // 0x3D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  HeardActorInstigator;                              // 0x3E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  LastSensedCharacter;                               // 0x3E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastSensedLocation;                                // 0x3F0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanOpenDoorThroughNavLink : 1;                    // Mask: 0x1, PropSize: 0x10x3FC(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_163 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24DE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceLastMove;                                 // 0x400(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilRecentlySeenCharactersClear;              // 0x404(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          RecentlySeenSwat;                                  // 0x408(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          RecentlySeenSuspects;                              // 0x418(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          RecentlySeenCivilians;                             // 0x428(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAsyncPathFound;                                  // 0x438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_24DF[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastAcceptanceRadius;                              // 0x4A8(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AReadyOrNotCharacter*, float>     DamagedBy;                                         // 0x4B0(0x50)(NativeAccessSpecifierPublic)
	TMap<class AReadyOrNotCharacter*, struct FVector> DamagedByLocation;                                 // 0x500(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_24E1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInvestigateStimulusActivity*          InvestigateStimulusActivity;                       // 0x558(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24E2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAwarenessStateChangedDelegate;                   // 0x568(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	enum class EAIAwarenessState                 PreviousAwarenessState;                            // 0x578(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EAIAwarenessState                 AwarenessState;                                    // 0x579(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_24E3[0x32];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAIStimulus                           LatestStimulus;                                    // 0x5AC(0x3C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIStimulus                           LatestSightStimulus;                               // 0x5E8(0x3C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIStimulus                           LatestHearingStimulus;                             // 0x624(0x3C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIStimulus                           LatestDamageStimulus;                              // 0x660(0x3C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24E4[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        TrackedDistractions;                               // 0x6B0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_24E5[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMoveComplete;                                    // 0x6E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FActorSense>                   ActorSightSenseMap;                                // 0x6F0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActorSense>                   ActorSoundSenseMap;                                // 0x700(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActorSense>                   ActorDamageSenseMap;                               // 0x710(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bStopDecisionMaking : 1;                           // Mask: 0x1, PropSize: 0x10x720(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_164 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24E6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBaseActivity*                         CurrentActivity;                                   // 0x728(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UBaseActivity*>                 ActivityQueue;                                     // 0x730(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_24E7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CallForHelpCoolDownDuration;                       // 0x750(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxHearingForHelpDistance;                         // 0x754(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlashLightSeenCoolDownDuration;                    // 0x758(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDisableSensePerception : 1;                       // Mask: 0x1, PropSize: 0x10x75C(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_165 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24E8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FExposedToNoise>    ExposedToStimulusTags;                             // 0x760(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_24E9[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceLastExposedToAggressiveStimulus;          // 0x808(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastExposedToAnyStimulus;                 // 0x80C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastExposedToSightStimulus;               // 0x810(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastExposedToSoundStimulus;               // 0x814(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEverHeardAggressiveStimulus : 1;                  // Mask: 0x1, PropSize: 0x10x818(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_166 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UnalertTime;                                       // 0x81C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlertTime;                                         // 0x820(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SuspiciousTime;                                    // 0x824(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasEverHeardSwat;                                 // 0x828(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24EB[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBaseCombatActivity*                   CombatActivity;                                    // 0x840(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24EC[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMoveToActivity*                       MoveToActivity;                                    // 0x898(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveActivity*                         TeamMoveActivity;                                  // 0x8A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveToActivity*                       PushMoveToActivity;                                // 0x8A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveToActivity*                       AvoidanceMoveToActivity;                           // 0x8B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveToExitActivity*                   MoveToExitActivity;                                // 0x8B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetNextCivilianActivity*           TargetNextCivilianActivity;                        // 0x8C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 LastHeardDoorKick;                                 // 0x8C8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24ED[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACyberneticController* GetDefaultObj();

	int32 RequestMoveAsync(const struct FVector& Location, bool bProjectToNavigation, float AcceptanceRadius);
	void RemoveAllActivitiesExcept(TSubclassOf<class UBaseActivity> ActivityType);
	void RemoveActivitiesOfType(TSubclassOf<class UBaseActivity> ActivityType, bool bClearCurrent);
	void OnStunDamageTaken(enum class EStunType StunType);
	void OnPerceptionUpdated(TArray<class AActor*>& TestActors);
	void OnKnownNeutralTakeDamage_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownNeutralTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownNeutralStunned_Blueprint(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownNeutralStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownNeutralKilled_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownNeutralKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownNeutralIncapacitated_Blueprint(class AReadyOrNotCharacter* IncapacitatedCharacter);
	void OnKnownNeutralIncapacitated(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnKnownFriendlyTakeDamage_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownFriendlyTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownFriendlyStunned_Blueprint(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownFriendlyStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownFriendlyKilled_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownFriendlyKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownFriendlyIncapacitated_Blueprint(class AReadyOrNotCharacter* IncapacitatedCharacter);
	void OnKnownFriendlyIncapacitated(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnKnownEnemyTakeDamage_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownEnemyTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnKnownEnemyStunned_Blueprint(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownEnemyStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnKnownEnemyKilled_Blueprint(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownEnemyKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnKnownEnemyIncapacitated_Blueprint(class AReadyOrNotCharacter* IncapacitatedCharacter);
	void OnKnownEnemyIncapacitated(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnDoorExploded(class ADoor* Door, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnAIMoveCompleted__DelegateSignature(class AAIController* Controller, int32 RequestID);
	void OnAIFinishSpawning();
	void OnActivityComplete__DelegateSignature(class UBaseActivity* CompletedActivity, class UBaseActivity* NextActivity, bool bSuccessfullyCompleted);
	bool IsTagInvestigativeNoise(class FName& Tag);
	bool IsTagAggressiveNoise(class FName& Tag);
	bool IsSWAT();
	bool IsSuspect();
	bool IsMovingForRequests(const TArray<struct FAIRequestID>& Requests);
	bool IsMovingForRequest(int32 RequestID);
	bool IsMoving();
	bool IsLastAlive();
	bool IsFindingPath(int32 PathId);
	bool IsFindingAnyPath();
	bool IsCivilian();
	bool IsCharacterNeutral(class AReadyOrNotCharacter* InCharacter);
	bool IsCharacterKnownEnemy(class AReadyOrNotCharacter* InCharacter);
	bool IsCharacterFriendly(class AReadyOrNotCharacter* InCharacter);
	bool IsCharacterEnemy(class AReadyOrNotCharacter* InCharacter);
	bool IsActivelyMovingOnPath();
	bool HasRecentlySeenSwat(struct FVector* OutLocation);
	bool HasRecentlySeenSuspect();
	bool HasRecentlySeenCivilian();
	bool HasBeenExposedToAnyNoise_Tag(class FName* OutTag, float SinceSeconds, float MaxDistance, int32 TargetTypeMask);
	bool HasBeenExposedToAnyNoise(float SinceSeconds, float MaxDistance, int32 TargetTypeMask);
	bool HasBeenExposedToAggressiveNoise_Tag(class FName* OutTag, float SinceSeconds, float MaxDistance, int32 TargetTypeMask);
	bool HasBeenExposedToAggressiveNoise(float SinceSeconds, float MaxDistance, int32 TargetTypeMask);
	bool HasActivityType(TSubclassOf<class UBaseActivity> ActivityType);
	class AReadyOrNotCharacter* GetTrackedTarget();
	float GetTimeSinceLastMove();
	enum class ETeamType GetTeam();
	class UTargetNextCivilianActivity* GetTargetNextCivilianActivity();
	int32 GetSuccessConsiderCountForAction(class FName Action);
	class UMoveToActivity* GetPushMoveToActivity();
	TSubclassOf<class UNavigationQueryFilter> GetNavQueryFilter();
	class UMoveToExitActivity* GetMoveToExitActivity();
	class UMoveToActivity* GetMoveToActivity();
	class UMoveActivity* GetMoveActivity();
	struct FAIStimulus GetLatestStimulus();
	class AReadyOrNotCharacter* GetHeardActorInstigator();
	int32 GetFailedConsiderCountForAction(class FName Action);
	class UBaseCombatActivity* GetCombatActivity();
	class ACyberneticCharacter* GetCharacter();
	enum class EAIAwarenessState GetAwarenessState();
	class UMoveToActivity* GetAvoidanceMoveToActivity();
	int32 GetActivityQueueCount();
	class FString GetActivityQueueAsString();
	class UBaseActivity* GetActivity(TSubclassOf<class UBaseActivity> ActivityType);
	void FinishActivity(class UBaseActivity* Activity, bool bSuccess, bool bForce);
	bool DoesPathGoThroughDoor(class ADoor** Door);
	bool DoesCharacterMatchTargetType(class AReadyOrNotCharacter* InCharacter, int32 TargetTypeMask);
	void AwarenessChangeEvent__DelegateSignature(class ACyberneticController* Controller, enum class EAIAwarenessState Previous, enum class EAIAwarenessState Current);
	void AsyncPathFoundDelegate__DelegateSignature(int32 PathId, enum class ERonNavigationQueryResult Result);
	void AddExposedToStimulusTag(class FName& Tag, const struct FVector& StimulusLocation, bool bFriendly, class AReadyOrNotCharacter* StimulusInstigator, float ExpiryTime);
	bool AddActivity(class UBaseActivity* Activity, bool bOverrideCurrentActivity);
	void AbortMove(bool bKeepVelocity);
	void AbortCoverLandmark();
	void AbortCover();
};

// 0x0 (0x8D8 - 0x8D8)
// Class ReadyOrNot.CivilianController
class ACivilianController : public ACyberneticController
{
public:

	static class UClass* StaticClass();
	static class ACivilianController* GetDefaultObj();

};

// 0x8 (0x1D0 - 0x1C8)
// Class ReadyOrNot.CivilianFleeCombatMove
class UCivilianFleeCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_24F1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCivilianFleeCombatMove* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.ClearWeaponAnimNotify
class UClearWeaponAnimNotify : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UClearWeaponAnimNotify* GetDefaultObj();

};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.Collectable
class ACollectable : public AActor
{
public:
	uint8                                        Pad_24F2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ItemName;                                          // 0x228(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ItemDescription;                                   // 0x240(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                          RequiredTags;                                      // 0x258(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UProgressionRequirement*>       RequiredProgression;                               // 0x268(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACollectable* GetDefaultObj();

};

// 0x88 (0x2A8 - 0x220)
// Class ReadyOrNot.CollectableViewController
class ACollectableViewController : public AActor
{
public:
	float                                        RotationSpeed;                                     // 0x220(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ScaleLevels;                                       // 0x224(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ScaleSpeed;                                        // 0x228(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinimumScale;                                      // 0x22C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaximumScale;                                      // 0x230(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalFOV;                                       // 0x234(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACameraActor*                          CameraActor;                                       // 0x238(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                SpawnPointActor;                                   // 0x240(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACollectable*                          CollectableActor;                                  // 0x248(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotPlayerController*           CurrentController;                                 // 0x250(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCollectableWidget*                    CollectableWidget;                                 // 0x258(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24F3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ADirectionalLight*>             HiddenDirectionalLights;                           // 0x268(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ASkyLight*>                     HiddenSkyLights;                                   // 0x278(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class APostProcessVolume*>            HiddenPostProcessVolumes;                          // 0x288(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AExponentialHeightFog*>         HiddenExponentialHeightFogs;                       // 0x298(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ACollectableViewController* GetDefaultObj();

};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.CollectableViewer
class ACollectableViewer : public AActor
{
public:
	uint8                                        Pad_24F4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ACollectable>              CollectableClass;                                  // 0x228(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACollectableViewController*            ViewController;                                    // 0x238(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ACollectableViewer* GetDefaultObj();

};

// 0x8 (0x328 - 0x320)
// Class ReadyOrNot.CollectableWidget
class UCollectableWidget : public UCommonActivatableWidget
{
public:
	class ACollectableViewController*            ParentController;                                  // 0x320(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCollectableWidget* GetDefaultObj();

	void SetItem(class ACollectable* Collectable);
	void CloseCollectableWidget();
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.CollectedEvidenceActor
class ACollectedEvidenceActor : public AActor
{
public:
	uint8                                        Pad_24F5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  CollectionBagMesh;                                 // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Bag_Spawn_Sound;                                   // 0x230(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACollectedEvidenceActor* GetDefaultObj();

	void Server_PlaySpawnSound();
	void PlaySpawnSound();
	void Multicast_PlaySpawnSound();
};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.CollectEvidenceActivity
class UCollectEvidenceActivity : public UBaseActivity
{
public:
	class AActor*                                EvidenceItem;                                      // 0x198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24F7[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCollectEvidenceActivity* GetDefaultObj();

	void TickCollectStage(float DeltaTime, float Uptime);
	void OnEvidenceCollected();
	void OnCollectEvidenceEnd();
	void OnCollectEvidenceBegin();
	void EnterMoveToStage();
	void EnterCollectStage();
	bool CanCollectEvidence();
};

// 0x2D8 (0xA48 - 0x770)
// Class ReadyOrNot.CoopGM
class ACoopGM : public AReadyOrNotGameMode
{
public:
	uint8                                        Pad_24FB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAllAISpawned;                                    // 0x778(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AWorldDataGenerator*                   WorldDataGenerator;                                // 0x788(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECOOPMode                         Mode;                                              // 0x790(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_24FC[0x27];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AActor>                    KilledSuspectAvoidanceShape;                       // 0x7B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNegotiatorActive;                                 // 0x7C0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAIEquipSameLoadoutAsPlayer;                       // 0x7C1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24FD[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxHostagesKilledBeforeMissionFailed;              // 0x7C4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxTeamKillsBeforeAIRetaliates;                    // 0x7C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24FE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ACyberneticCharacter>      SwatAlphaClass;                                    // 0x7D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACyberneticCharacter>      SwatBetaClass;                                     // 0x7D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACyberneticCharacter>      SwatCharlieClass;                                  // 0x7E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACyberneticCharacter>      SwatDeltaClass;                                    // 0x7E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACyberneticCharacter>      SwatTrailerClass;                                  // 0x7F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAIController>             FriendlyAIController;                              // 0x7F8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSavedLoadout                         FriendlyAILoadout;                                 // 0x800(0x188)(Edit, NativeAccessSpecifierPublic)
	TSubclassOf<class AEvidenceActor>            EvidenceClass;                                     // 0x988(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMissionEnded;                                    // 0x990(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               GameStartedWidget;                                 // 0x9A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                    KeycardClass;                                      // 0x9A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AI_SpawnTag;                                       // 0x9B0(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEvidenceActor*>                EvidenceInWorld;                                   // 0x9B8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        NextHighgroundDesignation;                         // 0x9C8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24FF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AHighgroundVolume*>             Highground;                                        // 0x9D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUniqueOfficerSoundsets;                           // 0x9E0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2500[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPickedOfficerSoundsets;                         // 0x9E4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PickedOfficerSoundsets;                            // 0x9E8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2501[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ASWATCharacter*>                SpawnedSWATAI;                                     // 0x9F0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATrailerSWATCharacter*>         SpawnedTrailerSWATAI;                              // 0xA00(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AAISpawn*>                      SpawnLaterSpawns;                                  // 0xA10(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        AISpawnDistance;                                   // 0xA20(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2502[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             NegFeedback;                                       // 0xA28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             PosFeedBack;                                       // 0xA30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         KickedDoorsTriggeredMoraleChange;                  // 0xA38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ACoopGM* GetDefaultObj();

	void StartMissionEndTimer(bool bWon);
	void SpawnSuspectsAndHostages();
	void SpawnPolice();
	void Server_SoftClearVoteCheck();
	void ReturnToStation();
	void RemoveAllSpawnedAI();
	void Personnel_SpawnVentilation(int32 PersonnelNum, int32 MapPointNum);
	void Personnel_SpawnTruckDriver(int32 PersonnelNum, int32 MapPointNum);
	void Personnel_SpawnPowerCrew();
	void Personnel_SpawnOperator(int32 PersonnelNum, int32 MapPointNum, bool bNoisemaker);
	void Personnel_SpawnNegotiator();
	void Personnel_SpawnHighground(int32 PersonnelNum, int32 MapPointNum, bool bSpotter, bool bMarksman, bool bSniper);
	void OnMissionEnded__DelegateSignature(bool bMissionSucceded);
	void MissionEnd(bool bSuccess);
	void IncapHumanKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AIncapacitatedHuman* KilledHuman);
	enum class ECOOPMode GetCOOPMode();
	void FriendlyAIKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	class APlayerStart* FindPlayerStartForTeam(enum class ETeamType Team);
	void AllAISpawnedDelegate__DelegateSignature();
	void AISurrendered(class AReadyOrNotCharacter* Character);
	void AIKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void AIIncapacitated(class AReadyOrNotCharacter* Incapacitated, class AReadyOrNotCharacter* InstigatorCharacter);
	void AIArrested(class AReadyOrNotCharacter* ArrestedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
};

// 0x28 (0xA70 - 0xA48)
// Class ReadyOrNot.CommanderGM
class ACommanderGM : public ACoopGM
{
public:
	class UCommanderProfile*                     CommanderProfile;                                  // 0xA48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URosterManager*                        RosterManager;                                     // 0xA50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AExfilPortal>              ExfilPortalClass;                                  // 0xA58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2503[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACommanderGM* GetDefaultObj();

};

// 0x100 (0x8E0 - 0x7E0)
// Class ReadyOrNot.CoopGS
class ACoopGS : public AReadyOrNotGameState
{
public:
	uint8                                        Pad_2509[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bMissionSucceded;                                  // 0x7F0(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMissionSoftCompleted;                             // 0x7F1(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECOOPMode                         Mode;                                              // 0x7F2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouchingTigerHiddenDragon;                       // 0x7F3(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentDeployables;                                // 0x7F4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                DeployableDepot;                                   // 0x7F8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DepotLabel;                                        // 0x800(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DepotNumber;                                       // 0x808(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DepotCost;                                         // 0x80C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentPersonnel;                                  // 0x810(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentUsedPersonnelPoints;                        // 0x814(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                           PersonnelMapping;                                  // 0x818(0x50)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                        TotalAIOfficers;                                   // 0x868(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalOfficers;                                     // 0x86C(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumCompleteExtraObjectives;                        // 0x870(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTotalExtraObjectives;                           // 0x874(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TeamKills;                                         // 0x878(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllPlayerCharactesDead;                           // 0x87C(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SquadPointsRemaining;                              // 0x880(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESelectedSpawn                    SelectedRedSpawnPoint;                             // 0x884(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RedSpawnSquadPoints;                               // 0x888(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESelectedSpawn                    SelectedBlueSpawnPoint;                            // 0x88C(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlueSpawnSquadPoints;                              // 0x890(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            MissionMusic;                                      // 0x898(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFMODEventInstance                    MusicInstance;                                     // 0x8A0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                  PromotedLeaderFormat;                              // 0x8A8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        YesVotes;                                          // 0x8C0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NoVotes;                                           // 0x8C4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TOCDelay;                                          // 0x8D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_250F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACoopGS* GetDefaultObj();

	void UpdateVotes(int32 Yes, int32 No);
	void StartTOCBriefing(const class FString& TOCLine);
	void Server_SetDeployableDepot(class AReadyOrNotPlayerController* Controller, int32 NewDepotNum);
	bool PlayerControllerVoted(class AReadyOrNotPlayerController* PlayerController, bool bVoteYes);
	void OnRep_MapElement();
	void OnRep_COOPMode();
	void Multicast_OnMissionEnd(bool bSuccess);
	void Multicast_GrantProgressionTags(float ScorePercentage);
	void Multicast_BroadcastNewSquadLeader(class APlayerCharacter* NewLeader);
	bool IsPersonnelEnabled(int32 PersonnelNum);
	bool IsDeployableEnabled(int32 DeployableNumber);
	TArray<int32> GetUsedPersonnelPoints();
	TArray<int32> GetUnenabledPersonnel();
	TArray<int32> GetUnenabledDeployables();
	int32 GetPersonnelForMapNum(int32 MapPointNum);
	TArray<int32> GetEnabledPersonnel();
	TArray<class FText> GetEnabledDeployablesShortNames();
	TArray<int32> GetEnabledDeployables();
	bool CanChangeSpawn(bool bBlueTeam, enum class ESelectedSpawn NewSpawn);
};

// 0x0 (0x8E0 - 0x8E0)
// Class ReadyOrNot.CommanderGS
class ACommanderGS : public ACoopGS
{
public:

	static class UClass* StaticClass();
	static class ACommanderGS* GetDefaultObj();

};

// 0x180 (0x3F0 - 0x270)
// Class ReadyOrNot.CommanderProfile
class UCommanderProfile : public UBaseProfile
{
public:
	int32                                        CommanderVersion;                                  // 0x270(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2512[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCampaignData*                         Campaign;                                          // 0x278(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        CompletedLevels;                                   // 0x280(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        CompletedIronmanLevels;                            // 0x290(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        LostOfficers;                                      // 0x2A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2513[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        NewCompletedLevels;                                // 0x2A8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                            ProgressionTags;                                   // 0x2B8(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                             SaveDate;                                          // 0x308(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                             TotalPlaytime;                                     // 0x310(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIronmanMode;                                      // 0x318(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsModded;                                         // 0x319(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2514[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GameChecksum;                                      // 0x31C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReturningFromMission;                             // 0x320(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2515[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRosterSaveData                       RosterSaveData;                                    // 0x328(0x80)(NativeAccessSpecifierPublic)
	struct FLobbySaveData                        LobbySaveData;                                     // 0x3A8(0x38)(NativeAccessSpecifierPublic)
	uint8                                        Pad_2516[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommanderProfile* GetDefaultObj();

	class UCommanderProfile* LoadProfile(int32 Slot);
	bool IsChecksumMismatched();
	class FText GetNextLevelName(class FText CompletedText);
	TSoftObjectPtr<class UTexture2D> GetNextLevelImage();
	class FString GetNextLevel();
	class FText GetMostRecentLevelName(class FText NothingCompletedText);
	TSoftObjectPtr<class UTexture2D> GetMostRecentLevelImage();
	class UCommanderProfile* GetDebugProfile();
	float GetCompletionPercentage();
	void DeleteProfile();
};

// 0x40 (0x2A0 - 0x260)
// Class ReadyOrNot.CommandInterface
class UCommandInterface : public UUserWidget
{
public:
	class UImage*                                SelectionLeft;                                     // 0x260(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                SelectionRight;                                    // 0x268(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                SelectionUp;                                       // 0x270(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                SelectionDown;                                     // 0x278(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                MoveIn;                                            // 0x280(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                FallIn;                                            // 0x288(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                Cover;                                             // 0x290(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                Deploy;                                            // 0x298(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCommandInterface* GetDefaultObj();

	void SetRedColor();
	void SetGoldColor();
	void SetBlueColor();
	void EnableSelectionWidgets(const struct FVector2D& Selection);
	void DisableSelectionWidgets();
};

// 0x1128 (0x1388 - 0x260)
// Class ReadyOrNot.CommandWheel
class UCommandWheel : public UUserWidget
{
public:
	TSubclassOf<class ABaseGrenade>              Flashbang;                                         // 0x260(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseGrenade>              Stinger;                                           // 0x268(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseGrenade>              CSGas;                                             // 0x270(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           OpenIcon;                                          // 0x278(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           OpenDoorIcon;                                      // 0x300(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           KickIcon;                                          // 0x388(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           StackUpIcon;                                       // 0x410(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           CoverIcon;                                         // 0x498(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           MoveToIcon;                                        // 0x520(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           DeployIcon;                                        // 0x5A8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           RegroupIcon;                                       // 0x630(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           StingerIcon;                                       // 0x6B8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           TaserIcon;                                         // 0x740(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           BreachIcon;                                        // 0x7C8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           BreachShotgunIcon;                                 // 0x850(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           C2ChargeIcon;                                      // 0x8D8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           ClearIcon;                                         // 0x960(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           CSGasIcon;                                         // 0x9E8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           DeploySheildIcon;                                  // 0xA70(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           DetonatorIcon;                                     // 0xAF8(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           FlashbangIcon;                                     // 0xB80(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           PepperSprayIcon;                                   // 0xC08(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           CancelIcon;                                        // 0xC90(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           ConfirmIcon;                                       // 0xD18(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           ExecuteIcon;                                       // 0xDA0(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           DisarmTrapWirecuttersIcon;                         // 0xE28(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           DoorWedgeIcon;                                     // 0xEB0(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           MirrorGunIcon;                                     // 0xF38(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           RestrainIcon;                                      // 0xFC0(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           CloseDoorIcon;                                     // 0x1048(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                           ChemlightIcon;                                     // 0x10D0(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_251E[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           InnerWheel;                                        // 0x11F8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           OuterWheel;                                        // 0x1200(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                ThumbstickImage;                                   // 0x1208(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          CommandWheelCanvasPanel;                           // 0x1210(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            HeaderText;                                        // 0x1218(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              HeaderOverlay;                                     // 0x1220(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReadyOrNotCommandFunctionLibrary*     CommandLibrary;                                    // 0x1228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_251F[0x158];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommandWheel* GetDefaultObj();

	void SetOuterWheelDirection(const struct FVector& Direction);
	void SetOuterSegments(int32 Num);
	void SetInnerwheelOpacity(float Opacity);
	void SetInnerWheelDirection(const struct FVector& Direction);
	void SetInnerSegments(int32 Num);
	void RedrawCommandWheel();
	enum class ETeamType GetActiveTeamType();
	void CycleSwatElement(bool Next);
};

// 0x30 (0x1C8 - 0x198)
// Class ReadyOrNot.CommitSuicideActivity
class UCommitSuicideActivity : public UBaseActivity
{
public:
	uint8                                        Pad_2522[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommitSuicideActivity* GetDefaultObj();

	void SuicideActivityDelegate__DelegateSignature();
	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnMeleeHitTaken(class AReadyOrNotCharacter* InstigatorCharacter);
	void OnHeardYell(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void OnDamaged(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
};

// 0x10 (0x590 - 0x580)
// Class ReadyOrNot.CommonButtonStyleFMOD
class UCommonButtonStyleFMOD : public UCommonButtonStyle
{
public:
	class UFMODEvent*                            OnHoveredEvent;                                    // 0x580(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            OnClickedEvent;                                    // 0x588(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCommonButtonStyleFMOD* GetDefaultObj();

};

// 0x10 (0xBD0 - 0xBC0)
// Class ReadyOrNot.CommonButtonFMOD
class UCommonButtonFMOD : public UCommonButtonBase
{
public:
	class UFMODEvent*                            OnHoveredEvent;                                    // 0xBC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            OnClickedEvent;                                    // 0xBC8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCommonButtonFMOD* GetDefaultObj();

};

// 0x0 (0xBD0 - 0xBD0)
// Class ReadyOrNot.CommonButtonImplementation
class UCommonButtonImplementation : public UCommonButtonFMOD
{
public:

	static class UClass* StaticClass();
	static class UCommonButtonImplementation* GetDefaultObj();

	class UCommonTextBlock* BP_GetButtonLabel();
};

// 0x48 (0x368 - 0x320)
// Class ReadyOrNot.CommonFooterWidget
class UCommonFooterWidget : public UCommonActivatableWidget
{
public:
	FMulticastInlineDelegateProperty_            OnDismissInputAction;                              // 0x320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   DismissInputActionSettings;                        // 0x330(0x10)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bConsumeInput;                                     // 0x340(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsPersistent;                                     // 0x341(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOverrideInputActionText;                          // 0x342(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2523[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  OverrideInputActionText;                           // 0x348(0x18)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2524[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUsingGamepad;                                     // 0x364(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2525[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommonFooterWidget* GetDefaultObj();

	void RefreshWidget();
	void OnInputMethodChanged(enum class ECommonInputType InputMethod);
	void OnDismissInputActionProgressNative(float HeldPercent);
	void OnDismissInputActionNative();
	class FText GetFooterText();
	void BP_OnDismissInputAction();
	void BP_DismissInputActionProgress(float HeldTime);
};

// 0x0 (0xBD0 - 0xBD0)
// Class ReadyOrNot.CommonIconButtonBase
class UCommonIconButtonBase : public UCommonBoundActionButton
{
public:

	static class UClass* StaticClass();
	static class UCommonIconButtonBase* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class ReadyOrNot.CommonRichTextBlockImageDecorator
class UCommonRichTextBlockImageDecorator : public URichTextBlockImageDecorator
{
public:
	uint8                                        Pad_2526[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommonRichTextBlockImageDecorator* GetDefaultObj();

};

// 0x0 (0x190 - 0x190)
// Class ReadyOrNot.CommonTabListAnimationSwitcher
class UCommonTabListAnimationSwitcher : public UCommonAnimatedSwitcher
{
public:

	static class UClass* StaticClass();
	static class UCommonTabListAnimationSwitcher* GetDefaultObj();

};

// 0x8 (0x360 - 0x358)
// Class ReadyOrNot.CommonTabListWidgetImplementation
class UCommonTabListWidgetImplementation : public UCommonTabListWidgetBase
{
public:
	uint8                                        Pad_2527[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommonTabListWidgetImplementation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CompetitionHelperLib
class UCompetitionHelperLib : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCompetitionHelperLib* GetDefaultObj();

};

// 0x40 (0x2B8 - 0x278)
// Class ReadyOrNot.ConsoleContextSwitcher
class UConsoleContextSwitcher : public UBaseWidget
{
public:
	class UWidgetSwitcher*                       ContextSwitcher;                                   // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleSelection*                     GrenadeSelection;                                  // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleSelection*                     TacticalSelection;                                 // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleFireModes*                     FireModes;                                         // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleMagSelection*                  MagSelection;                                      // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      FadeIn;                                            // 0x2A0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      FadeOut;                                           // 0x2A8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2528[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleContextSwitcher* GetDefaultObj();

	void SwapToTactical();
	void SwapToMag(class ABaseMagazineWeapon* MagazineWeapon);
	void SwapToGrenades();
	void SwapToFireModes();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.ConsoleFireMode
class UConsoleFireMode : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UConsoleFireMode* GetDefaultObj();

};

// 0x20 (0x280 - 0x260)
// Class ReadyOrNot.ConsoleFireModes
class UConsoleFireModes : public UUserWidget
{
public:
	class UUserWidget*                           FireModeSafe;                                      // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           FireModeSingle;                                    // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           FireModeBurst;                                     // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           FireModeAuto;                                      // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UConsoleFireModes* GetDefaultObj();

	void OnFireModeChanged(class APlayerCharacter* PlayerCharacter, enum class EFireMode NewFireMode, enum class EFireMode LastFireMode);
	void OnEquipped(class ABaseItem* Item);
};

// 0x120 (0x380 - 0x260)
// Class ReadyOrNot.ConsoleHotkey
class UConsoleHotkey : public UUserWidget
{
public:
	struct FSlateBrush                           Button_Brush;                                      // 0x260(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	class UImage*                                Button_Image;                                      // 0x2E8(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           Icon_Brush;                                        // 0x2F0(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	class UImage*                                Icon_Image;                                        // 0x378(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UConsoleHotkey* GetDefaultObj();

};

// 0x50 (0x2B0 - 0x260)
// Class ReadyOrNot.ConsoleHotkeys
class UConsoleHotkeys : public UUserWidget
{
public:
	class UConsoleHotkey*                        Hotkey_NVG;                                        // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleHotkey*                        Hotkey_Laser;                                      // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleHotkey*                        Hotkey_Firemode;                                   // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleHotkey*                        Hotkey_TeamView;                                   // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleHotkey*                        Hotkey_Chemlight;                                  // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConsoleHotkey*                        Hotkey_ItemWheel;                                  // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_252A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x298(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABaseItem*                             CurrentItem;                                       // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_252B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleHotkeys* GetDefaultObj();

	void SetLayout(enum class EConsoleHotkeysLayout Layout);
	void RefreshHotkeys();
	void ItemEquipped(class ABaseItem* Item);
};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.MenuWidget
class UMenuWidget : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class UMenuWidget* GetDefaultObj();

	void PlayWidgetAnimation_Internal(class UWidgetAnimation* InWidgetAnimation, bool bRestartIfAlreadyPlaying);
	void BP_OnShow();
};

// 0x8 (0x328 - 0x320)
// Class ReadyOrNot.ConsoleLobbyManager
class UConsoleLobbyManager : public UMenuWidget
{
public:
	class UCommonActivatableWidgetStack*         WidgetStack;                                       // 0x320(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConsoleLobbyManager* GetDefaultObj();

	void SetLobbyPrivacy(enum class ELobbyPrivacy Privacy);
};

// 0x10 (0x270 - 0x260)
// Class ReadyOrNot.ConsoleMagSelection
class UConsoleMagSelection : public UUserWidget
{
public:
	class UHorizontalBox*                        Container;                                         // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UConsoleMagSelection* GetDefaultObj();

	void OnWeaponFired(class ABaseWeapon* Weapon);
	void OnMagCheck(class ABaseMagazineWeapon* MagazineWeapon);
};

// 0x30 (0x290 - 0x260)
// Class ReadyOrNot.ConsoleMagSelectionItem
class UConsoleMagSelectionItem : public UUserWidget
{
public:
	class UMaterial*                             MagazineMaterial;                                  // 0x260(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                MagazineIcon;                                      // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                SelectedIcon;                                      // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            MagazineText;                                      // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              MagazineMaterialDynamic;                           // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_252D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleMagSelectionItem* GetDefaultObj();

	void UpdateMagPercentage(float Percentage);
	void SetSelected(bool bCond);
	void SetMagIndex(int32 Index);
	int32 GetMagIndex();
};

// 0x100 (0x128 - 0x28)
// Class ReadyOrNot.ConsoleMultiplayerManager
class UConsoleMultiplayerManager : public UObject
{
public:
	uint8                                        Pad_252E[0x100];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleMultiplayerManager* GetDefaultObj();

};

// 0x28 (0x288 - 0x260)
// Class ReadyOrNot.ConsoleSelection
class UConsoleSelection : public UUserWidget
{
public:
	class UHorizontalBox*                        Container;                                         // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Button;                                            // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                ButtonName;                                        // 0x270(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EItemCategory                     ItemCategory;                                      // 0x280(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_252F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleSelection* GetDefaultObj();

	void ItemRemoved(class ABaseItem* Item);
	void ItemEquipped(class ABaseItem* Item);
	void ItemAdded(class ABaseItem* Item);
};

// 0x28 (0x288 - 0x260)
// Class ReadyOrNot.ConsoleSelectionItem
class UConsoleSelectionItem : public UUserWidget
{
public:
	class FString                                Name;                                              // 0x260(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Count;                                             // 0x270(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2530[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UImage*                                Icon_Image;                                        // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Selected_Image;                                    // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UConsoleSelectionItem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ControllableByTablet
class IControllableByTablet : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IControllableByTablet* GetDefaultObj();

	void HideActorsForTabletView(class USceneCaptureComponent2D* Component);
	enum class ETeamType GetTabletViewTeamColor();
	class FName GetTabletViewSocket();
	class USceneComponent* GetTabletViewComponent();
	class FText GetTabletNameText();
	bool CanTabletViewMe(class APlayerCharacter* TabletOwner, class AReadyOrNotGameState* GameState);
	bool CanControlWithTablet(class APlayerCharacter* TabletOwner);
	void AssumeTabletControl(class APlayerCharacter* TabletOwner);
};

// 0xF0 (0x350 - 0x260)
// Class ReadyOrNot.ControlsBind
class UControlsBind : public UUserWidget
{
public:
	bool                                         IsAxis;                                            // 0x260(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_253B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BindIndex;                                         // 0x264(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ListeningForKeystrokes;                            // 0x268(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_253C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FKey                                  PendingNewKey;                                     // 0x270(0x18)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            DescriptionWidget;                                 // 0x288(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            BindNotificationWidget;                            // 0x290(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BindName;                                          // 0x298(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  BindFriendlyName;                                  // 0x2A0(0x18)(BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	float                                        AxisScale;                                         // 0x2B8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EInputKeyCategoryV2               KeyCategory;                                       // 0x2BC(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_253D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USettingsMenuGamepad*                  SettingsMenu;                                      // 0x2C0(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxisMappingStruct                    AxisMappingData;                                   // 0x2C8(0x28)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FActionMappingStruct                  ActionMappingData;                                 // 0x2F0(0x28)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                  UnboundText;                                       // 0x318(0x18)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                          ConflictBindFriendlyNamesList;                     // 0x330(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTextBlock*                            BindingText;                                       // 0x340(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Button_Selected;                                   // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UControlsBind* GetDefaultObj();

	void SetKeybindingText();
	void ResetBinding();
	void RemoveConflictKeybinds(const TArray<struct FAxisMappingStruct>& AxesList, const TArray<struct FActionMappingStruct>& ActionsList);
	bool RebindKey(const struct FKey& NewKey);
	void GetInputBindingData(int32 Index, struct FAxisMappingStruct* AxisMapping, struct FActionMappingStruct* ActionMapping);
	class FText GetConflictingKeybindText(class FText RequiredKeybindName);
	void GetConflictingKeybindsWhenValid(const TArray<struct FAxisMappingStruct>& AxesList, const TArray<struct FActionMappingStruct>& ActionsList, bool* HasConflict, TArray<struct FAxisMappingStruct>* ConflictingAxes, TArray<struct FActionMappingStruct>* ConflictingActions);
	class FText CheckConflictingKeybindsAreUnbindable(const TArray<struct FAxisMappingStruct>& AxesList, const TArray<struct FActionMappingStruct>& ActionsList);
	void BindingFinished();
	void AddKeybindsToList(const TArray<struct FKeyBinding>& Keybinds, class FName MappingName, float Scale, TArray<struct FAxisMappingStruct>* AxesList, TArray<struct FActionMappingStruct>* ActionsList);
	void AddConflictingKeybindsToList(class FName MappingName, float Scale, TArray<struct FAxisMappingStruct>* AxesList, TArray<struct FActionMappingStruct>* ActionsList);
};

// 0x58 (0x80 - 0x28)
// Class ReadyOrNot.Conversation
class UConversation : public UObject
{
public:
	uint8                                        Pad_2546[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FConversationData>             ConversationData;                                  // 0x40(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2547[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnConversationContinuing;                          // 0x60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnEndConversation;                                 // 0x70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UConversation* GetDefaultObj();

	void TryGetSpeakers();
	bool RequirementsMet();
	void ReplyToConversation(class AReadyOrNotCharacter* Speaker);
	void OnEndConversation__DelegateSignature();
	void OnConversationContinuing__DelegateSignature(int32 Idx);
	void GoToSpecificConversationIdAndContinueConversation(int32 Idx);
	void GiveWorldBuildingActivityByTag(class FName SpeakerId, class FName Tag);
	class ACyberneticCharacter* GetSpeakerForId(class FName ID);
	class ACyberneticCharacter* GetSpeakerForConversationIdx(int32 Idx);
	struct FConversationData GetConversationData();
	void ContinueConversation();
	void BuildConversation(class FName ID);
	void BeginConversation(class ACyberneticCharacter* ConversationStarter, class FName ID);
};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.ConversationManager
class AConversationManager : public AInfo
{
public:
	TArray<class UConversation*>                 RunningConversations;                              // 0x220(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AConversationManager* GetDefaultObj();

	class UConversation* TryPlayConversation(class FName ConversationId, class ACyberneticCharacter* ConversationStarter);
	class UConversation* PlayPrebuiltConversation(TSubclassOf<class UConversation> Conversation, class ACyberneticCharacter* ConversationStarter, class FName ConversationId);
	void PlayConversationInst(class UConversation* Conversation, class ACyberneticCharacter* ConversationStarter);
};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.COOPScorePopUp
class UCOOPScorePopUp : public UUserWidget
{
public:
	class UFMODEvent*                            Reward;                                            // 0x260(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCOOPScorePopUp* GetDefaultObj();

	void PlayRewardSound();
};

// 0x460 (0x680 - 0x220)
// Class ReadyOrNot.CoverFinderPreview
class ACoverFinderPreview : public AActor
{
public:
	uint8                                        Pad_2548[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SearchExtent;                                      // 0x228(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SearchDangerZone;                                  // 0x22C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverSearchMode                  SearchMode;                                        // 0x230(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverStance                      CoverStance;                                       // 0x231(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2549[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCoverQueryTest                       SearchModeTest;                                    // 0x240(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       HeightDifferenceTest;                              // 0x290(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       LineOfSightTest;                                   // 0x2E0(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       CoverBehindInstigatorTest;                         // 0x330(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       SufficientCoverTest;                               // 0x380(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       DistanceToInstigatorTest;                          // 0x3D0(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       DirectionMatchTest;                                // 0x420(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FCoverQueryTest                       RoomTest;                                          // 0x470(0x50)(Edit, NativeAccessSpecifierPublic)
	int32                                        NumCoverPointsFound;                               // 0x4C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CoverSearchTimeMs;                                 // 0x4C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACoverPoint>            BestCover;                                         // 0x4C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawLabels : 1;                                   // Mask: 0x1, PropSize: 0x10x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawScore : 1;                                    // Mask: 0x2, PropSize: 0x10x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawPass : 1;                                     // Mask: 0x4, PropSize: 0x10x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawFail : 1;                                     // Mask: 0x8, PropSize: 0x10x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawFailReason : 1;                               // Mask: 0x10, PropSize: 0x10x4D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_167 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_254A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x4D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_254B[0x1A0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACoverFinderPreview* GetDefaultObj();

};

// 0xB0 (0x500 - 0x450)
// Class ReadyOrNot.CoverFinderRenderingComponent
class UCoverFinderRenderingComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_254D[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCoverFinderRenderingComponent* GetDefaultObj();

};

// 0x2D0 (0x4F0 - 0x220)
// Class ReadyOrNot.CoverLandmark
class ACoverLandmark : public AActor
{
public:
	uint8                                        Pad_2553[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x230(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_168 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2554[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LandmarkName;                                      // 0x238(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverLandmarkType                Type;                                              // 0x248(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2556[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class USearchLandmarkActivity>   CustomSearchActivityClass;                         // 0x250(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SwatSearchAnimation;                               // 0x258(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                 CoverObject;                                       // 0x268(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableCollision : 1;                             // Mask: 0x1, PropSize: 0x10x290(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_169 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2557[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class ETeamType>                 AllowedTeamsForCover;                              // 0x298(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AStaticMeshActor>> IgnoredMeshActors;                                 // 0x2A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        CooldownAfterUse;                                  // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCharacterHiddenInWaitingState;                    // 0x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2558[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            ExitTriggerBoxTransform;                           // 0x2C0(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               ExitTriggerBoxExtent;                              // 0x2F0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2559[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            IdleTriggerBoxTransform;                           // 0x300(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               IdleTriggerBoxExtent;                              // 0x330(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_255B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCoverLandmarkAnimData                Entry;                                             // 0x340(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCoverLandmarkAnimData                Loop;                                              // 0x398(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCoverLandmarkAnimData                Exit;                                              // 0x3F0(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                        bAllowAbruptExit : 1;                              // Mask: 0x1, PropSize: 0x10x448(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_255C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ACoverLandmarkProxy*>           EntryPoints;                                       // 0x450(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class ACoverLandmarkProxy*>           ExitPoints;                                        // 0x460(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class ACoverLandmarkProxy*                   IdlePoint;                                         // 0x470(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           OccupiedByController;                              // 0x478(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           LastUsedByController;                              // 0x480(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  CurrentSwatWithLineOfSight;                        // 0x488(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClearedBySwat;                                    // 0x490(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_255D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AController*, float>              CooldownMap;                                       // 0x498(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_255E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACoverLandmark* GetDefaultObj();

	void ToggleLandmarkEnabled(bool bEnable);
	void PreviewIdleAnim();
	void PreviewExitAnim();
	void PreviewEntryAnim();
	bool IsCooldownActiveFor(class AController* InController);
	void EnableLandmark();
	void DisableLandmark();
	void AddCooldownFor(class AController* InController, float InCooldownTime);
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.CoverLandmarkProxy
class ACoverLandmarkProxy : public AActor
{
public:
	class ACoverLandmark*                        LandmarkOwner;                                     // 0x220(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverLandmarkAnimDirection       EntryDirection;                                    // 0x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECoverLandmarkAnimDirection       ExitDirection;                                     // 0x229(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2560[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ACoverLandmarkProxy* GetDefaultObj();

	void OnProxyUse(bool bIsActive);
	void OnProxyEnd(bool bSuccess);
	void EnableProxyInteraction();
	void DisableProxyInteraction();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.CoverQueryResultInterface
class ICoverQueryResultInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICoverQueryResultInterface* GetDefaultObj();

};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.CSGasDamageType
class UCSGasDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UCSGasDamageType* GetDefaultObj();

};

// 0x28 (0x58 - 0x30)
// Class ReadyOrNot.CSGasData
class UCSGasData : public UDataAsset
{
public:
	class UEnvQuery*                             GasGenerationQuery;                                // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APepperGasCloud>           PepperGasCloud;                                    // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SafePointsBufferDistance;                          // 0x48(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               NavModifierExtents;                                // 0x4C(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCSGasData* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class ReadyOrNot.ReadyOrNotCSGasSettings
class UReadyOrNotCSGasSettings : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UCSGasData>             GasDataAsset;                                      // 0x38(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotCSGasSettings* GetDefaultObj();

};

// 0xF0 (0x130 - 0x40)
// Class ReadyOrNot.CSGasManager
class UCSGasManager : public UTickableWorldSubsystem
{
public:
	class UEnvQuery*                             GasGenerationQuery;                                // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxGasPointsPerSource;                             // 0x48(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2567[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCSGasData*                            GasData;                                           // 0x50(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                NavVolumesContainer;                               // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        GasSources;                                        // 0x60(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       SafePoints;                                        // 0x70(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       GasPoints;                                         // 0x80(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AReadyOrNotCharacter*>          CharactersInGasSourceRadius;                       // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        PepperbalLGasSources;                              // 0xA0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2568[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NavModifierBoxExtents;                             // 0xB4(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2569[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCSGasManager* GetDefaultObj();

	void RemoveGasSource(class AActor* Source);
	void OnPepperCloudSpawned(struct FVector* Location);
	void GetGasSources(TArray<class AActor*>* OutGasSources);
	void GetGasSafePoints(TArray<struct FVector>* OutGasSafePoints);
	class UCSGasManager* Get(class UWorld* World);
	void AddPepperballLocation(class APepperProjectile* Projectile, const struct FVector& Location, const struct FVector& Normal);
	void AddGasSource(class AActor* Source);
};

// 0x28 (0x248 - 0x220)
// Class ReadyOrNot.CTF_Flag
class ACTF_Flag : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  FlagMeshComponent;                                 // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         CaptureBoxComponent;                               // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x238(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  BoneToAttach;                                      // 0x240(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ACTF_Flag* GetDefaultObj();

	void ResetFlagTransforms();
	void OnFlagBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	class FName GetBoneToAttachName();
};

// 0x0 (0x238 - 0x238)
// Class ReadyOrNot.CTF_FlagSpawnPoint
class ACTF_FlagSpawnPoint : public AActorSpawnPoint
{
public:

	static class UClass* StaticClass();
	static class ACTF_FlagSpawnPoint* GetDefaultObj();

};

// 0x8 (0x230 - 0x228)
// Class ReadyOrNot.CTFTriggerBox
class ACTFTriggerBox : public ATriggerBox
{
public:
	class UTextRenderComponent*                  TextRender;                                        // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ACTFTriggerBox* GetDefaultObj();

	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	bool FulfillsRequirements();
};

// 0x10 (0x288 - 0x278)
// Class ReadyOrNot.CurrentMatchRoundWidget
class UCurrentMatchRoundWidget : public UBaseWidget
{
public:
	class UTextBlock*                            CurrentRound_Text;                                 // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            CurrentRound_Text_Style2;                          // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UCurrentMatchRoundWidget* GetDefaultObj();

};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.CursorWidget
class UCursorWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UCursorWidget* GetDefaultObj();

};

// 0x140 (0x170 - 0x30)
// Class ReadyOrNot.CustomizationDataBase
class UCustomizationDataBase : public UPrimaryDataAsset
{
public:
	enum class ECustomizationType                Type;                                              // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2572[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCustomizationDataBase*                Parent;                                            // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Name;                                              // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Variant;                                           // 0x58(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x70(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x88(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>     VariantIcon;                                       // 0xB0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DisplayPriority;                                   // 0xD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2573[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          RequiredTags;                                      // 0xE0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                  RequirementsText;                                  // 0xF0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<enum class ECustomizationType>          TypesToHide;                                       // 0x108(0x50)(Edit, NativeAccessSpecifierPublic)
	bool                                         bShowInLoadout;                                    // 0x158(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2574[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EGameVersionRestriction>   LockedToDLC;                                       // 0x160(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationDataBase* GetDefaultObj();

};

// 0x0 (0x170 - 0x170)
// Class ReadyOrNot.CustomizationEmpty
class UCustomizationEmpty : public UCustomizationDataBase
{
public:

	static class UClass* StaticClass();
	static class UCustomizationEmpty* GetDefaultObj();

};

// 0x98 (0x208 - 0x170)
// Class ReadyOrNot.CustomizationSkeletalMesh
class UCustomizationSkeletalMesh : public UCustomizationDataBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>          SkeletalMesh;                                      // 0x170(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Socket;                                            // 0x198(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMasterPose;                                    // 0x1A0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2577[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCustomizationMaterialSlot>    MaterialOverrides;                                 // 0x1A8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>               SocketOverridesMap;                                // 0x1B8(0x50)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationSkeletalMesh* GetDefaultObj();

};

// 0x30 (0x1A0 - 0x170)
// Class ReadyOrNot.CustomizationStaticMesh
class UCustomizationStaticMesh : public UCustomizationDataBase
{
public:
	TSoftObjectPtr<class UStaticMesh>            StaticMesh;                                        // 0x170(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Socket;                                            // 0x198(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationStaticMesh* GetDefaultObj();

};

// 0x38 (0x1A8 - 0x170)
// Class ReadyOrNot.CustomizationBlueprint
class UCustomizationBlueprint : public UCustomizationDataBase
{
public:
	TSoftClassPtr<class AActor>                  BlueprintClass;                                    // 0x170(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTickInThirdPerson;                                // 0x198(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_257A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  Socket;                                            // 0x19C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_257B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCustomizationBlueprint* GetDefaultObj();

};

// 0x58 (0x1C8 - 0x170)
// Class ReadyOrNot.CustomizationSkin
class UCustomizationSkin : public UCustomizationDataBase
{
public:
	TArray<class FName>                          CompatibleItemTags;                                // 0x170(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>          MeshOverride;                                      // 0x180(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationMaterialSlot>    MaterialSlots;                                     // 0x1A8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseSocketOverride;                                // 0x1B8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_257C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketOverride;                                    // 0x1BC(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_257D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCustomizationSkin* GetDefaultObj();

};

// 0xA8 (0x218 - 0x170)
// Class ReadyOrNot.CustomizationCharacter
class UCustomizationCharacter : public UCustomizationDataBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>          HeadMesh;                                          // 0x170(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>     ArmsMaterial;                                      // 0x198(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPoseAsset>             FaceROM;                                           // 0x1C0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HairMaterialIndex;                                 // 0x1E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2580[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UTexture2D>             ProfileImage;                                      // 0x1F0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationCharacter* GetDefaultObj();

};

// 0x8 (0x178 - 0x170)
// Class ReadyOrNot.CustomizationVoice
class UCustomizationVoice : public UCustomizationDataBase
{
public:
	class FName                                  VoiceHandle;                                       // 0x170(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationVoice* GetDefaultObj();

};

// 0x58 (0x1C8 - 0x170)
// Class ReadyOrNot.CustomizationTattoo
class UCustomizationTattoo : public UCustomizationDataBase
{
public:
	TSoftObjectPtr<class UTexture2D>             TattooTexture;                                     // 0x170(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationMaterialSlot            ArmSlotOverride;                                   // 0x198(0x30)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationTattoo* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class ReadyOrNot.LoadoutItem
class ULoadoutItem : public UObject
{
public:
	class FText                                  Name;                                              // 0x28(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x40(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0x58(0x28)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutItem* GetDefaultObj();

};

// 0x8 (0x88 - 0x80)
// Class ReadyOrNot.LoadoutEquipment
class ULoadoutEquipment : public ULoadoutItem
{
public:
	TSubclassOf<class ABaseItem>                 Class;                                             // 0x80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutEquipment* GetDefaultObj();

};

// 0x0 (0x88 - 0x88)
// Class ReadyOrNot.LoadoutWeapon
class ULoadoutWeapon : public ULoadoutEquipment
{
public:

	static class UClass* StaticClass();
	static class ULoadoutWeapon* GetDefaultObj();

	TArray<enum class EWeaponAttachmentType> GetSupportedAttachmentTypes();
	TArray<TSubclassOf<class UWeaponAttachment>> GetSupportedAttachmentsOfType(enum class EWeaponAttachmentType Type);
};

// 0x78 (0xF8 - 0x80)
// Class ReadyOrNot.LoadoutCustomization
class ULoadoutCustomization : public ULoadoutItem
{
public:
	class UCustomizationDataBase*                Asset;                                             // 0x80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Variant;                                           // 0x88(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>     VariantIcon;                                       // 0xA0(0x28)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         Blocked;                                           // 0xC8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2586[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  RequirementsText;                                  // 0xD0(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class ULoadoutCustomization*>         Children;                                          // 0xE8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutCustomization* GetDefaultObj();

	enum class ECustomizationType GetCustomizationType();
};

// 0x3B8 (0x6D8 - 0x320)
// Class ReadyOrNot.CustomizationWidget
class UCustomizationWidget : public UCommonActivatableWidget
{
public:
	TMap<enum class ECustomizationType, class UFMODEvent*> CustomizationEquipEvents;                          // 0x320(0x50)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class ULoadoutManager*                       LoadoutManager;                                    // 0x370(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBaseProfile*                          Profile;                                           // 0x378(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_258F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         CurrentLoadout;                                    // 0x388(0x188)(Transient, NativeAccessSpecifierPrivate)
	class AReadyOrNotCharacter*                  PreviewCharacter;                                  // 0x510(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutWeapon*>                CachedPrimaryWeapons;                              // 0x518(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutWeapon*>                CachedSecondaryWeapons;                            // 0x528(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutEquipment*>             CachedLongTacticalItems;                           // 0x538(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutEquipment*>             CachedTacticalItems;                               // 0x548(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutEquipment*>             CachedArmorItems;                                  // 0x558(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutEquipment*>             CachedHelmetItems;                                 // 0x568(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FSavedCustomization                   CurrentCustomization;                              // 0x578(0xD0)(Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutCustomization*>         CachedCustomizationItems;                          // 0x648(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutCustomization*>         CachedCustomizationFamilies;                       // 0x658(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FCompatibleSkinsArray> ItemToSkinsMap;                                    // 0x668(0x50)(Transient, NativeAccessSpecifierPrivate)
	class ABaseItem*                             CustomizationTargetPrimaryWeapon;                  // 0x6B8(0x8)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             CustomizationTargetSecondaryWeapon;                // 0x6C0(0x8)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             CustomizationTargetArmor;                          // 0x6C8(0x8)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             CustomizationTargetHelmet;                         // 0x6D0(0x8)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UCustomizationWidget* GetDefaultObj();

	void SetSecondaryWeapon(class ULoadoutWeapon* Item);
	void SetSecondaryAttachment(class UWeaponAttachment* Attachment);
	void SetPrimaryWeapon(class ULoadoutWeapon* Item);
	void SetPrimaryAttachment(class UWeaponAttachment* Attachment);
	void SetLongTactical(class ULoadoutEquipment* Item);
	void SetHelmet(class ULoadoutEquipment* Item);
	void SetCustomizationItem(class ULoadoutCustomization* Item);
	void SetArmor(class ULoadoutEquipment* Item);
	void SetActiveSwatMember(enum class EEquippingSwat InSwat);
	void SecondarySet(TSubclassOf<class ABaseItem> Class);
	void PrimarySet(TSubclassOf<class ABaseItem> Class);
	void PreviewCustomizationItem(class ULoadoutCustomization* Item);
	void HelmetSet(TSubclassOf<class ABaseItem> Class);
	TArray<class ULoadoutEquipment*> GetTacticalItems();
	TArray<class ULoadoutWeapon*> GetSecondaryWeapons();
	class ULoadoutWeapon* GetSecondaryWeapon();
	TArray<class ULoadoutWeapon*> GetPrimaryWeapons();
	class ULoadoutWeapon* GetPrimaryWeapon();
	TArray<class ULoadoutEquipment*> GetLongTacticalItems();
	class ULoadoutEquipment* GetLongTactical();
	TArray<class ULoadoutEquipment*> GetHelmetItems();
	class ULoadoutEquipment* GetHelmet();
	class ULoadoutCustomization* GetEquippedCustomizationItem(enum class ECustomizationType Type);
	TArray<class ULoadoutCustomization*> GetCustomizationItems(enum class ECustomizationType Type, bool bFamiliesOnly);
	TArray<class ULoadoutEquipment*> GetArmorItems();
	class ULoadoutEquipment* GetArmor();
	enum class EEquippingSwat GetActiveSwatMember();
	void ExitCustomization();
	void ClearCustomizationPreview();
	bool CanCustomizeType(enum class ECustomizationType Type);
	void ArmorSet(TSubclassOf<class ABaseItem> Class);
};

// 0x8 (0x88 - 0x80)
// Class ReadyOrNot.CustomPhysicalMaterial
class UCustomPhysicalMaterial : public UPhysicalMaterial
{
public:
	float                                        FullOcclusionDepth;                                // 0x80(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2590[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCustomPhysicalMaterial* GetDefaultObj();

};

// 0x288 (0x2B0 - 0x28)
// Class ReadyOrNot.DataSingleton
class UDataSingleton : public UObject
{
public:
	class ULookupData*                           LookupData;                                        // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawBulletDebug;                                  // 0x30(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawNoNameplates;                                 // 0x31(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2591[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FText>                          LoadingScreen_Tips;                                // 0x38(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                  YouKilledFormat;                                   // 0x48(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                          KillfeedFormatRandom;                              // 0x60(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          ArrestfeedFormatRandom;                            // 0x70(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          FreefeedFormatRandom;                              // 0x80(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          TeamkillfeedFormatRandom;                          // 0x90(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                  KillfeedWithA;                                     // 0xA0(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bShowGrenadeDamage;                                // 0xB8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2592[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UItemData*                             ItemData;                                          // 0xC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetsData*                          WidgetData;                                        // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPenetrationData*                      PenetrationData;                                   // 0xD0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCampaignData*                         CampaignData;                                      // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            ItemDataLookupTable;                               // 0xE0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            AmmoDataLookupTable;                               // 0xE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            AIDataLookupTable;                                 // 0xF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            LevelDataLookupTable;                              // 0xF8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            AnimationDataLookupTable;                          // 0x100(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            AnimatedIconLookupTable;                           // 0x108(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            DoorDataLookupTable;                               // 0x110(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            TrapDataLookupTable;                               // 0x118(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            ConversationLookupTable;                           // 0x120(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            GameSettingsLookupTable;                           // 0x128(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            CharacterLookOverrideTable;                        // 0x130(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            RonInputKeyTable;                                  // 0x138(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            InputKeyGamePadIconTable;                          // 0x140(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UDataTable*>       SpeechDataLookupTable;                             // 0x148(0x50)(Edit, NativeAccessSpecifierPublic)
	class UDataTable*                            WidgetDataLookupTable;                             // 0x198(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            SuspectArmourDataTable;                            // 0x1A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            PairedInteractionDataTable;                        // 0x1A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                            MoveStyleDataTable;                                // 0x1B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  CustomizationCharacterLevel;                       // 0x1B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  CustomizationMenuLevel;                            // 0x1C0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2593[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataSingleton* GetDefaultObj();

	void UnloadLevels();
	void RefreshInputKeyTable();
	void LoadLevels();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.DebugDisplayWidget
class UDebugDisplayWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UDebugDisplayWidget* GetDefaultObj();

	void SetDebugTitle(const class FString& NewTitle);
	void SetDebugText(int32 ID, const class FString& NewText);
	int32 AddDebugText(const class FString& NewText);
};

// 0xB0 (0x880 - 0x7D0)
// Class ReadyOrNot.DefusalGM
class ADefusalGM : public AReadyOrNotGameMode_PVP
{
public:
	class ABombActor*                            SelectedBombActor;                                 // 0x7D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AAISpawn*>                      SpawnPoints;                                       // 0x7D8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class APlayerStart*                          SwatSpawn;                                         // 0x7E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerStart*                          SuspectSpawn;                                      // 0x7F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class APlayerCharacter*, struct FCharacterLookOverride> CharacterLookMap;                                  // 0x7F8(0x50)(NativeAccessSpecifierPrivate)
	class USkeletalMesh*                         BlankFaceMesh;                                     // 0x848(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>             PendingPlayerSpawn;                                // 0x850(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSpawnData>                    SuspectSpawnData;                                  // 0x860(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                         SuspectFPArmsOverride;                             // 0x870(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2597[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADefusalGM* GetDefaultObj();

};

// 0x30 (0x810 - 0x7E0)
// Class ReadyOrNot.DefusalGS
class ADefusalGS : public AReadyOrNotGameState
{
public:
	enum class EDefusalMatchSate                 DefusalMatchState;                                 // 0x7E0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2598[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           DefusalHudInst;                                    // 0x7E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>               DefusalHudClass;                                   // 0x7F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALoadoutPortal*                        LoadoutPortal;                                     // 0x7F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CountdownUntilMatchStarts;                         // 0x800(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ElapsedRoundTime;                                  // 0x804(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BombTimeRemaining;                                 // 0x808(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_259A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADefusalGS* GetDefaultObj();

};

// 0x8 (0x2B0 - 0x2A8)
// Class ReadyOrNot.DefuseBombThreats
class ADefuseBombThreats : public AObjective
{
public:
	uint8                                        Pad_259C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADefuseBombThreats* GetDefaultObj();

	void OnBombDefused(class ABombActor* DefusedBomb);
};

// 0x78 (0xA8 - 0x30)
// Class ReadyOrNot.DeployableData
class UDeployableData : public UDataAsset
{
public:
	class FText                                  DeployableName;                                    // 0x30(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                  DeployableShortName;                               // 0x48(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                  DeployableDescription;                             // 0x60(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             DeployableTexture;                                 // 0x78(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DeployableLabel;                                   // 0xA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDeployableData* GetDefaultObj();

};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.DeployableDepot
class ADeployableDepot : public AActor
{
public:
	TArray<class UDeployableSpawnComponent*>     SpawnedDeployableComponents;                       // 0x220(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                  DepotLabel;                                        // 0x230(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ADeployableDepot* GetDefaultObj();

	void OnSuccessfulSpawn();
	void OnGameStarted();
	void Multicast_OnSuccessfulSpawn();
};

// 0x18 (0x210 - 0x1F8)
// Class ReadyOrNot.DeployableSpawnComponent
class UDeployableSpawnComponent : public USceneComponent
{
public:
	TSubclassOf<class AActor>                    ItemClass;                                         // 0x1F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DeployableLabel;                                   // 0x200(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_259F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeployableSpawnComponent* GetDefaultObj();

	bool TrySpawnComponent(bool ShouldSpawn);
	void MutateSpawnedDeployable(class AActor* SpawnedDeployable);
};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.DeployItemAtLocationActivity
class UDeployItemAtLocationActivity : public UBaseActivity
{
public:
	TSubclassOf<class ABaseItem>                 DeployItemClass;                                   // 0x198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               DeployLocation;                                    // 0x1A0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25A3[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeployItemAtLocationActivity* GetDefaultObj();

	void TickMoveToStage(float DeltaTime, float Uptime);
	void TickDeployStage(float DeltaTime, float Uptime);
	void ExitMoveToStage();
	void ExitDeployStage();
	void EnterMoveToStage();
	void EnterDeployStage();
	bool CanDeploy();
	void Blueprint_TickDeployStage(float DeltaTime, float Uptime);
	void Blueprint_ExitDeployStage();
	void Blueprint_EnterDeployStage();
};

// 0x0 (0x1B0 - 0x1B0)
// Class ReadyOrNot.DeployChemlightActivity
class UDeployChemlightActivity : public UDeployItemAtLocationActivity
{
public:

	static class UClass* StaticClass();
	static class UDeployChemlightActivity* GetDefaultObj();

	void OnChemlightThrown(class ABaseItem* Item);
};

// 0x0 (0x1B0 - 0x1B0)
// Class ReadyOrNot.DeployGrenadeAtLocationActivity
class UDeployGrenadeAtLocationActivity : public UDeployItemAtLocationActivity
{
public:

	static class UClass* StaticClass();
	static class UDeployGrenadeAtLocationActivity* GetDefaultObj();

};

// 0x50 (0x1E8 - 0x198)
// Class ReadyOrNot.DoorInteractionActivity
class UDoorInteractionActivity : public UBaseActivity
{
public:
	class ADoor*                                 Door;                                              // 0x198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CommandLocation;                                   // 0x1A0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               OriginalLocation;                                  // 0x1AC(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReturnToPositionAfterInteraction : 1;             // Mask: 0x1, PropSize: 0x10x1B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisablePlayerDoorInteraction : 1;                 // Mask: 0x2, PropSize: 0x10x1B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16B : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_25A8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                InteractionAnimation;                              // 0x1C0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          InteractionAnimMontage;                            // 0x1D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_25A9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDoorInteractionActivity* GetDefaultObj();

	void TickReturnStage(float DeltaTime, float Uptime);
	bool ShouldGetInPosition();
	void PerformInteractStage(float DeltaTime, float Uptime);
	void PerformGetInPositionStage(float DeltaTime, float Uptime);
	void OnInteractionEnd();
	void OnInteractionBegin();
	void OnDoorOpened();
	void OnDoorMovementBlocked();
	void OnDoorClosed();
	void OnDoorBroken();
	void ExitReturnStage();
	void ExitInteractStage();
	void ExitGetInPositionStage();
	void EnterReturnStage();
	void EnterInteractStage();
	void EnterGetInPositionStage();
	bool CanReturn();
	bool CanInteract();
};

// 0x8 (0x1F0 - 0x1E8)
// Class ReadyOrNot.DeployWedgeActivity
class UDeployWedgeActivity : public UDoorInteractionActivity
{
public:
	uint8                                        Pad_25AA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeployWedgeActivity* GetDefaultObj();

};

// 0x20 (0x500 - 0x4E0)
// Class ReadyOrNot.DestructibleDoorChunkComponent
class UDestructibleDoorChunkComponent : public UStaticMeshComponent
{
public:
	bool                                         bIsDoorHandle;                                     // 0x4E0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsHinge;                                          // 0x4E1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_25AB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Health;                                            // 0x4E4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bCannotKickIfDestroyed;                            // 0x4E8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_25AC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDestructibleDoorChunkComponent*> SupportChunks;                                     // 0x4F0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UDestructibleDoorChunkComponent* GetDefaultObj();

};

// 0x10 (0x4F0 - 0x4E0)
// Class ReadyOrNot.DestructibleVehicleBodyPart
class UDestructibleVehicleBodyPart : public UStaticMeshComponent
{
public:
	bool                                         bCanBeShotOff;                                     // 0x4E0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25AD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Health;                                            // 0x4E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBroken;                                           // 0x4E8(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25AE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDestructibleVehicleBodyPart* GetDefaultObj();

};

// 0x8 (0x470 - 0x468)
// Class ReadyOrNot.DestructibleVehicleParticleComponent
class UDestructibleVehicleParticleComponent : public UArrowComponent
{
public:
	class UParticleSystem*                       ParticleSystem;                                    // 0x468(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDestructibleVehicleParticleComponent* GetDefaultObj();

};

// 0x0 (0x4E0 - 0x4E0)
// Class ReadyOrNot.DestructibleVehicleGlassComponent
class UDestructibleVehicleGlassComponent : public UStaticMeshComponent
{
public:

	static class UClass* StaticClass();
	static class UDestructibleVehicleGlassComponent* GetDefaultObj();

};

// 0x1B8 (0x3D8 - 0x220)
// Class ReadyOrNot.DestructibleVehicle
class ADestructibleVehicle : public AActor
{
public:
	bool                                         bComplexVehicle;                                   // 0x220(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLightsOn;                                         // 0x221(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25B5[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BodyImpactEvent;                                   // 0x228(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BodyBreakEvent;                                    // 0x230(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ChanceToCauseAlarmOnDamage;                        // 0x238(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlarmPlayLength;                                   // 0x23C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlarmHeadLightsFlashInterval;                      // 0x240(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ChanceToCauseAirbagToDeployOnDamage;               // 0x244(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       AirbagParticle;                                    // 0x248(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            AirbagEvent;                                       // 0x250(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlassHealth;                                       // 0x258(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlassDamageToApply;                                // 0x25C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>             RandomShatteredGlassMaterial;                      // 0x260(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFMODEvent*                            GlassImpactEvent;                                  // 0x270(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            GlassBreakEvent;                                   // 0x278(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RollAmountOnTireDamage;                            // 0x280(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchAmountOnTireDamage;                           // 0x284(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SinkAmountOnTireDamage;                            // 0x288(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TireDeflationInterpSpeed;                          // 0x28C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            TireDeflateEvent;                                  // 0x290(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           FlatTireMesh;                                      // 0x298(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseSimplifiedLights;                              // 0x2A0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25B8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstance*                     SimplifiedLightsOnMaterial;                        // 0x2A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     SimplifiedLightsOffMaterial;                       // 0x2B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     FrontLightsOnMaterial;                             // 0x2B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     FrontLightsOffMaterial;                            // 0x2C0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     RearLightsOnMaterial;                              // 0x2C8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     RearLightsOffMaterial;                             // 0x2D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SimplifiedLightsMaterialIndex;                     // 0x2D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FrontLeftLightsMaterialIndex;                      // 0x2DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FrontRightLightsMaterialIndex;                     // 0x2E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RearLightsMaterialIndex;                           // 0x2E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25B9[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLeftLightDestroyed;                               // 0x304(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRightLightDestroyed;                              // 0x305(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bFrontLeftTireDestroyed;                           // 0x306(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bFrontRightTireDestroyed;                          // 0x307(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRearLeftTireDestroyed;                            // 0x308(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRearRightTireDestroyed;                           // 0x309(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_25BA[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class UDestructibleVehicleGlassComponent*, float> GlassHealthMap;                                    // 0x310(0x50)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_25BB[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  CarBody;                                           // 0x378(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  AirBag;                                            // 0x380(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                       AirBagEffects;                                     // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  FrontLeftTire;                                     // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  FrontRightTire;                                    // 0x398(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  RearLeftTire;                                      // 0x3A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  RearRightTire;                                     // 0x3A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      LeftLightCollision;                                // 0x3B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      RightLightCollision;                               // 0x3B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpotLightComponent*                   LeftHeadLight;                                     // 0x3C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpotLightComponent*                   RightHeadLight;                                    // 0x3C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   AlarmAudio;                                        // 0x3D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ADestructibleVehicle* GetDefaultObj();

	void StopCarAlarm();
	void Multicast_ShatterGlass(class UDestructibleVehicleGlassComponent* Glass);
	void Multicast_PlayTireDestroyedEffects(class UStaticMeshComponent* TireMesh);
	void Multicast_PlayAudioEvent(class UFMODEvent* Event, const struct FVector_NetQuantize& Location);
	void Multicast_DeployCarFeatures(bool bAirbag, bool bCarAlarm, bool bDisableLeftLight, bool bDisableRightLight);
	void Multicast_BreakGlass(class UDestructibleVehicleGlassComponent* Glass);
	void Multicast_BreakBodyPart(class UDestructibleVehicleBodyPart* BodyPart);
	void FlashHeadLights();
};

// 0x20 (0x9F0 - 0x9D0)
// Class ReadyOrNot.Detonator
class ADetonator : public ABaseItem
{
public:
	uint8                                        Pad_25BE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlacedC2Explosive*>            PlacedCharges;                                     // 0x9D8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        PlacedChargesCount;                                // 0x9E8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDetonationDistance;                             // 0x9EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ADetonator* GetDefaultObj();

	void Server_DetonateC2();
};

// 0x10 (0x1A8 - 0x198)
// Class ReadyOrNot.DisarmC2Activity
class UDisarmC2Activity : public UBaseActivity
{
public:
	class APlacedC2Explosive*                    PlacedC2;                                          // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_25BF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDisarmC2Activity* GetDefaultObj();

};

// 0x0 (0x1E8 - 0x1E8)
// Class ReadyOrNot.DisarmDoorTrapActivity
class UDisarmDoorTrapActivity : public UDoorInteractionActivity
{
public:

	static class UClass* StaticClass();
	static class UDisarmDoorTrapActivity* GetDefaultObj();

	void OnTrapTriggered(class ATrapActor* Trap, class AReadyOrNotCharacter* TriggeredBy);
};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.DisarmStandaloneTrapActivity
class UDisarmStandaloneTrapActivity : public UBaseActivity
{
public:
	class ATrapActor*                            TrapToDisarm;                                      // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25C4[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDisarmStandaloneTrapActivity* GetDefaultObj();

	void OnTrapTriggered(class ATrapActor* Trap, class AReadyOrNotCharacter* TriggeredBy);
	void OnTrapDisarmed();
	void EnterGetInPositionStage();
	void EnterDisarmStage();
	bool CanPerformDisarm();
};

// 0x0 (0x2A8 - 0x2A8)
// Class ReadyOrNot.DontDie
class ADontDie : public AObjective
{
public:

	static class UClass* StaticClass();
	static class ADontDie* GetDefaultObj();

};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.DoorwayWithoutDoor
class ADoorwayWithoutDoor : public AActor
{
public:
	class UDoorwayComponent*                     Doorway;                                           // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ADoorwayWithoutDoor* GetDefaultObj();

	bool IsPointInFrontOfDoorway(const struct FVector& Point);
	class UDoorwayComponent* GetDoorway();
	struct FVector GetDoorSize();
};

// 0xE98 (0x10C0 - 0x228)
// Class ReadyOrNot.Door
class ADoor : public ADoorwayWithoutDoor
{
public:
	uint8                                        Pad_264E[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnDoorOpened;                                      // 0x278(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSubDoorOpened;                                   // 0x288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorClosed;                                      // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorBroken;                                      // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorMovementBlocked;                             // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorExploded;                                    // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDoorKicked;                                      // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   TypeOfDoor;                                        // 0x2E8(0x10)(Edit, Net, NoDestructor, NativeAccessSpecifierPublic)
	float                                        StartingOpenAngle;                                 // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOneWay : 1;                                       // Mask: 0x1, PropSize: 0x10x2FC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EDoorOneWayDirection              OneWayDirection;                                   // 0x2FD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRandomlyOpenAtGameStart;                          // 0x2FE(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSuspectAlwaysUnlocks;                             // 0x2FF(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreForFlee;                                    // 0x300(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoNavBlockerForGen;                               // 0x301(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoAutomaticClearing;                              // 0x302(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseC2;                                         // 0x303(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseBSG;                                        // 0x304(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseWedge;                                      // 0x305(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseRam;                                        // 0x306(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseOptiwand;                                   // 0x307(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanPlayerInteract : 1;                            // Mask: 0x1, PropSize: 0x10x308(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bCanIssueOrdersOnFrontSide;                        // 0x309(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanIssueOrdersOnBackSide;                         // 0x30A(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasFrame;                                         // 0x30B(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_264F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AThreatAwarenessActor*                 FrontThreat;                                       // 0x310(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AThreatAwarenessActor*                 BackThreat;                                        // 0x318(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AThreatAwarenessActor*>         FrontThreatAwarenessPoints;                        // 0x320(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AThreatAwarenessActor*>         BackThreatAwarenessPoints;                         // 0x330(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AStackUpActor*>                 FrontLeftStackUpPoints;                            // 0x340(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AStackUpActor*>                 FrontRightStackUpPoints;                           // 0x350(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AStackUpActor*>                 BackLeftStackUpPoints;                             // 0x360(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AStackUpActor*>                 BackRightStackUpPoints;                            // 0x370(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FClearPoint>                   FrontLeftClearPoints;                              // 0x380(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FClearPoint>                   FrontRightClearPoints;                             // 0x390(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FClearPoint>                   BackLeftClearPoints;                               // 0x3A0(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FClearPoint>                   BackRightClearPoints;                              // 0x3B0(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	uint8                                        bDoorJammed : 1;                                   // Mask: 0x1, PropSize: 0x10x3C0(0x1)(Edit, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Blocked : 1;                                       // Mask: 0x2, PropSize: 0x10x3C0(0x1)(Edit, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2650[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                DestroyedChunkIdxs;                                // 0x3C8(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                         bHeldPushDoor;                                     // 0x3D8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2651[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PushDoorHoldTime;                                  // 0x3DC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDoorRoomPosition                 FrontRoomPosition;                                 // 0x3E0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDoorRoomPosition                 BackRoomPosition;                                  // 0x3E1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bManualRoomPositionSetup;                          // 0x3E2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2652[0x9];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxFrontHorizontalClearingDistance;                // 0x3EC(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxBackHorizontalClearingDistance;                 // 0x3F0(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxFrontRightClearThreshold;                       // 0x3F4(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxFrontLeftClearThreshold;                        // 0x3FC(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxBackRightClearThreshold;                        // 0x404(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxBackLeftClearThreshold;                         // 0x40C(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxFrontRightClearPoints;                          // 0x414(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxFrontLeftClearPoints;                           // 0x415(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxBackRightClearPoints;                           // 0x416(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxBackLeftClearPoints;                            // 0x417(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bManualClearPointSetup;                            // 0x418(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2653[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       KickedParticleSystem;                              // 0x430(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       LockBrokenParticleSystem;                          // 0x438(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       RootScene;                                         // 0x440(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  DoorStatic;                                        // 0x448(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  DoorHandleFront;                                   // 0x450(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  DoorHandleBack;                                    // 0x458(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMirrorPortalComponent*                FrontMirrorPoint;                                  // 0x460(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMirrorPortalComponent*                BackMirrorPoint;                                   // 0x468(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk0;                                        // 0x470(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk1;                                        // 0x478(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk2;                                        // 0x480(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk3;                                        // 0x488(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk4;                                        // 0x490(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk5;                                        // 0x498(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk6;                                        // 0x4A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk7;                                        // 0x4A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDestructibleDoorChunkComponent*       DoorChunk8;                                        // 0x4B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  LightBlocker;                                      // 0x4B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorOpenInteractableComp;                          // 0x4C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorSublinkOpenInteractableComp;                   // 0x4C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorSublinkPushInteractableComp;                   // 0x4D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorPushInteractableComp;                          // 0x4D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorKickInteractableComp;                          // 0x4E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorSublinkKickInteractableComp;                   // 0x4E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                LockpickInteractableComponent;                     // 0x4F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                C2InteractableComponent;                           // 0x4F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                WedgeInteractableComponent;                        // 0x500(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                OptiwandInteractableComponent;                     // 0x508(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                BSGInteractableComponent;                          // 0x510(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                BSGInteractableComponent_2;                        // 0x518(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                DoorRamInteractableComponent;                      // 0x520(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDecalComponent*                       C2ExplosionDecalComponent;                         // 0x528(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioPropagationComponent*        FMODAudioPropagationComp;                          // 0x530(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       LockpickArea;                                      // 0x538(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       DoorArea;                                          // 0x540(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       C2Area;                                            // 0x548(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       BSGArea;                                           // 0x550(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       MirrorgunArea;                                     // 0x558(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       WedgeArea;                                         // 0x560(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                       BatteringRamArea;                                  // 0x568(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         DoorBlockerComponent;                              // 0x570(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         BreachBlocker1Component;                           // 0x578(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         BreachBlocker2Component;                           // 0x580(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         BreachBlocker3Component;                           // 0x588(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHasEverBeenOpenedBySwat : 1;                      // Mask: 0x1, PropSize: 0x10x590(0x1)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2658[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        OperatingStates;                                   // 0x598(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	class ANavLinkProxy*                         NavLinkProxy;                                      // 0x5A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2659[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bNoSpawnTrap : 1;                                  // Mask: 0x1, PropSize: 0x10x5C8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_170 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EDoorTrapSide                     TrapSide;                                          // 0x5C9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_265A[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDataTableRowHandle                   TypeOfTrap;                                        // 0x5D0(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TMap<enum class EDoorDamageType, float>      DoorKillDistance;                                  // 0x5E0(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<enum class EDoorDamageType, float>      DoorStunDistance;                                  // 0x630(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                        MaxOpenClose;                                      // 0x680(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OpenThreshold;                                     // 0x684(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloseThreshold;                                    // 0x688(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IncrementAngle;                                    // 0x68C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PhysicalPushAmount;                                // 0x690(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_265B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 DriveSubDoor;                                      // 0x698(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bMainSubDoor : 1;                                  // Mask: 0x1, PropSize: 0x10x6A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bKickAlwaysFails : 1;                              // Mask: 0x2, PropSize: 0x10x6A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_171 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_265D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DoorKickSuccessChance;                             // 0x6A4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NumSuccessfulKicksToBreakDown;                     // 0x6A8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_265F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    C2ExplosionDecal;                                  // 0x6B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysLocked : 1;                                 // Mask: 0x1, PropSize: 0x10x6B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideLockChance : 1;                           // Mask: 0x2, PropSize: 0x10x6B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_172 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2661[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockedChance;                                      // 0x6BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsElectronicDoor;                                 // 0x6C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2662[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ElectronicLockChance;                              // 0x6C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorPushCurve;                                     // 0x6C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorOpenCurve;                                     // 0x6D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorCloseCurve;                                    // 0x6D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorKickSuccessCurve;                              // 0x6E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorKickFailCurve;                                 // 0x6E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorLockedCurve;                                   // 0x6F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorRamCurve;                                      // 0x6F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorExplodeCurve;                                  // 0x700(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorBreachCurve;                                   // 0x708(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorHandleOpenCurve;                               // 0x710(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorHandlePushCurve;                               // 0x718(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                           DoorHandleLockedCurve;                             // 0x720(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlacedC2Explosive*                    PlacedC2;                                          // 0x728(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDestructibleDoorChunkComponent*> ChunkComponents;                                   // 0x730(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bPendingSubDoorKick : 1;                           // Mask: 0x1, PropSize: 0x10x740(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_173 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2664[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  LastDoorUser;                                      // 0x748(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDoorDamageType                   LastDoorDamage;                                    // 0x750(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2665[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ATrapActorAttachedToDoor*              AttachedTrap;                                      // 0x758(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoorJam*                              AttachedWedge;                                     // 0x760(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  AICheckingDoor;                                    // 0x768(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTeamStackUpActivity*>          CurrentStackUpActivities;                          // 0x770(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class UBaseActivity*>                 CurrentActivities;                                 // 0x780(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	float                                        OpenCloseAmount;                                   // 0x790(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DoorHandlePitchAmount;                             // 0x794(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bC2Placed : 1;                                     // Mask: 0x1, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSWATKnowsLockState : 1;                           // Mask: 0x2, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuspectKnowsLockState : 1;                        // Mask: 0x4, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSWATKnowsTrapState : 1;                           // Mask: 0x8, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuspectKnowsTrapState : 1;                        // Mask: 0x10, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoorBroken : 1;                                   // Mask: 0x20, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTrapInFront : 1;                                  // Mask: 0x40, PropSize: 0x10x798(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientReset : 1;                                  // Mask: 0x80, PropSize: 0x10x798(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoorHandlesBroken : 1;                            // Mask: 0x1, PropSize: 0x10x799(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSWATHasKeycard : 1;                               // Mask: 0x2, PropSize: 0x10x799(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuspectsHaveKeycard : 1;                          // Mask: 0x4, PropSize: 0x10x799(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlarmTriggered : 1;                               // Mask: 0x8, PropSize: 0x10x799(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_174 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2666[0x6BE];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotCharacter*>          CharactersOverlappingDoor;                         // 0xE58(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2667[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDoorData                             DoorData;                                          // 0xE70(0x1F0)(Edit, Net, DisableEditOnTemplate, EditConst, RepNotify, NativeAccessSpecifierPublic)
	struct FTrapData                             TrapData;                                          // 0x1060(0x50)(Edit, Net, DisableEditOnTemplate, EditConst, RepNotify, NativeAccessSpecifierPublic)
	float                                        OcclusionMultiplier;                               // 0x10B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2668[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADoor* GetDefaultObj();

	void UnlockDoor(bool bUnlockSubDoor);
	void UnblockAllDoorways();
	void ToggleLightBlocker();
	void Tick_DoorRam();
	void Tick_DoorPush();
	void Tick_DoorOpenClose();
	void Tick_DoorLocked();
	void Tick_DoorKick_Success();
	void Tick_DoorKick_Fail();
	void Tick_DoorHandleLocked();
	void Tick_DoorHandle_Push();
	void Tick_DoorHandle_Open();
	void Tick_DoorExplode();
	void Tick_DoorBreach();
	bool TeamKnowsDoorTrapState(bool bSuspectTeam);
	bool TeamKnowsDoorLockState(bool bSuspectTeam);
	bool SubDoor_CanOpenDoors(class AReadyOrNotCharacter* PlayerCharacter);
	bool SubDoor_CanCloseDoors(class AReadyOrNotCharacter* PlayerCharacter);
	void Setup();
	void SetSWATHasAllKeycards(class UObject* WorldContextObject);
	void SetLocked(bool bNewLocked);
	void SetDoorTrapKnowledge(bool bSuspectTeam, bool bKnowledge);
	void SetDoorLockKnowledge(bool bSuspectTeam, bool bKnowledge);
	void SetAllElectronicLocks(class UObject* WorldContextObject, bool Blocked);
	void Server_SetTrapKnowledgeState(bool bSuspectTeam, bool bNewKnowledgeState);
	void Server_SetLockKnowledgeState(bool bSuspectTeam, bool bNewKnowledgeState);
	void Restore();
	void ResetDoorTrapKnowledge();
	void ResetDoorLockKnowledge();
	void RemoveWedges();
	float RamDoor(class AReadyOrNotCharacter* DoorRamCharacter, bool bPlayRamSound);
	void PushDoor_SpecificAngle(class AReadyOrNotCharacter* DoorPusherCharacter, float CustomTargetAngle, bool bAnimateDoorHandle);
	float PushDoor(class AReadyOrNotCharacter* DoorPusherCharacter, float InIncrementAngle, bool bAnimateDoorHandle, bool bPlaySound);
	void PlayDoorSound(enum class EDoorInteraction DoorInteraction, class AReadyOrNotCharacter* DoorInteractionInstigator, TArray<struct FMODParam>& Params);
	void PlayDoorKickSound(class AReadyOrNotCharacter* Kicker, float Result);
	void PlayDoorDamageSound(enum class EDoorDamageType DoorDamage, TArray<struct FMODParam>& Params);
	float PeekDoor(class AReadyOrNotCharacter* DoorPeekerCharacter, float InIncrementAngle, bool bAnimateDoorHandle);
	void OpenSubDoor(class AReadyOrNotCharacter* DoorOpenCharacter, bool bInstant, bool bAnimateDoorHandle);
	void OpenDoor_SpecificAngle(class AReadyOrNotCharacter* DoorOpenCharacter, float CustomTargetAngle, bool bInstant, bool bAnimateDoorHandle);
	void OpenDoor_Debug();
	float OpenDoor(class AReadyOrNotCharacter* DoorOpenCharacter, bool bInstant, bool bAnimateDoorHandle, bool bNoCloseThreshold);
	void OnRep_TrapDataUpdated();
	void OnRep_DoorHandlesBroken();
	void OnRep_DoorDataUpdated();
	void OnRep_DestroyedChunkIdxChanged();
	void OnRep_ClientResetDoor();
	void OnDoorOpened__DelegateSignature();
	void OnDoorMovementBlocked__DelegateSignature();
	void OnDoorKick__DelegateSignature(class ADoor* Door, class AReadyOrNotCharacter* InstigatorCharacter, bool bSuccess);
	void OnDoorExplode__DelegateSignature(class ADoor* Door, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnDoorClosed__DelegateSignature();
	void OnDoorBroken__DelegateSignature();
	bool NonMainSubDoor_CanShowOpenDoorPrompt();
	void Multicast_SetLocked(bool bShouldLocked);
	void Multicast_PlayElectronicDoorSound(class UFMODEvent* Event);
	void Multicast_PlayDoorSound(enum class EDoorInteraction DoorDamage, class AReadyOrNotCharacter* DoorInteractionInstigator, TArray<struct FMODParam>& Params);
	void Multicast_PlayDoorKickEffects(bool bBreakLock, bool bInFront);
	void Multicast_PlayDoorDamageSound(enum class EDoorDamageType DoorDamage, TArray<struct FMODParam>& Params);
	void Multicast_ExplodeDoor(class AReadyOrNotCharacter* DoorBreacherCharacter, class AActor* ExplosionCauser, bool bKeepHinges);
	void Multicast_DisableDoorInteraction(bool bSetClosed);
	void Multicast_CheckSupports();
	bool MainSubDoor_CanShowOpenDoorPrompt();
	void LockDoor(bool bLockSubDoor);
	void KickSubDoor(class AReadyOrNotCharacter* DoorKickCharacter);
	void KickDoor(class AReadyOrNotCharacter* DoorKickCharacter, bool bKickSubDoor, bool bForce);
	bool IsTrapLive();
	bool IsTooFarForKick();
	bool IsSubDoorOpen();
	bool IsStackUpDisabled(const struct FVector& CommandLocation);
	bool IsPointRightOfDoorway(const struct FVector& Vector);
	bool IsPointInFrontOfDoor(const struct FVector& Vector);
	bool IsPendingSubDoorKick();
	bool IsOverridingLockChance();
	bool IsOutlineEnabled(enum class EActorOutlineType OutlineType);
	bool IsOutlineDisabled();
	bool IsOpening();
	bool IsOpenBy_Angle(float Angle);
	bool IsOpenBy(float Percentage);
	bool IsOpenBeyondIncrementThreshold();
	bool IsOpenBeyondCloseThreshold();
	bool IsOpenBeyond_Angle(float Angle);
	bool IsOpenBeyond(float Percentage);
	bool IsOpenAtOrBeyond_Angle(float Angle);
	bool IsOpenAtOrBeyond(float Percentage);
	bool IsOpen_Forward();
	bool IsOpen_Backward();
	bool IsOpen();
	bool IsNonMainSubdoor();
	bool IsNonDoorInteractionPlaying();
	bool IsMirrorBlocked();
	bool IsMiddleChunkBroken();
	bool IsMainSubdoor();
	bool IsLocked();
	bool IsLockChanceOverridden();
	bool IsLockable();
	bool IsLocationSameSideAsTrap(const struct FVector& InLocation);
	bool IsJammed();
	bool IsIgnoredForFlee();
	bool IsHandleBroken();
	bool IsHalfwayOpen();
	bool IsFullyOpen_Forward();
	bool IsFullyOpen_Backward();
	bool IsFullyOpen();
	bool IsElectronicDoor();
	bool IsDoorwayOnly();
	bool IsDoorInteractionPlaying();
	bool IsDoorChunkDestroyed(class UDestructibleDoorChunkComponent* InChunkComponent);
	bool IsDoorBroken();
	bool IsDestructible();
	bool IsClosing();
	bool IsClosed();
	bool IsC2Placed();
	bool IsAttachedToRoot();
	bool IsAnyInteractionPlaying();
	bool IsAnyAIOpening();
	bool IsAnyAIClosing();
	bool IsAlwaysLocked();
	bool IsActorSameSideAsTrap(class AActor* InActor);
	bool IsActorRightOfDoorway(class AActor* Actor);
	bool IsActorInFrontOfDoorway(class AActor* Actor);
	bool IsActorInFrontOfDoor(class AActor* Actor);
	bool IsActorBehindDoor_Relative(class AActor* Actor);
	bool HasTrapAndSWATKnowsTrap();
	bool HasTrapAndSuspectKnowsTrap();
	bool HasEverBeenOpened();
	struct FVector GetWedgeLocation();
	class FName GetTypeOfDoorTrap();
	class FName GetTypeOfDoorRow();
	float GetTargetAngle();
	bool GetSWATKnowsLockState();
	bool GetSuspectKnowsLockState();
	class ADoor* GetSubDoor();
	float GetStartingOpenAngle();
	TArray<class AStackUpActor*> GetStackupsForArea(enum class EStackupGenArea StackupArea);
	float GetPseudoVelocity();
	class APlacedC2Explosive* GetPlacedC2();
	float GetOverrideLockChance();
	float GetOpenThreshold();
	float GetOpenAmountAsPercentage();
	float GetOpenAmount();
	float GetMaxOpenAmount();
	class AReadyOrNotCharacter* GetLastDoorUser();
	float GetIncrementAngle();
	class FName GetFrontThreatOwningRoom();
	TMap<enum class EDoorDamageType, float> GetDoorStunDistance();
	struct FVector GetDoorMidLocation();
	TMap<enum class EDoorDamageType, float> GetDoorKillDistance();
	struct FVector GetBestDoorInteraction_FromStackUpArea(enum class EStackupGenArea& InStackUpArea, bool bDoorwayBased);
	struct FVector GetBestDoorInteraction_FromLocation(struct FVector& InInteractionLocation, bool bDoorwayBased);
	class FName GetBackThreatOwningRoom();
	class ADoorJam* GetAttachedWedge();
	class ATrapActorAttachedToDoor* GetAttachedTrap();
	void GenerateStackUpPoints();
	void GenerateClearPoints();
	void ForceDoorReset();
	void FlipStackUpArea(enum class EStackupGenArea* OutStackUpArea, bool bHorizontalFlip, bool bVerticalFlip);
	void Finished_DoorRam();
	void Finished_DoorKick_Success();
	void Finished_DoorExplode();
	enum class EStackupGenArea FindStackUpAreaFromLocation(struct FVector& InInteractionLocation);
	void ExplodeDoor(class AReadyOrNotCharacter* DoorBreacherCharacter, class AActor* ExplosionCauser, bool bKeepHinges);
	void EnableNavLink();
	bool DoesSWATKnowTrapState();
	bool DoesSuspectKnowTrapState();
	void DisableNavLink();
	void DisableAllInteractables();
	void DestroyNavLink();
	void DestroyChunk_Index(int32 ChunkIndex, struct FVector& Impulse, float ImpulseStrength);
	void DestroyChunk(class UDestructibleDoorChunkComponent* InChunk, struct FVector& Impulse, float ImpulseStrength);
	void DestroyAllChunks(struct FVector& Impulse, float ImpulseStrength, bool bKeepHinges);
	void DecreaseNumKicksToBreakDown(class AReadyOrNotCharacter* DoorKickCharacter, bool* bShouldOpenDoor, bool* bCanBreakLock, float KickChanceOffset);
	void DeactivateDoorBlocker();
	void CollapseDoor(class AReadyOrNotCharacter* DoorBreacherCharacter, const struct FVector& BreachLocation);
	void CloseSubDoor(class AReadyOrNotCharacter* DoorCloseCharacter, bool bInstant, bool bAnimateDoorHandle);
	void CloseDoor_Debug();
	void CloseDoor(class AReadyOrNotCharacter* DoorCloserCharacter, bool bInstant, bool bAnimateDoorHandle);
	bool CanTakeDamage(float Damage, struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	bool CanSpawnTrap();
	bool CanRamDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanPushDoorWhileBroken();
	bool CanPushDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanPullDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanPlaceC2Explosive(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanPeekDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanOpenDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanMirrorUnderDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanLockpickDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanKickDoor(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipWedge(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipOptiwand(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipMultitool(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipC2Explosive(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipBreachingShotgun(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanEquipBatteringRam(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanDeployWedge(class AReadyOrNotCharacter* PlayerCharacter);
	bool CanCloseDoor(class AReadyOrNotCharacter* PlayerCharacter);
	void CalculateRoomPositioning();
	struct FVector CalculateClosestPoint(const struct FVector& Location);
	void BreakDoorHandles();
	void BreakDoor(bool bDestroyAllChunks, class AReadyOrNotCharacter* DoorBreakerCharacter);
	void BreakAndDetachDoor(bool bDestroyAllChunks, class AReadyOrNotCharacter* DoorBreakerCharacter, float Impulse, float ForwardOffset);
	void BreachDoorFromPoint(class AReadyOrNotCharacter* DoorBreacherCharacter, const struct FVector& BreachPoint, float InIncrementAngle);
	void BreachDoor(class AReadyOrNotCharacter* DoorBreacherCharacter, float InIncrementAngle);
	float BodyRamDoor(class AReadyOrNotCharacter* DoorRamCharacter);
	void BlockAllDoorways();
	void AttachWedge(class ADoorJam* NewWedge);
	void AttachTrap(class ATrapActorAttachedToDoor* NewTrap, bool bAttachToDoor);
	void ApplyRandomDamageToChunks(float MinDamage, float MaxDamage);
	void ApplyDoorDamage(enum class EDoorDamageType InDoorDamage, class AReadyOrNotCharacter* Victim);
	bool AnyTopDoorChunksBroken();
	bool AnyMiddleDoorChunksBroken();
	bool AnyHingesLeft();
	bool AnyChunksDestroyed();
	bool AnyBottomDoorChunksBroken();
	bool AllTopDoorChunksBroken();
	bool AllMiddleDoorChunksBroken();
	bool AllMajorDoorChunksDestroyed();
	bool AllBottomDoorChunksBroken();
	void AIResponseToDoorDamage();
	void ActivateDoorBlockerForWorldGen();
};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.DoorBlockerVolume
class ADoorBlockerVolume : public AActor
{
public:
	class UBoxComponent*                         Bounds;                                            // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavModifierComponent*                 NavModifierComponent;                              // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ADoorBlockerVolume* GetDefaultObj();

};

// 0x20 (0x208 - 0x1E8)
// Class ReadyOrNot.DoorBreachActivity
class UDoorBreachActivity : public UDoorInteractionActivity
{
public:
	class ABaseItem*                             BreachItem;                                        // 0x1E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnBreachFinished;                                  // 0x1F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2675[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDoorBreachActivity* GetDefaultObj();

	void TickBreachedStage(float DeltaTime, float Uptime);
	void OnBreachFinished__DelegateSignature(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void OnBreacherKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	bool IsBreachFinished();
	void FinishDoorBreach();
	void ExitBreachedStage();
	void EnterBreachedStage();
};

// 0x8 (0x210 - 0x208)
// Class ReadyOrNot.KickDoorActivity
class UKickDoorActivity : public UDoorBreachActivity
{
public:
	uint8                                        Pad_2677[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UKickDoorActivity* GetDefaultObj();

	void OnDoorKicked();
};

// 0x10 (0x218 - 0x208)
// Class ReadyOrNot.C2DoorActivity
class UC2DoorActivity : public UDoorBreachActivity
{
public:
	uint8                                        Pad_267B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UC2DoorActivity* GetDefaultObj();

	void PerformDetonateC2Stage(float DeltaTime, float Uptime);
	void OnC2Placed();
	void OnC2Detonate();
	void EnterDetonateC2Stage();
	bool CanDetonateC2();
};

// 0x8 (0x210 - 0x208)
// Class ReadyOrNot.ShotgunDoorActivity
class UShotgunDoorActivity : public UDoorBreachActivity
{
public:
	uint8                                        Pad_267C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShotgunDoorActivity* GetDefaultObj();

	void OnDoorShotgunned();
	void OnDoorKicked();
};

// 0x8 (0x210 - 0x208)
// Class ReadyOrNot.RamDoorActivity
class URamDoorActivity : public UDoorBreachActivity
{
public:
	uint8                                        Pad_267D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URamDoorActivity* GetDefaultObj();

	void OnDoorRammed();
};

// 0x18 (0x220 - 0x208)
// Class ReadyOrNot.LaunchGrenadeThroughDoorActivity
class ULaunchGrenadeThroughDoorActivity : public UDoorBreachActivity
{
public:
	FMulticastInlineDelegateProperty_            OnLauncherReady;                                   // 0x208(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_267E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULaunchGrenadeThroughDoorActivity* GetDefaultObj();

};

// 0x40 (0x248 - 0x208)
// Class ReadyOrNot.ThrowItemThroughDoorActivity
class UThrowItemThroughDoorActivity : public UDoorBreachActivity
{
public:
	TSubclassOf<class ABaseItem>                 ThrowItemClass;                                    // 0x208(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThrowReady;                                      // 0x210(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnThrowingItem;                                    // 0x220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_267F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseItem*                             ThrownItem;                                        // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2680[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UThrowItemThroughDoorActivity* GetDefaultObj();

};

// 0x0 (0x248 - 0x248)
// Class ReadyOrNot.ThrowGrenadeThroughDoorActivity
class UThrowGrenadeThroughDoorActivity : public UThrowItemThroughDoorActivity
{
public:

	static class UClass* StaticClass();
	static class UThrowGrenadeThroughDoorActivity* GetDefaultObj();

};

// 0x0 (0x208 - 0x208)
// Class ReadyOrNot.CustomDoorBreachActivity
class UCustomDoorBreachActivity : public UDoorBreachActivity
{
public:

	static class UClass* StaticClass();
	static class UCustomDoorBreachActivity* GetDefaultObj();

	void TickBreachDoor(float DeltaTime);
};

// 0x50 (0xA20 - 0x9D0)
// Class ReadyOrNot.DoorJam
class ADoorJam : public ABaseItem
{
public:
	uint8                                        Pad_2683[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bSet : 1;                                          // Mask: 0x1, PropSize: 0x10x9D8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_175 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2684[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  PlacedBy;                                          // 0x9E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 PendingPlacement;                                  // 0x9E8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 JammedDoor;                                        // 0x9F0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DoorJamSocket;                                     // 0x9F8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         PlacedMesh;                                        // 0xA00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlacementTimer;                                    // 0xA08(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WedgeRemovalTime;                                  // 0xA0C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2685[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADoorJam* GetDefaultObj();

	void Server_StartDoorjamPlacement(class ADoor* PendingDoor);
	void Server_FinishDoorjamPlacement(class ADoor* PendingDoor);
	void OnRep_DoorjamSet();
	void Multicast_StartPlacement();
	void JamDoor(class ADoor* Door);
};

// 0xC0 (0xA90 - 0x9D0)
// Class ReadyOrNot.DoorRam
class ADoorRam : public ABaseDeployableGear
{
public:
	TArray<TSubclassOf<class AActor>>            AcceptableHitWhitelist;                            // 0x9D0(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        MaxHitDistance;                                    // 0x9E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2689[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UDamageType>               RamDamageTypeDefault;                              // 0x9E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               RamDamageTypeCrumble;                              // 0x9F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               RamDamageTypePlayer;                               // 0x9F8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrikePlayerDamage;                                // 0xA00(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            LastGoodHit;                                       // 0xA04(0x88)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_268A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADoorRam* GetDefaultObj();

	struct FHitResult TryGetHitPosition();
	void Server_StrikePlayer(class APlayerCharacter* TargetPlayer);
	void Server_StrikeDoor(class ADoor* TargetDoor);
	void OnBatteringRamHit();
	bool CanHitActor(struct FHitResult& TestHit);
};

// 0x8 (0x480 - 0x478)
// Class ReadyOrNot.DoorwayComponent
class UDoorwayComponent : public UBoxComponent
{
public:
	uint8                                        Pad_268B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDoorwayComponent* GetDefaultObj();

};

// 0x48 (0x2C8 - 0x280)
// Class ReadyOrNot.UnmannedVehicle
class AUnmannedVehicle : public APawn
{
public:
	uint8                                        Pad_2698[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      Pilot;                                             // 0x288(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Health;                                            // 0x290(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDead;                                             // 0x294(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2699[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxHealth;                                         // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_269A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  VehicleTabletName;                                 // 0x2A0(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class AHUD>                      PreviousHUD;                                       // 0x2B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHUD>                      VehicleHUD;                                        // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AUnmannedVehicle* GetDefaultObj();

	float TakeDamage(float Damage, struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void Server_StopPiloting(class AReadyOrNotPlayerController* CallingController);
	void Server_StartPiloting(class AReadyOrNotPlayerController* NewController);
	void OnDeath(class AController* EventInstigator, class AActor* DamageCauser);
	bool IsAlive();
	void HideActorsForTabletView(class USceneCaptureComponent2D* Component);
	enum class ETeamType GetTabletViewTeamColor();
	class USceneComponent* GetTabletViewComponent();
	class FText GetTabletNameText();
	class APlayerCharacter* GetPilot();
	float GetHealth();
	void Die(class AController* EventInstigator, class AActor* DamageCauser);
	bool CanTabletViewMe(class APlayerCharacter* TabletOwner, class AReadyOrNotGameState* GameState);
	bool CanControlWithTablet(class APlayerCharacter* TabletOwner);
	void AssumeTabletControl(class APlayerCharacter* TabletOwner);
};

// 0x2E8 (0x5B0 - 0x2C8)
// Class ReadyOrNot.Drone
class ADrone : public AUnmannedVehicle
{
public:
	TSubclassOf<class UUserWidget>               DroneWidgetClass;                                  // 0x2C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                           FPCameraRotationCurve;                             // 0x2D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FPCameraRotationResetSpeed;                        // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26AF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveVector*                          FPDamageCurve;                                     // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FPDamageSpeed;                                     // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxPitchTilt;                                      // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxRollTilt;                                       // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxRPM;                                            // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IdleRPM;                                           // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RPMThrottleMultiplier;                             // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ThrottleInterpSpeed;                               // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RotationInterpSpeed;                               // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TurnSpeed;                                         // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RotationInterpSpeedWhenSteady;                     // 0x30C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TurnSpeedWhenSteady;                               // 0x310(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinSpeed;                                          // 0x314(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxSpeed;                                          // 0x318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SpeedIncrementRate;                                // 0x31C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EDroneDamageSpeed, float>    DroneSpeedToDamageValues;                          // 0x320(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                        InvincibilityTimeAfterDamageApplied;               // 0x370(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              RotorRotation;                                     // 0x374(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        RPM;                                               // 0x380(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentAltitude;                                   // 0x384(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentPilotDistance;                              // 0x388(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26B1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            DroneTransform;                                    // 0x390(0x30)(BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                              TargetRotation;                                    // 0x3C0(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                              TargetSteadyCameraRotation;                        // 0x3CC(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bApplyingInput;                                    // 0x3D8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSteadyDrone;                                      // 0x3D9(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bDroneThirdPerson;                                 // 0x3DA(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26B2[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x3E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerController*           DroneController;                                   // 0x3E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerController*           OriginalController;                                // 0x3F0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26B4[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         FlightBox;                                         // 0x418(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                Mesh;                                              // 0x420(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                      DetectionSphere;                                   // 0x428(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFloatingPawnMovement*                 FloatingMovementComponent;                         // 0x430(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpringArmComponent*                   TPCameraArm;                                       // 0x438(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      TPCamera;                                          // 0x440(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                       Audio;                                             // 0x448(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      FPCamera;                                          // 0x450(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                           DroneWidgetHUD;                                    // 0x458(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_26B5[0x150];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADrone* GetDefaultObj();

	void UpdatePilotingInfo();
	void ToggleThirdPerson();
	void Tick_CameraReset();
	void Tick_CameraDamage();
	void SteadyDrone();
	void Server_UpdateDrone(const struct FTransform& NewTransform, float InRPM);
	void RetrieveLastHitDamageInfo(enum class EDroneDamageSpeed* InDroneDamageSpeed, float* InDamageAmount);
	void QuickTurn();
	void OnDroneHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnDetectionSphereOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	bool IsStabilized();
	bool IsSpeedThresholdMet(float InSpeedAsPercentage);
	bool IsMovingRight();
	bool IsMovingLeft();
	bool IsMovingForward();
	bool IsMovingBackward();
	bool IsMoving();
	bool IsInvincible();
	bool IsInThirdPersonMode();
	bool IsApplyingInput();
	void IncrementSpeed(float Value);
	bool HasPilot();
	float GetMinSpeed();
	float GetMaxSpeed();
	float GetMaxRPM();
	float GetIdleRPM();
	class AReadyOrNotPlayerController* GetDroneController();
	float GetDistanceToPilot();
	float GetCurrentSpeedAsPercentage();
	float GetCurrentRPM();
	struct FVector GetCurrentMovementDirection();
	float GetAltitude();
	void Finished_CameraDamage();
	void ExitDrone();
	void Client_UpdateDrone(const struct FTransform& NewTransform, float InRPM);
};

// 0x148 (0x410 - 0x2C8)
// Class ReadyOrNot.DroneVehicle
class ADroneVehicle : public AUnmannedVehicle
{
public:
	class UBoxComponent*                         FlightBox;                                         // 0x2C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                Mesh;                                              // 0x2D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                       Audio;                                             // 0x2D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                      FirstPersonCamera;                                 // 0x2E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                   ThirdPersonSpringArm;                              // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                      ThirdPersonCamera;                                 // 0x2F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFloatingPawnMovement*                 FloatingMovementComponent;                         // 0x2F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTilt;                                           // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxRPM;                                            // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdleRPM;                                           // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RPMForceScale;                                     // 0x30C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RPMThrottleMultiplier;                             // 0x310(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ThrottleInterpSpeed;                               // 0x314(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RotationInterpSpeed;                               // 0x318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnSpeed;                                         // 0x31C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RotationInterpSpeedWhenSteady;                     // 0x320(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnSpeedWhenSteady;                               // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinSpeed;                                          // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSpeed;                                          // 0x32C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedIncrementRate;                                // 0x330(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InvincibilityTimeAfterDamageApplied;               // 0x334(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RPM;                                               // 0x338(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotorRotation;                                     // 0x33C(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        CurrentAltitude;                                   // 0x348(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurrentPilotDistance;                              // 0x34C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                            DroneTransform;                                    // 0x350(0x30)(BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              TargetRotation;                                    // 0x380(0xC)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_26B9[0x34];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bApplyingInput;                                    // 0x3C0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSteadyDrone;                                      // 0x3C1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26BA[0x26];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      DroneOwner;                                        // 0x3E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                World;                                             // 0x3F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26BB[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADroneVehicle* GetDefaultObj();

	void UpdatePilotingInfo();
	void Server_UpdateDroneTransform(const struct FTransform& NewTransform);
	void OnRep_DroneMovement();
	void OnDroneHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Drone_Yaw(float Val);
	void Drone_ToggleThirdPerson();
	void Drone_Throttle(float Val);
	void Drone_Steady();
	void Drone_Right(float Val);
	void Drone_QuickTurn();
	void Drone_MoveForward(float Val);
	void Drone_Exit();
};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.DropWeaponAnimNotify
class UDropWeaponAnimNotify : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UDropWeaponAnimNotify* GetDefaultObj();

};

// 0x30 (0x1F8 - 0x1C8)
// Class ReadyOrNot.DuelingCombatMove
class UDuelingCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_26BC[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDuelingCombatMove* GetDefaultObj();

};

// 0xA0 (0x2C0 - 0x220)
// Class ReadyOrNot.DynamicInteractableWorldItem
class ADynamicInteractableWorldItem : public AActor
{
public:
	uint8                                        Pad_26BE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bRestartOnToggle;                                  // 0x228(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanToggleIfDestroyed;                             // 0x229(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bItemOn;                                           // 0x22A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bItemDestroyed;                                    // 0x22B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26BF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   InteractAudioFMOD;                                 // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   IntactRunningAudioFMOD1;                           // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   DestroyedRunningAudioFMOD;                         // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   ImpactAudioFMOD;                                   // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInterface*>            IntactOnMaterials;                                 // 0x258(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInterface*>            IntactOffMaterials;                                // 0x268(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInterface*>            DestroyedOnMaterials;                              // 0x278(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInterface*>            DestroyedOffMaterials;                             // 0x288(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  ItemMesh;                                          // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           PostDestructionMesh;                               // 0x2A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*              ImpactParticle;                                    // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    PhysicsImpactDecal;                                // 0x2B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PhysicsImpactDecalScale;                           // 0x2B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26C0[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADynamicInteractableWorldItem* GetDefaultObj();

	void OnItemStateToggled();
	void OnItemDestroyed();
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Multicast_ItemStateToggle();
	void Multicast_DestroyItem();
};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.DynamicWorldActor
class ADynamicWorldActor : public AActor
{
public:
	class FName                                  DynamicLabel;                                      // 0x220(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReplicateSpawn;                                   // 0x228(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26C1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADynamicWorldActor* GetDefaultObj();

	void SetDynamicSpawn(bool bShouldSpawn);
	void OnRep_ReplicateSpawn();
	void OnDynamicallySpawned();
	void CheckDynamicSpawn();
};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.DynamicWorldItem
class ADynamicWorldItem : public AActor
{
public:
	class UStaticMeshComponent*                  ItemMesh;                                          // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*              ImpactParticle;                                    // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   ImpactAudioFMOD;                                   // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           PostImpactMesh;                                    // 0x238(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    PostImpactMaterial;                                // 0x240(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    PhysicsImpactDecal;                                // 0x248(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PhysicsImpactDecalScale;                           // 0x250(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bItemDestroyed;                                    // 0x254(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26C4[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADynamicWorldItem* GetDefaultObj();

	void OnRep_ItemDestroyed();
	void OnItemDestroyed();
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Multicast_DestroyItem();
};

// 0x68 (0x288 - 0x220)
// Class ReadyOrNot.Elevator
class AElevator : public AActor
{
public:
	class USplineComponent*                      ElevatorPath;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMoveElevator;                                     // 0x228(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCloseDoors;                                       // 0x229(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26C7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                ElevatorMesh;                                      // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   DestinationReachedSound;                           // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   FloorReachedSound;                                 // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   DoorOpenSoundFMOD;                                 // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   DoorCloseSoundFMOD;                                // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               DefaultElevatorLoc;                                // 0x258(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Floors;                                            // 0x264(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ElevatorSpeed;                                     // 0x268(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentFloor;                                      // 0x26C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MoveElevatorDelay;                                 // 0x270(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26C8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          MoveElevatorDelay_Handle;                          // 0x278(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SelectedFloor;                                     // 0x280(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26C9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AElevator* GetDefaultObj();

	void StartMovingElevator();
	void SetSelectedFloor(int32 Floor);
	void Server_SetSelectedFloor(int32 Floor);
	void Server_OpenCloseDoors(bool bShouldCloseDoors);
	void Multicast_PlayFloorReachedSound();
	void Multicast_PlayDoorOpenSound();
	void Multicast_PlayDoorCloseSound();
	void Multicast_PlayDestinationReachedSound();
};

// 0x40 (0x520 - 0x4E0)
// Class ReadyOrNot.ElevatorButtonComponent
class UElevatorButtonComponent : public UStaticMeshComponent
{
public:
	uint8                                        Pad_26CA[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bOverrideButtonPromptText;                         // 0x4F0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26CB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ButtonPromptText;                                  // 0x4F8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class AElevator*                             OwningElevator;                                    // 0x510(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDoorButton;                                       // 0x518(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDoorClose;                                        // 0x519(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26CC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Floor;                                             // 0x51C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UElevatorButtonComponent* GetDefaultObj();

};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.EngageTargetLessLethalActivity
class UEngageTargetLessLethalActivity : public UBaseActivity
{
public:
	class AReadyOrNotCharacter*                  TargetCharacter;                                   // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26CD[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEngageTargetLessLethalActivity* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.EnvQueryContext_GasSafePoints
class UEnvQueryContext_GasSafePoints : public UEnvQueryContext
{
public:

	static class UClass* StaticClass();
	static class UEnvQueryContext_GasSafePoints* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.EnvQueryContext_GasSources
class UEnvQueryContext_GasSources : public UEnvQueryContext
{
public:

	static class UClass* StaticClass();
	static class UEnvQueryContext_GasSources* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.EnvQueryContext_NavProjectedQuerier
class UEnvQueryContext_NavProjectedQuerier : public UEnvQueryContext
{
public:

	static class UClass* StaticClass();
	static class UEnvQueryContext_NavProjectedQuerier* GetDefaultObj();

};

// 0xB8 (0x138 - 0x80)
// Class ReadyOrNot.EnvQueryGenerator_GasPoints
class UEnvQueryGenerator_GasPoints : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue             GridRadius;                                        // 0x80(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue             SpaceBetween;                                      // 0xB8(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSubclassOf<class UEnvQueryContext>          GenerateAround;                                    // 0xF0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UNavigationQueryFilter>    NavigationFilter;                                  // 0xF8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue             SafePointsBufferDistance;                          // 0x100(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UEnvQueryGenerator_GasPoints* GetDefaultObj();

};

// 0x70 (0x2F0 - 0x280)
// Class ReadyOrNot.EnvQueryTest_GasPath
class UEnvQueryTest_GasPath : public UEnvQueryTest_Pathfinding
{
public:
	struct FAIDataProviderBoolValue              CalculatePathLengthToAllContexts;                  // 0x280(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue             SafePointsBufferDistance;                          // 0x2B8(0x38)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UEnvQueryTest_GasPath* GetDefaultObj();

};

// 0x68 (0x288 - 0x220)
// Class ReadyOrNot.PickupActor
class APickupActor : public AActor
{
public:
	uint8                                        Pad_26D6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActorPickedUp;                                   // 0x228(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActorPickedUp_NoParam;                           // 0x238(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActorDropped;                                    // 0x248(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                  PickupName;                                        // 0x258(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                SkeletalMesh;                                      // 0x260(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  StaticMesh;                                        // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x270(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                InteractableComponent;                             // 0x278(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                PickupInstigator;                                  // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class APickupActor* GetDefaultObj();

	void ToggleObjectiveMarker();
	void ShowObjectiveMarker();
	void OnActorPickedUp_NoParam__DelegateSignature();
	void OnActorPickedUp__DelegateSignature(class AActor* PickedActor);
	void OnActorDropped__DelegateSignature(class AActor* DroppedActor);
	void HideObjectiveMarker();
	class AActor* GetPickupInstigator();
	bool CanPickUpNow(class APlayerCharacter* PickerUpper);
	void ActorPickedUp(class AActor* InPickupInstigator);
	void ActorDropped(class AActor* InDroppedInstigator);
};

// 0x40 (0x2C8 - 0x288)
// Class ReadyOrNot.EvidenceActor
class AEvidenceActor : public APickupActor
{
public:
	uint8                                        Pad_26D7[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UScoringComponent*                     ScoringComponent;                                  // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                EvidenceName;                                      // 0x2A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEvidenceExtracted : 1;                            // Mask: 0x1, PropSize: 0x10x2B8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_176 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EEvidenceActorState               PreviousEvidenceState;                             // 0x2B9(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EEvidenceActorState               EvidenceState;                                     // 0x2BA(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsBeingCollected;                                 // 0x2BB(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentCollectionTime;                             // 0x2BC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxCollectionTime;                                 // 0x2C0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInteractHeld : 1;                                 // Mask: 0x1, PropSize: 0x10x2C4(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26D8[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEvidenceActor* GetDefaultObj();

	void UpdateEvidenceCollection_COOP(float DeltaTime);
	void StartExtractingEvidence();
	void OnRep_EvidenceStateChanged();
	class FString GetEvidenceName();
	void FinishExtractingEvidence();
};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.EvidenceExtractionDevice
class AEvidenceExtractionDevice : public AActor
{
public:
	uint8                                        Pad_26D9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EvidenceExtractionTime;                            // 0x238(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26DA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEvidenceExtractionDevice* GetDefaultObj();

	void TryExtractEvidence(class APlayerCharacter* EvidencePossessor);
	bool IsExtracting();
	bool HasEvidenceToExtract();
	bool CanStartExtraction();
	bool CanCollectEvidence();
};

// 0x28 (0x268 - 0x240)
// Class ReadyOrNot.EvidenceExtractionDevice_Incrim
class AEvidenceExtractionDevice_Incrim : public AEvidenceExtractionDevice
{
public:
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent_WayPoint;                 // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMapActorComponent*                    MapActorComponent;                                 // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                MapSectionName;                                    // 0x258(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AEvidenceExtractionDevice_Incrim* GetDefaultObj();

};

// 0x18 (0x250 - 0x238)
// Class ReadyOrNot.EvidenceSpawnPoint
class AEvidenceSpawnPoint : public AActorSpawnPoint
{
public:
	TSubclassOf<class AEvidenceActor>            EvidenceActorClass;                                // 0x238(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASplineTrigger_Incrimination*          EvidenceSearchArea;                                // 0x240(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingTrigger_Incrimination*        EvidenceBuilding;                                  // 0x248(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AEvidenceSpawnPoint* GetDefaultObj();

};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.ExfilActor
class AExfilActor : public AActor
{
public:
	uint8                                        Pad_26DE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  BaseMesh;                                          // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26DF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AExfilActor* GetDefaultObj();

};

// 0x50 (0x270 - 0x220)
// Class ReadyOrNot.ExfilPortal
class AExfilPortal : public AActor
{
public:
	uint8                                        Pad_26E4[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScoringComponent*                     ScoringComponent;                                  // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         CollisionComponent;                                // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ASWATCharacter*>                OverlappingSwatMembers;                            // 0x248(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>          CompsToOutline;                                    // 0x258(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_26E5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShowWarningDialogue;                              // 0x269(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26E6[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AExfilPortal* GetDefaultObj();

	void ServerTriggerExfil();
	void OnPlayerInteracted();
	void OnMissionSoftComplete();
	void OnExfilSwatMemberKilled(class AReadyOrNotCharacter* Killer, class AReadyOrNotCharacter* KilledMember);
	void OnExfilEnabledChange(bool bEnabled);
	void MulticastEnableExfil(bool bEnable);
	void ExfiltrateMission();
	void ActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void ActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.ExplosionGibs
class AExplosionGibs : public AActor
{
public:
	class UBloodData*                            BloodData;                                         // 0x220(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AExplosionGibs* GetDefaultObj();

	void SpawnBloodDecal(struct FHitResult& Hit);
	void SetupGibsForSkeletalMesh(class USkeletalMeshComponent* Mesh);
};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.ExplosiveContainer
class AExplosiveContainer : public AActor
{
public:
	class UStaticMeshComponent*                  BaseMesh;                                          // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              FireEffectParticle;                                // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ExplosionEffectParticle;                           // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   FMODFireAudioComponent;                            // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26EA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHideMeshAfterDetonation;                          // 0x242(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26EB[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    ScorchDecal;                                       // 0x248(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODExplosionAudio;                                // 0x250(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UStunDamage>               StunDamageType;                                    // 0x258(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       ExplosionScreenShake;                              // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           ExplosionInstigator;                               // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimerUntilExplosionOnceTriggered;                  // 0x270(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDamageToTrigger;                                // 0x274(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AExplosiveContainer* GetDefaultObj();

	void Multicast_TriggerExplosive();
	void Multicast_PlayExplosionEffects();
};

// 0x90 (0xAD0 - 0xA40)
// Class ReadyOrNot.SuspectArmour
class ASuspectArmour : public ABaseArmour
{
public:
	struct FSuspectArmourData                    ArmourData;                                        // 0xA40(0x70)(Net, RepNotify, NativeAccessSpecifierPrivate)
	float                                        Durability;                                        // 0xAB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26EC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BlockedSoundEvent;                                 // 0xAB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PenetratedSoundEvent;                              // 0xAC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26ED[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASuspectArmour* GetDefaultObj();

	void OnRep_ArmourData();
};

// 0x80 (0xB50 - 0xAD0)
// Class ReadyOrNot.ExplosiveVest
class AExplosiveVest : public ASuspectArmour
{
public:
	uint8                                        Pad_26F0[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldExplodeOnHit;                               // 0xAE0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldExplodeOnDeath;                             // 0xAE1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26F1[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UDamageType>               ExplosionDamageType;                               // 0xAE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDamageOnDetonation;                             // 0xAF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDamageOnDetonation;                             // 0xAF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageInnerRadius;                                 // 0xAF8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageOuterRadius;                                 // 0xAFC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionEffectDelay;                              // 0xB00(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionEffectRandomDelay;                        // 0xB04(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionDamageDelay;                              // 0xB08(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26F2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DetonationMontage;                                 // 0xB10(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ExplosiveVestSocket;                               // 0xB20(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       ExplosionParticle;                                 // 0xB28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ExplosionEvent;                                    // 0xB30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DetonationEvent;                                   // 0xB38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       ExplosionScreenShake;                              // 0xB40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionScreenShakeRadius;                        // 0xB48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26F3[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AExplosiveVest* GetDefaultObj();

	void Multicast_PlayPreExplosionEffects();
	void Multicast_PlayExplosionEffects();
	void ExplodeVest();
};

// 0x60 (0x830 - 0x7D0)
// Class ReadyOrNot.FirefightGM
class AFirefightGM : public AReadyOrNotGameMode_PVP
{
public:
	bool                                         bSuddenDeath;                                      // 0x7D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26F7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            TeamKilledSound_SERT_RED;                          // 0x7D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            TeamKilledSound_SERT_BLUE;                         // 0x7E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchLoopMusic;                                    // 0x7E8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchStartMusic;                                   // 0x7F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchEndMusic;                                     // 0x7F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSavedLoadout>                 RandomLoadouts;                                    // 0x800(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSavedLoadout>                 GeneratedLoadouts;                                 // 0x810(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        NumRedSpawned;                                     // 0x820(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumBlueSpawned;                                    // 0x824(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26F8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFirefightGM* GetDefaultObj();

	void RegenerateRandomLoadouts();
	int32 GetNumberOfActivePlayersOnTeam(enum class ETeamType Team);
};

// 0x18 (0x7F8 - 0x7E0)
// Class ReadyOrNot.FirefightGS
class AFirefightGS : public AReadyOrNotGameState
{
public:
	class FText                                  FreeTextLocalized;                                 // 0x7E0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AFirefightGS* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.FireOnDroppedAnimNotify
class UFireOnDroppedAnimNotify : public UAnimNotify
{
public:
	float                                        ChanceToFire;                                      // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26F9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFireOnDroppedAnimNotify* GetDefaultObj();

};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.FlankingAvoidanceVolume
class AFlankingAvoidanceVolume : public AActor
{
public:
	class UBoxComponent*                         Bounds;                                            // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavModifierComponent*                 NavModifierComponent;                              // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AFlankingAvoidanceVolume* GetDefaultObj();

};

// 0x48 (0x210 - 0x1C8)
// Class ReadyOrNot.FlankingCombatMove
class UFlankingCombatMove : public UBaseCombatMoveActivity
{
public:
	class AReadyOrNotCharacter*                  FlankingAgainstCharacter;                          // 0x1C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFlankingAvoidanceVolume*              FlankingAvoidanceVolume;                           // 0x1D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_26FA[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFlankingCombatMove* GetDefaultObj();

};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.FlashbangDamageType
class UFlashbangDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UFlashbangDamageType* GetDefaultObj();

};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.FlashLightTrackingPoint
class AFlashLightTrackingPoint : public AActor
{
public:
	uint8                                        Pad_26FB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsPrimary : 1;                                    // Mask: 0x1, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_177 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_26FC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  MeshComp;                                          // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ACyberneticController*>         SensedByControllers;                               // 0x240(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_26FD[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFlashLightTrackingPoint* GetDefaultObj();

};

// 0x48 (0x210 - 0x1C8)
// Class ReadyOrNot.FleeingCombatMove
class UFleeingCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_26FF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AThreatAwarenessActor*>         UsedFleePoints;                                    // 0x1D0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AThreatAwarenessActor*>         LastExitPoints;                                    // 0x1E0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AThreatAwarenessActor*                 LastFleePoint;                                     // 0x1F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2700[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFleeingCombatMove* GetDefaultObj();

	enum class EFleeType GetFleeType();
};

// 0x40 (0x3D0 - 0x390)
// Class ReadyOrNot.FMODAudioPropagationComponent
class UFMODAudioPropagationComponent : public UFMODAudioComponent
{
public:
	uint8                                        Pad_2702[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               AudioPlayLocation;                                 // 0x3A8(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        VolumeToSet;                                       // 0x3B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SilentDistance;                                    // 0x3B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OcclusionAmount;                                   // 0x3BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinDistance;                                       // 0x3C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPlayPropagation;                                  // 0x3C4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2703[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFMODAudioPropagationComponent* GetDefaultObj();

	void PlayEventAttached(class UFMODEvent* EventToPlay, class USceneComponent* CompToAttach, class FName AttachPoint, const TArray<struct FMODParam>& Params);
	struct FFMODEventInstance PlayEvent(class UFMODEvent* EventToPlay, const struct FVector& Origin, const TArray<struct FMODParam>& Params);
	bool CheckOcclusion();
};

// 0x18 (0x490 - 0x478)
// Class ReadyOrNot.FootstepFoleyComponent
class UFootstepFoleyComponent : public UBoxComponent
{
public:
	class UFMODEvent*                            SetEventTo;                                        // 0x478(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SetEventToRemote;                                  // 0x480(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayOnPlayer;                                     // 0x488(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayEveryStep;                                    // 0x489(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2707[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFootstepFoleyComponent* GetDefaultObj();

	void StoppedOverlapping(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void StartedOverlapping(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
};

// 0x18 (0x270 - 0x258)
// Class ReadyOrNot.FootstepFoleyVolume
class AFootstepFoleyVolume : public AVolume
{
public:
	class UFMODEvent*                            FootstepFoleyEvent;                                // 0x258(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FootstepFoleyEventFirstPerson;                     // 0x260(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNPCsTriggerFootstepFoley;                         // 0x268(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2709[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFootstepFoleyVolume* GetDefaultObj();

	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x0 (0xD0 - 0xD0)
// Class ReadyOrNot.FootstepImpactEffectsPool
class UFootstepImpactEffectsPool : public UObjectPoolBase
{
public:

	static class UClass* StaticClass();
	static class UFootstepImpactEffectsPool* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.FootstepNativeAnimNotify
class UFootstepNativeAnimNotify : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UFootstepNativeAnimNotify* GetDefaultObj();

};

// 0x8 (0x260 - 0x258)
// Class ReadyOrNot.ForceLowReadyVolume
class AForceLowReadyVolume : public AVolume
{
public:
	bool                                         bForceLowReadyWhileAimingAt;                       // 0x258(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceLowReadyWhileInside;                         // 0x259(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_270B[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AForceLowReadyVolume* GetDefaultObj();

};

// 0x10 (0x780 - 0x770)
// Class ReadyOrNot.FreeMode
class AFreeMode : public AReadyOrNotGameMode
{
public:
	float                                        RespawnTime;                                       // 0x770(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_270C[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFreeMode* GetDefaultObj();

};

// 0x40 (0x2A0 - 0x260)
// Class ReadyOrNot.FriendsList
class UFriendsList : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnSuccess;                                         // 0x260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFailure;                                         // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                       FriendsList;                                       // 0x280(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_270E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFriendsList* GetDefaultObj();

	void OnFriendsListUpdated__DelegateSignature();
	void GetFriendsList();
	struct FBPUniqueNetId CreateUniqueNetIdFromString(const class FString& PlatformId);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GameFeatureLibrary
class UGameFeatureLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UGameFeatureLibrary* GetDefaultObj();

	bool IsGameVersionEnabled(enum class EGameVersionRestriction InFeature);
	bool IsGameDemo();
	bool IsFullGame();
	bool IsFeatureEnabled(enum class EGameFeature InFeature);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GamepadHelperLib
class UGamepadHelperLib : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UGamepadHelperLib* GetDefaultObj();

	int32 GetActiveButton(int32 CurrentIndex, int32 NavigationDirection, const TArray<bool>& buttonAvailability);
	bool EnableCommonInputPreprocessing(class UWorld* World, bool Enable);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GameplayConfig
class UGameplayConfig : public UObject
{
public:

	static class UClass* StaticClass();
	static class UGameplayConfig* GetDefaultObj();

	void ReloadConfig();
	struct FVector2D GetVector2D(const class FString& ConfigKey, struct FVector2D& FallbackValue);
	struct FVector GetVector(const class FString& ConfigKey, struct FVector& FallbackValue);
	TArray<class FString> GetStringArray_SingleLine(const class FString& ConfigKey, TArray<class FString>& FallbackValue);
	TArray<class FString> GetStringArray(const class FString& ConfigKey, TArray<class FString>& FallbackValue);
	class FString GetString(const class FString& ConfigKey, const class FString& FallbackValue);
	int32 GetInt(const class FString& ConfigKey, int32 FallbackValue);
	float GetFloat(const class FString& ConfigKey, float FallbackValue);
	bool GetBool(const class FString& ConfigKey, bool FallbackValue);
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.GasNavLinkGenerator
class AGasNavLinkGenerator : public AActor
{
public:
	class UBillboardComponent*                   BillboardComponent;                                // 0x220(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AGasNavLinkGenerator* GetDefaultObj();

	void GenerateNavLinks();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GasSource
class IGasSource : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGasSource* GetDefaultObj();

	bool IsReleasingGas();
	int32 GetMaximumGasPoints();
	bool GetGasReleaseLocation(struct FVector* OutLocation);
	float GetGasRadius();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GatherDebugInterface
class IGatherDebugInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGatherDebugInterface* GetDefaultObj();

	void GatherDebugText(class FString* OutText);
	void GatherDebugData(TArray<struct FDebugData>* OutDebugData);
	void DrawVisualDebug();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.GetFriendlyName
class IGetFriendlyName : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IGetFriendlyName* GetDefaultObj();

	class FString GetFriendlyName();
	class UTexture2D* GetFriendlyIcon();
};

// 0x70 (0x120 - 0xB0)
// Class ReadyOrNot.GibComponent
class UGibComponent : public UActorComponent
{
public:
	uint8                                        Pad_2719[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EGibAreas>                 GibbedAreas;                                       // 0xC8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	class UBloodData*                            BloodData;                                         // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                BodyMesh;                                          // 0xE0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                FaceMesh;                                          // 0xE8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           GibHead;                                           // 0xF0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           GibArms;                                           // 0xF8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           GibLegs;                                           // 0x100(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           BoneHead;                                          // 0x108(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           BoneArms;                                          // 0x110(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                           BoneLegs;                                          // 0x118(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UGibComponent* GetDefaultObj();

};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.GlassActor
class AGlassActor : public AActor
{
public:
	class UDestructibleComponent*                DestructibleWindow;                                // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>             RandomGlassMaterial;                               // 0x228(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>             RandomShatteredGlassMaterial;                      // 0x238(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnApplyDamageToWindow;                             // 0x248(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AGlassActor* GetDefaultObj();

	void OnApplyDamageToWindow__DelegateSignature(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
	void Multicast_TakeDamage(float DamageAmount, struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void Multicast_ApplyDamageToWindow(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
	class UMaterialInterface* GetRandomShatteredGlassMaterial();
	class UMaterialInterface* GetRandomGlassMaterial();
};

// 0x240 (0x1670 - 0x1430)
// Class ReadyOrNot.GrenadeLauncher
class AGrenadeLauncher : public ABaseMagazineWeapon
{
public:
	TArray<class AGrenadeProjectile*>            AppliedGrenadeProjectilePaths;                     // 0x1430(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AGrenadeProjectile*                    LastSimulatedGrenade;                              // 0x1440(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LaunchDistance;                                    // 0x1448(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        GrenadeBounciness;                                 // 0x144C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2728[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       BounceParticleEffect;                              // 0x1458(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODEvent*                            BounceFMODEvent;                                   // 0x1460(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       FirstBouncePath;                                   // 0x1468(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FHitResult                            FirstBounceHit;                                    // 0x1478(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2729[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       SecondBouncePath;                                  // 0x1508(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FHitResult                            SecondBounceHit;                                   // 0x1518(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_272A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       ThirdBouncePath;                                   // 0x15A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FHitResult                            ThirdBounceHit;                                    // 0x15B8(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_272B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BouncePt1;                                         // 0x1658(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        BouncePt2;                                         // 0x165C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        BouncePt3;                                         // 0x1660(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_272C[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGrenadeLauncher* GetDefaultObj();

	void UpdateServerPath(TArray<struct FVector_NetQuantize>& Path, int32 Bounce1, int32 Bounce2, int32 Bounce3);
};

// 0xA0 (0x408 - 0x368)
// Class ReadyOrNot.GrenadeProjectile
class AGrenadeProjectile : public ABulletProjectile
{
public:
	class URadialForceComponent*                 DetonationRadialForce;                             // 0x368(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeDetonated;                                // 0x370(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2730[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector_NetQuantize                   ProjectileLocation;                                // 0x384(0xC)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DetonationTime;                                    // 0x390(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DetonationBetweenTime;                             // 0x394(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ElapsedTime;                                       // 0x398(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DetonationCount;                                   // 0x39C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DetonationMax;                                     // 0x3A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2732[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGrenadeDamage>                GrenadeDamage;                                     // 0x3A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bIncreaseRadiusOverTime;                           // 0x3B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2733[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            DetonationSound;                                   // 0x3C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlayDetonationSoundOnce : 1;                      // Mask: 0x1, PropSize: 0x10x3C8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_178 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2734[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       BounceLocations;                                   // 0x3D0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bDetonateOnValidation;                             // 0x3E0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2735[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LocationRecordingRate;                             // 0x3E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RecordDistanceThreshold;                           // 0x3E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2736[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       PastLocations;                                     // 0x3F0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2737[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGrenadeProjectile* GetDefaultObj();

	void RecordLocation();
	void OnProjectileDetonated__DelegateSignature(class AGrenadeProjectile* Projectile);
	void OnDetonationComplete_Blueprint();
	void OnDetonate_Blueprint();
	void OnDetonate();
};

// 0x1B0 (0x980 - 0x7D0)
// Class ReadyOrNot.GunGameGM
class AGunGameGM : public AReadyOrNotGameMode_PVP
{
public:
	float                                        RespawnTime;                                       // 0x7D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSuddenDeath;                                      // 0x7D4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2739[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class ABaseItem>>       ItemList;                                          // 0x7D8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSavedLoadout                         DefaultItems;                                      // 0x7E8(0x188)(Edit, NativeAccessSpecifierPublic)
	int32                                        KillsToProgress;                                   // 0x970(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_273B[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGunGameGM* GetDefaultObj();

	TArray<class AReadyOrNotPlayerState*> FindTopKillers();
	class ABaseItem* EquipNextGun(class APlayerCharacter* Player, bool bAdvanceGunIdx);
};

// 0x0 (0x7E0 - 0x7E0)
// Class ReadyOrNot.GunGameGS
class AGunGameGS : public AReadyOrNotGameState
{
public:

	static class UClass* StaticClass();
	static class AGunGameGS* GetDefaultObj();

};

// 0x8 (0xA50 - 0xA48)
// Class ReadyOrNot.HardcoreMoneyGM
class AHardcoreMoneyGM : public ACoopGM
{
public:
	uint8                                        Pad_273F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AHardcoreMoneyGM* GetDefaultObj();

};

// 0x0 (0x8E0 - 0x8E0)
// Class ReadyOrNot.HardcoreMoneyGS
class AHardcoreMoneyGS : public ACoopGS
{
public:

	static class UClass* StaticClass();
	static class AHardcoreMoneyGS* GetDefaultObj();

};

// 0x2D8 (0x4A0 - 0x1C8)
// Class ReadyOrNot.HardCoverCombatMove
class UHardCoverCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_2744[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTakeCoverActivity*                    TakeCoverActivity;                                 // 0x240(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTakeCoverAtLandmarkActivity*          TakeCoverAtLandmarkActivity;                       // 0x248(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2745[0x1A8];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  LastTrackedEnemy;                                  // 0x3F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCoverInstigatorStimulus              LastCoverInstigatorStimulus;                       // 0x400(0x50)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FCoverInstigatorStimulus              PendingCoverInstigatorStimulus;                    // 0x450(0x50)(NoDestructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UHardCoverCombatMove* GetDefaultObj();

	void TrackNewEnemy(class AReadyOrNotCharacter* NewTrackedEnemy);
	void OnTakeCoverAtLandmarkActivityFinished(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void OnTakeCoverActivityFinished(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void CoverFoundDelegate__DelegateSignature();
	void CoverEventDelegate__DelegateSignature();
};

// 0xB28 (0x1568 - 0xA40)
// Class ReadyOrNot.Headwear
class AHeadwear : public ABaseArmour
{
public:
	bool                                         bHasHelmet;                                        // 0xA40(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2746[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Durability;                                        // 0xA44(0x4)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageReduction;                                   // 0xA48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RicochetChance;                                    // 0xA4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            RicochetEvent;                                     // 0xA50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bProtectsAgainstInstantKnockout;                   // 0xA58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMaskVoiceFilter;                               // 0xA59(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2747[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            VoiceLineEventOverrideSpatalized;                  // 0xA60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            VoiceLineEventOverrideLocal;                       // 0xA68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>               MaskOverlay;                                       // 0xA70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnablePostProcess;                                // 0xA78(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2749[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  MaskPostProcess;                                   // 0xA80(0x560)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FPostProcessSettings                  MaskSupressionPostProcess;                         // 0xFE0(0x560)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                         bOverrideBreathingSound;                           // 0x1540(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_274B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundCue*>                     OverriddenBreathingSounds;                         // 0x1548(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        GapBetweenBreaths;                                 // 0x1558(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSpawnedOverlay;                                   // 0x155C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_274C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           SpawnedMaskOverlay;                                // 0x1560(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AHeadwear* GetDefaultObj();

};

// 0x140 (0x3A0 - 0x260)
// Class ReadyOrNot.HealthStatusWidget
class UHealthStatusWidget : public UUserWidget
{
public:
	class UImage*                                Icon_Image;                                        // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Percentage_Text;                                   // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           HealthIconBrush;                                   // 0x270(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FSlateBrush                           EmptyHealthIconBrush;                              // 0x2F8(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FLinearColor                          ZeroPercentColor;                                  // 0x380(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          OneHundredPercentColor;                            // 0x390(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UHealthStatusWidget* GetDefaultObj();

	void UpdateIconColor(float CurrentValue, float MinValue, float MaxValue);
	void UpdateHealthPercentage(float CurrentValue, float MaxValue);
	void AutoDetermineIconImage();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.HideCursorWidget
class UHideCursorWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UHideCursorWidget* GetDefaultObj();

};

// 0x70 (0x290 - 0x220)
// Class ReadyOrNot.HighgroundVolume
class AHighgroundVolume : public AActor
{
public:
	uint8                                        Pad_2752[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AudioDebounce;                                     // 0x228(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2753[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         Bounds;                                            // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                       AudioComp;                                         // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWatching;                                         // 0x240(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2754[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SierraDesignation;                                 // 0x244(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  VolumeLabel;                                       // 0x248(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    ContactEnteredVolumeAudio;                         // 0x250(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    ContactExitedVolumeAudio;                          // 0x260(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    SwatEnteredVolumeAudio;                            // 0x270(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    SwatExitedVolumeAudio;                             // 0x280(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AHighgroundVolume* GetDefaultObj();

	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnAudioFinished();
};

// 0x20 (0x58 - 0x38)
// Class ReadyOrNot.HitRegistrationSettings
class UHitRegistrationSettings : public UDeveloperSettings
{
public:
	bool                                         bEnableValidation;                                 // 0x38(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2758[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HitscanForgiveness;                                // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShooterForgiveness;                                // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceDistanceForgiveness;                          // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SnapshotVelocityFactor;                            // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MinimumSnapshotExtent;                             // 0x4C(0xC)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UHitRegistrationSettings* GetDefaultObj();

};

// 0x10 (0x1A8 - 0x198)
// Class ReadyOrNot.TeamBaseActivity
class UTeamBaseActivity : public UBaseActivity
{
public:
	enum class ESquadPosition                    OverrideSquadPosition;                             // 0x198(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESquadPosition                    PreviousSquadPosition;                             // 0x199(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSwapping;                                       // 0x19A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2761[0xD];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTeamBaseActivity* GetDefaultObj();

	bool HasTeamReachedPosition(float Tolerance);
	class AReadyOrNotCharacter* GetSquadLeader();
	class ACyberneticCharacter* GetCharacterWithItem(TSubclassOf<class ABaseItem> ItemClass);
	class ACyberneticCharacter* GetCharacterClosestToLocation(struct FVector& TestLocation);
	class ACyberneticCharacter* GetCharacterClosestToCharacter(class ACyberneticCharacter* InCharacter);
	class ACyberneticCharacter* GetCharacterAtSquadPosition(enum class ESquadPosition SquadPosition);
};

// 0x10 (0x1B8 - 0x1A8)
// Class ReadyOrNot.HoldActivity
class UHoldActivity : public UTeamBaseActivity
{
public:
	uint8                                        Pad_2762[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHoldActivity* GetDefaultObj();

};

// 0x100 (0x128 - 0x28)
// Class ReadyOrNot.HostMigrationManager
class UHostMigrationManager : public UObject
{
public:
	uint8                                        Pad_2767[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FHm_PlayerInformation>         PlayerInformations;                                // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FHm_CyberneticsInformation>    CyberneticsInformations;                           // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FHm_DoorInformation>           DoorInformations;                                  // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FHm_BombInformation>           BombInformations;                                  // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FHm_BaggedEvidence>            BaggedEvidenceInformations;                        // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FHm_DroppedEvidence>           DroppedEvidenceInformations;                       // 0x88(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FHm_Objectives>                ObjectiveInformations;                             // 0x98(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                        ActiveEvidence;                                    // 0xA8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2768[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerState*                          NextHost;                                          // 0xC8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                MigrationGUID;                                     // 0xD0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2769[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MapName;                                           // 0xE8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                ModeName;                                          // 0xF8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_276A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NextHostName;                                      // 0x110(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ExpectedPlayerCount;                               // 0x120(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_276B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHostMigrationManager* GetDefaultObj();

	void SaveState();
	void ReturnToMainMenu();
	void OnMigrationSessionFoundSuccess(TArray<struct FBlueprintSessionResult>& Results);
	void OnMigrationSessionFoundFailed(TArray<struct FBlueprintSessionResult>& Results);
	void OnLobbySuccess();
	void FindMigrationSession();
	void CreateMigrationSession();
};

// 0x50 (0x2C8 - 0x278)
// Class ReadyOrNot.HotkeysWidget
class UHotkeysWidget : public UBaseWidget
{
public:
	class UOverlay*                              Hotkeys_Overlay;                                   // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                        Hotkeys_Container;                                 // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_Grenade;                                    // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_Chemlight;                                  // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_NVG;                                        // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_Scope;                                      // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                       IlluminatorAttachment_Switcher;                    // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_Laser;                                      // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHotkeyWidget*                         Hotkey_Flashlight;                                 // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x2C0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UHotkeysWidget* GetDefaultObj();

	void SetHotkeyVisibility(class UWidget* Widget, bool bCondition);
	void RefreshHotkeyInput();
};

// 0xC8 (0x328 - 0x260)
// Class ReadyOrNot.HotkeyWidget
class UHotkeyWidget : public UUserWidget
{
public:
	class UTextBlock*                            Hotkey_Text;                                       // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Hotkey_Image;                                      // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                HotkeyDivider_Image;                               // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            RemainingUses_Text;                                // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_Pressed;                                      // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_Released;                                     // 0x288(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  InputName;                                         // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           Icon;                                              // 0x298(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        bCustomAnimation : 1;                              // Mask: 0x1, PropSize: 0x10x320(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bShowRemainingUses : 1;                            // Mask: 0x2, PropSize: 0x10x320(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2771[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHotkeyWidget* GetDefaultObj();

	void SetHotkeyRemainingUses(int32 InRemainingUses);
	void SetHotkeyImage(struct FSlateBrush& Brush);
	void RefreshHotkey();
	void PlayReleasedAnimation();
	void PlayPressedAnimation();
};

// 0x120 (0x458 - 0x338)
// Class ReadyOrNot.HumanCharacterHUD_V2
class UHumanCharacterHUD_V2 : public UActivatableBaseWidget
{
public:
	FMulticastInlineDelegateProperty_            OnSlot1Updated;                                    // 0x338(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlot2Updated;                                    // 0x348(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlot3Updated;                                    // 0x358(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlot4Updated;                                    // 0x368(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlotReserved1Updated;                            // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSlotReserved2Updated;                            // 0x388(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                      Anim_FadeInHUD;                                    // 0x398(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                          CanvasPanel_Main;                                  // 0x3A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          CanvasPanel_Gamepad;                               // 0x3A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                          RetainerBox_SwayableElements;                      // 0x3B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_1;                           // 0x3B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_2;                           // 0x3C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_3;                           // 0x3C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_4;                           // 0x3D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_Reserved_1;                  // 0x3D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerActionPromptWidget*             PlayerActionText_Slot_Reserved_2;                  // 0x3E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheel*                            ItemWheel;                                         // 0x3E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommandWheel*                         CommandWheel;                                      // 0x3F0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EHUDStyle                         HUDStyle;                                          // 0x3F8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2795[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          ObjectiveMarker_WidgetFadeZones;                   // 0x400(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bEnableHUDSway : 1;                                // Mask: 0x1, PropSize: 0x10x410(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_179 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2796[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             MaxHUDSwayMovement;                                // 0x414(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             SwayStrength;                                      // 0x41C(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             SwaySpeed;                                         // 0x424(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableCurvedHUD : 1;                              // Mask: 0x1, PropSize: 0x10x42C(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_17A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2797[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurvedHUDStrength;                                 // 0x430(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2798[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x438(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerController*           PlayerController;                                  // 0x440(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             AccumulatedMouseDelta;                             // 0x448(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2799[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHumanCharacterHUD_V2* GetDefaultObj();

	void UpdateMapFloors(TArray<struct FBuildingFloor>& Floors);
	void TeamChatPressed();
	void ShowTutorialPrompt(const class FString& MessageID, bool bFirstShowing, class FText& MessageTitle, TArray<class FText>& MessageContent);
	void ShowTutorialOverview(const class FString& MessageID, class FText& MessageTitle, TArray<class FText>& MessageContent);
	void ShowHUD();
	void RemovePlayerActionPrompt_Reserved(int32 InSlot);
	void RemovePlayerActionPrompt(int32 InSlot);
	void RemoveMapActor(class UMapActorComponent* MapActorComponent);
	void ReflectHUDSettings();
	void ReadiedPlayersChanged();
	void OnTabletOpen();
	void OnTabletNotificationEvent();
	void OnTabletClose();
	void OnSlotReserved2Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnSlotReserved1Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnSlot4Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnSlot3Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnSlot2Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnSlot1Updated__DelegateSignature(class FText InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	void OnInventoryItemsChanged();
	void LocalReadyStateChanged(bool bReady);
	bool IsActionSlotInUse_Reserved(int32 InSlot);
	bool IsActionSlotInUse(int32 InSlot);
	void HideTutorialPrompt(const class FString& MessageID);
	void HideTutorialOverview(const class FString& MessageID);
	void HideHUD();
	class UTutorialWidget* GetTutorialWidget();
	class UScreenspaceMarkerWidget* GetScreenspaceMarkerWidget();
	class UScreenspaceMarkerWidget* GetRoundupWidget();
	class UItemWheel* GetItemWheel();
	class UCommandWheel* GetCommandWheel();
	void ClearAllPlayerActionPrompts();
	void ChatPressed();
	int32 AssignPlayerActionPromptToFreeSlot_Reserved(const struct FKey& InputKey, enum class EInputEvent InputEvent, class FText InActionText, const class FString& InColorLabel, bool bAnimate, bool bLoopAnimation);
	void AssignPlayerActionPromptToFreeSlot(const struct FKey& InputKey, enum class EInputEvent InputEvent, class FText InActionText, const class FString& InColorLabel, bool bAnimate, bool bLoopAnimation);
	void AssignPlayerActionPrompt_Reserved(int32 InSlot, const struct FKey& InputKey, enum class EInputEvent InputEvent, class FText InActionText, const class FString& InColorLabel, bool bAnimate, bool bLoopAnimation);
	void AssignPlayerActionPrompt_Custom(int32 InSlot, class FText InCustomPromptText, bool bAnimate, bool bLoopAnimation);
	void AssignPlayerActionPrompt(int32 InSlot, const struct FKey& InputKey, enum class EInputEvent InputEvent, class FText InActionText, const class FString& InColorLabel, bool bAnimate, bool bLoopAnimation);
	void AddScorePopup(class FText& ScoreText, int32 ScoreValue, bool bGive);
	void AddObjectivePopup(class FText& PopupText);
	class UMapActorWidget* AddMapActor(class UMapActorComponent* MapActorComponent, TSubclassOf<class UMapActorWidget> MapActorIconWidgetClass, struct FSlateBrush& IconBrush, struct FLinearColor& IconColor, struct FLinearColor& IconTextColor, float RotationOffset);
};

// 0x10 (0x270 - 0x260)
// Class ReadyOrNot.IconWidget
class UIconWidget : public UUserWidget
{
public:
	class UImage*                                MainImage;                                         // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                ParentComponent;                                   // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UIconWidget* GetDefaultObj();

	class FString GetAttachedObjectName();
	class UTexture2D* GetAttachedObjectIcon();
};

// 0xA0 (0x300 - 0x260)
// Class ReadyOrNot.StandardModal
class UStandardModal : public UUserWidget
{
public:
	class FText                                  TitleBar;                                          // 0x260(0x18)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class FText                                  ModalDescription;                                  // 0x278(0x18)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                         ShowApplyButton;                                   // 0x290(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShowCancelButton;                                  // 0x291(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ShowOkButton;                                      // 0x292(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_279A[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ApplyButtonText;                                   // 0x298(0x18)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class FText                                  CancelButtonText;                                  // 0x2B0(0x18)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class FText                                  OkButtonText;                                      // 0x2C8(0x18)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                         RequireScrollToBottom;                             // 0x2E0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_279B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             Size;                                              // 0x2E4(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_279C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCancelClicked;                                   // 0x2F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UStandardModal* GetDefaultObj();

};

// 0x0 (0x300 - 0x300)
// Class ReadyOrNot.IllegalUnbindModal
class UIllegalUnbindModal : public UStandardModal
{
public:

	static class UClass* StaticClass();
	static class UIllegalUnbindModal* GetDefaultObj();

};

// 0xB30 (0xD98 - 0x268)
// Class ReadyOrNot.ImpactEffect
class AImpactEffect : public APooledActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ParticleSystemComponent;                           // 0x270(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   FMODAudioComponent;                                // 0x278(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                       DecalComponent;                                    // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                       DecalRicochetComponent;                            // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                       DecalBloodComponent;                               // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystemComponent*>      SpawnedParticles;                                  // 0x298(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_279D[0x110];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EImpactEffectType                 Type;                                              // 0x3B8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayDefaultIfNull;                                // 0x3B9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_279E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DecalScale;                                        // 0x3BC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_279F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DecalMinSize;                                      // 0x3C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecalMaxSize;                                      // 0x3CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParticleScale;                                     // 0x3D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReflectImpactEffectAcrossNormal;                  // 0x3D4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27A0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FMODSoundFx;                                       // 0x3D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODHitmarker;                                     // 0x3E0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDecalMeshes;                                    // 0x3E8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecalMeshScaleMultiplier;                          // 0x3EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBulletGoneThroughPlayer;                          // 0x3F0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArmorImpact;                                      // 0x3F1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnParticle;                                    // 0x3F2(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTraceComplex;                                     // 0x3F3(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27A1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            BloodExitDecals;                                   // 0x3F8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             DefaultImpactFx;                                   // 0x408(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Aluminium;                                     // 0x438(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Asphalt;                                       // 0x468(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Brick;                                         // 0x498(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_CarbonFibre;                                   // 0x4C8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Cardboard;                                     // 0x4F8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Ceramic;                                       // 0x528(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_ConcreteSoft;                                  // 0x558(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_ConcreteStrong;                                // 0x588(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Dirt;                                          // 0x5B8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Drywall;                                       // 0x5E8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Electrical;                                    // 0x618(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_EnergyShield;                                  // 0x648(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Fabric_Carpet;                                 // 0x678(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Fabric_Stuffing;                               // 0x6A8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Fabric_Thin;                                   // 0x6D8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Flesh;                                         // 0x708(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Galvanized;                                    // 0x738(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Glass_Plate;                                   // 0x768(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Glass_Windshield;                              // 0x798(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Grass;                                         // 0x7C8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Gravel;                                        // 0x7F8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Ice;                                           // 0x828(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Lava;                                          // 0x858(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Lead;                                          // 0x888(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Leaves;                                        // 0x8B8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Limestone;                                     // 0x8E8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Mahogany;                                      // 0x918(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Marble_Coated;                                 // 0x948(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Marble_Thick;                                  // 0x978(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Mud;                                           // 0x9A8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Oil;                                           // 0x9D8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Paper;                                         // 0xA08(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Pine;                                          // 0xA38(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Plaster;                                       // 0xA68(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Plastic;                                       // 0xA98(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Plywood;                                       // 0xAC8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Polystyrene;                                   // 0xAF8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Powder;                                        // 0xB28(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Rock;                                          // 0xB58(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Rubber;                                        // 0xB88(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Sand;                                          // 0xBB8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Snow;                                          // 0xBE8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Soil;                                          // 0xC18(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Steel;                                         // 0xC48(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Tin;                                           // 0xC78(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Treewood;                                      // 0xCA8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Wallpaper;                                     // 0xCD8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Water;                                         // 0xD08(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Vehicle;                                       // 0xD38(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactFx                             RON_Bulletproof_Glass;                             // 0xD68(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AImpactEffect* GetDefaultObj();

};

// 0xC0 (0x2E0 - 0x220)
// Class ReadyOrNot.IncapacitatedHuman
class AIncapacitatedHuman : public AActor
{
public:
	uint8                                        Pad_27A2[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       DefaultScene;                                      // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                HumanMesh;                                         // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                HumanMeshFace;                                     // 0x258(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x260(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                ReportInteractableComponent;                       // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScoringComponent*                     ScoringComponent;                                  // 0x270(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   IncapacitatedAudioComponent;                       // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                         RagdollPhysicsAsset;                               // 0x288(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          DyingMontage;                                      // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODEventLoop;                                     // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ShotParticleEffect;                                // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsChild;                                          // 0x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bStartDead;                                        // 0x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCanEverDieByTime;                                 // 0x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27A3[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeRemainingUntilDead;                            // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsInGroup;                                        // 0x2B0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsMasterOfGroup;                                  // 0x2B1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27A4[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AIncapacitatedHuman*>           IncapacitatedHumansInGroup;                        // 0x2B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AIncapacitatedHuman*                   MasterHumanInGroup;                                // 0x2C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAttachReportInteractableToMesh;                   // 0x2D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27A5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketToAttach;                                    // 0x2D4(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         Team;                                              // 0x2DC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsDead;                                           // 0x2DD(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasBeenReported;                                  // 0x2DE(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27A6[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIncapacitatedHuman* GetDefaultObj();

	void SelectAllInGroup();
	void MakeMasterInGroup();
	bool IsChild();
	bool HasBeenReported();
};

// 0x70 (0x2F8 - 0x288)
// Class ReadyOrNot.IncriminationClue
class AIncriminationClue : public APickupActor
{
public:
	FMulticastInlineDelegateProperty_            Delegate_OnClueFound;                              // 0x288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMapActorComponent*                    MapActorComponent;                                 // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ClueNumber;                                        // 0x2A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27A9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShowObjectiveMarkerIn;                             // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AIncriminationClue*                    NextClue;                                          // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  ClueName;                                          // 0x2B0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	class FText                                  ClueFoundMessage;                                  // 0x2C8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected)
	class AIncriminationClueSpawnPoint*          SpawnPointOwner;                                   // 0x2E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bClueFound : 1;                                    // Mask: 0x1, PropSize: 0x10x2E8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bClueTimerExpired : 1;                             // Mask: 0x2, PropSize: 0x10x2E8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_17B : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EClueState                        ClueState;                                         // 0x2E9(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27AA[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIncriminationClue* GetDefaultObj();

	void RevealNextClue();
	void OnRep_OnClueStateChanged();
	void OnRep_OnClueFound();
	void OnClueFound__DelegateSignature(class AIncriminationClue* ClueActor, class AActor* ClueFounder);
	void OnClueFound();
	bool IsClueFound();
	void Init(class AIncriminationClueSpawnPoint* OwningSpawn, uint8 InClueNumber, class FText& InClueName, class FText& InClueFoundMessage, float InShowObjectiveMarkerIn);
};

// 0x58 (0x290 - 0x238)
// Class ReadyOrNot.IncriminationClueSpawnPoint
class AIncriminationClueSpawnPoint : public AActorSpawnPoint
{
public:
	TSubclassOf<class AIncriminationClue>        IncriminationClueClass;                            // 0x238(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                    ClueFlareClass;                                    // 0x240(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ClueNumber;                                        // 0x248(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27AB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShowObjectiveMarkerIn;                             // 0x24C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  ClueName;                                          // 0x250(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ClueFoundMessage;                                  // 0x268(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                        Pad_27AC[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIncriminationClueSpawnPoint* GetDefaultObj();

};

// 0x20 (0x7F0 - 0x7D0)
// Class ReadyOrNot.IncriminationGM
class AIncriminationGM : public AReadyOrNotGameMode_PVP
{
public:
	uint8                                        MaxCluesToFind;                                    // 0x7D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27AD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASpawnGenerator*                       ChosenSpawnGroup_BlueTeam;                         // 0x7D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASpawnGenerator*                       ChosenSpawnGroup_RedTeam;                          // 0x7E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27AE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIncriminationGM* GetDefaultObj();

	void OnEvidencePickedUp(class AActor* PickupActor);
	void OnEvidenceDropped(class AActor* DropActor);
	void OnClueFound(class AIncriminationClue* ClueActor, class AActor* ClueFounder);
	bool HasVisitedAllEvidenceSpawns();
};

// 0xD8 (0x8B8 - 0x7E0)
// Class ReadyOrNot.IncriminationGS
class AIncriminationGS : public AReadyOrNotGameState
{
public:
	FMulticastInlineDelegateProperty_            OnIntelStateChanged;                               // 0x7E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnIntelSearchAreaChosen;                           // 0x7F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnIntelBuildingChosen;                             // 0x800(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnActiveClueChanged;                               // 0x810(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPreviousActiveClueChanged;                       // 0x820(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCluesChanged;                                    // 0x830(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AEvidenceSpawnPoint*                   ChosenEvidenceSpawn;                               // 0x840(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEvidenceActor*                        ChosenEvidenceActor;                               // 0x848(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEvidenceExtractionDevice_Incrim*      ChosenExtractionDevice;                            // 0x850(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AIncriminationClue*>            Clues;                                             // 0x858(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<class AIncriminationClueSpawnPoint*>  ClueSpawnPoints;                                   // 0x868(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class AIncriminationClue*                    ActiveClue;                                        // 0x878(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIncriminationClue*                    PreviousActiveClue;                                // 0x880(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASplineTrigger_Incrimination*          ChosenEvidenceSearchArea;                          // 0x888(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingTrigger_Incrimination*        ChosenEvidenceBuilding;                            // 0x890(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASplineTrigger_Incrimination*>  NonMainIntelSearchZones;                           // 0x898(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEvidenceExtractionDevice*             CurrentExtractionDevice;                           // 0x8A8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         PickupTeam;                                        // 0x8B0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEvidenceActorState               IntelState;                                        // 0x8B1(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIntelExtracted;                                   // 0x8B2(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27BD[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AIncriminationGS* GetDefaultObj();

	void OnRep_OnPreviousActiveClueChanged();
	void OnRep_OnIntelStateChanged();
	void OnRep_OnIntelSearchAreaChosen();
	void OnRep_OnIntelBuildingChosen();
	void OnRep_OnCluesChanged();
	void OnRep_OnActiveClueChanged();
	void OnEvidenceSearchAreaChosen__DelegateSignature(class ASplineTrigger_Incrimination* EvidenceSearchArea);
	void OnEvidenceBuildingChosen__DelegateSignature(class ABuildingTrigger_Incrimination* EvidenceSearchArea);
	void OnEvidenceActorStateChanged__DelegateSignature(class AEvidenceActor* EvidenceActor, enum class EEvidenceActorState NewEvidenceState, bool bExtracted);
	void OnCluesChanged__DelegateSignature(const TArray<class AIncriminationClue*>& Clues);
	void OnActiveClueChanged__DelegateSignature(class AIncriminationClue* ActiveClue);
	class AIncriminationClue* GetClue(int32 ClueNumber, bool* bSuccess, bool bMustBeFound);
	TArray<class AIncriminationClue*> GetAllCluesOfNumber(int32 ClueNumber);
	bool DoesPlayerPossessAnyClue(class APlayerCharacter* PlayerCharacter);
	bool AnyLowerCluesFound(int32 ClueNumber);
	bool AnyHigherCluesFound(int32 ClueNumber);
};

// 0x68 (0x290 - 0x228)
// Class ReadyOrNot.PVPTriggerBox
class APVPTriggerBox : public ATriggerBox
{
public:
	class UTextRenderComponent*                  TextRender;                                        // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class APlayerCharacter*>              CharactersInTriggerBox;                            // 0x238(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	float                                        TimeElapsed;                                       // 0x248(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousTimeElapsed;                               // 0x24C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEntered : 1;                                      // Mask: 0x1, PropSize: 0x10x250(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_17C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27C7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeNeededToStay_Editor;                           // 0x254(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeNeededToStay;                                  // 0x258(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeNeededToStay_Active;                           // 0x25C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<enum class ETeamType>                 OnlyAcceptTeams;                                   // 0x260(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                          OnlyAcceptActorsWithTags;                          // 0x270(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bLogDebugInfo : 1;                                 // Mask: 0x1, PropSize: 0x10x280(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_17D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27C9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          TH_TimerEventExpiry;                               // 0x288(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class APVPTriggerBox* GetDefaultObj();

	void ToggleObjectiveMarker();
	void StartTimerEvent();
	void ShowObjectiveMarker();
	void ResumeTimerEvent();
	void PauseTimerEvent();
	void OnTimerExpired();
	void OnRep_CharactersInTriggerBoxUpdated();
	void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	bool IsPlayerOnAcceptedTeam(class APlayerCharacter* Player);
	bool IsActorInTriggerBox(class AActor* InActor);
	void HideObjectiveMarker();
	float GetLastElapsedTime();
	float GetCurrentElapsedTime();
	bool DoesActorHaveAnyAcceptedTags(class AActor* OtherActor);
	void CancelTimerEvent();
};

// 0x0 (0x290 - 0x290)
// Class ReadyOrNot.IncriminationTriggerBox
class AIncriminationTriggerBox : public APVPTriggerBox
{
public:

	static class UClass* StaticClass();
	static class AIncriminationTriggerBox* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class ReadyOrNot.InGameLogSubsystem
class UInGameLogSubsystem : public UWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnLogMessageEnqueued;                              // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLogMessageDequeued;                              // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_27CF[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInGameLogSubsystem* GetDefaultObj();

	void OnLogMessageEnqueued__DelegateSignature();
	void OnLogMessageDequeued__DelegateSignature();
	bool GetNextLogMessage_PVP(struct FInGameLogMessage_PVP* OutLogMessage);
	bool GetNextLogMessage(struct FInGameLogMessage* OutLogMessage);
	void EnqueuePVPMessages(TArray<struct FInGameLogMessage_PVP>& InLogMessages);
	void EnqueuePVPMessage(const struct FInGameLogMessage_PVP& InLogMessage);
	void EnqueueLogMessages(TArray<struct FInGameLogMessage>& InLogMessages);
	void EnqueueLogMessage(const struct FInGameLogMessage& InLogMessage);
};

// 0x430 (0x9D0 - 0x5A0)
// Class ReadyOrNot.InteractableComponent
class UInteractableComponent : public UWidgetComponent
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27DA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AnimatedIconName;                                  // 0x5A4(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowActionPromptInWorld;                          // 0x5AC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableActionPromptBackground;                     // 0x5AD(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideActionPromptUserSettings;                 // 0x5AE(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowIconWhenActionsLocked : 1;                    // Mask: 0x1, PropSize: 0x10x5AF(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FPlayerActionPromptSlot               ActionSlot1;                                       // 0x5B0(0x90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerActionPromptSlot               ActionSlot2;                                       // 0x640(0x90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerActionPromptSlot               ActionSlot3;                                       // 0x6D0(0x90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerActionPromptSlot               ActionSlot4;                                       // 0x760(0x90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bDistanceChecksEnabled;                            // 0x7F0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27DB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinShowPromptAtDistance;                           // 0x7F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShowPromptAtDistance;                              // 0x7F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMustBeLookingAt : 1;                              // Mask: 0x1, PropSize: 0x10x7FC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_180 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27DC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RequiredLookAtPercentage;                          // 0x800(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMustBeOverlapping;                                // 0x804(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27DD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InteractCircleSize;                                // 0x808(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InteractIconSize;                                  // 0x80C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDistanceFadeIcon : 1;                             // Mask: 0x1, PropSize: 0x10x810(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideUponInteraction : 1;                          // Mask: 0x2, PropSize: 0x10x810(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideUponPlayerMovement : 1;                       // Mask: 0x4, PropSize: 0x10x810(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImprintIconOnHUDUponInteraction : 1;              // Mask: 0x8, PropSize: 0x10x810(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_181 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27DF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerController*>             DisallowedPlayerControllers;                       // 0x818(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        IgnoreInteractionBlockingActors;                   // 0x828(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	float                                        CurrentProgress;                                   // 0x838(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimatedIcon                         AnimatedIcon;                                      // 0x840(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class AActor*                                UseActor;                                          // 0x858(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClientInteract;                                   // 0x860(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bExecuteOnServer;                                  // 0x861(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27E1[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerCharacter*>              PlayersFocusing;                                   // 0x868(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>               CachedWidgetClass;                                 // 0x878(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimatedIconWidgetWithActionPrompt*   IconWidget;                                        // 0x880(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>               ImprintIconWidgetClass;                            // 0x888(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimatedIconWidget_Imprint*           IconWidget_Imprint;                                // 0x890(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FAnimatedIcon>      AnimatedIconMap;                                   // 0x898(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_27E2[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInteractableComponent* GetDefaultObj();

	void SetInteractionIconState(bool bValid);
	void SetInteractionIconSize(float InInteractCircleSize, float InInteractIconSize);
	void SetAnimatedIconName(class FName& NewIconName);
	void ResetToOriginalLocation();
	void OnInteract(class APlayerCharacter* InteractInstigator);
	bool IsInteractionEnabledForController(class APlayerController* InController);
	bool IsInteractionEnabledFor(class APlayerCharacter* InCharacter);
	bool IsIconVisible();
	bool IsFocused();
	bool IsBeingLookedAt(class APlayerController* InPlayerController, float MaxRange, float LookatThreshold, bool bUseActorLocation);
	bool InputActionNameMatchesAnyValidSlot(class FName InInputActionName);
	bool InputActionNameMatchesAnySlot(class FName InInputActionName);
	class AActor* GetUseActor();
	TArray<class APlayerCharacter*> GetPlayersFocusing();
	struct FVector GetOriginalLocation_Relative();
	struct FVector GetOriginalLocation();
	class FName GetOriginalIconName();
	float GetDistanceFromPlayer();
	void EnableInteractionFor(class APlayerCharacter* InCharacter);
	void EnableInteractable();
	void DisableInteractionFor(class APlayerCharacter* InCharacter);
	void DisableInteractable();
	bool CanInteract(bool bLog);
	bool AnyActionSlotValid();
};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.InteractionActor
class AInteractionActor : public AActor
{
public:
	uint8                                        Pad_27E5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneRoot;                                         // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      UseIconRadius;                                     // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  Mesh_Static;                                       // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                Mesh_Skeletal;                                     // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseNow;                                        // 0x248(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAvailableForUse;                                  // 0x249(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCompleteIcon;                                     // 0x24A(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bButtonPushAnimation;                              // 0x24B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldButtonPrompt;                                 // 0x24C(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideButtonPrompt;                             // 0x24D(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27E7[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  OverrideButtonPromptText;                          // 0x250(0x18)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>               CachedUseComponents;                               // 0x268(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AInteractionActor* GetDefaultObj();

	void Server_TryUse(class AActor* User);
	void Server_EndUse(class AActor* User);
	void OnActorUsedEnd(class AActor* User);
	void OnActorUsed(class AActor* User);
	bool CanBeUsedNow(class AActor* PotentialUser);
};

// 0x78 (0xA8 - 0x30)
// Class ReadyOrNot.InteractionsData
class UInteractionsData : public UDataAsset
{
public:
	class FName                                  InteractionName;                                   // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDeadDriverInteraction : 1;                   // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDeadSlaveInteraction : 1;                    // Mask: 0x4, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowAimOffsetDuringInteraction : 1;              // Mask: 0x8, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyRelativeOffsetBeforePlaying : 1;             // Mask: 0x10, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSyncBone : 1;                                  // Mask: 0x20, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSweepEnvironment : 1;                             // Mask: 0x40, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoNotApplyRelativeOffset : 1;                     // Mask: 0x80, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RelativePosOffsetToDriver;                         // 0x3C(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotOffsetToDriver;                         // 0x48(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        CancelDurationLength;                              // 0x54(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHolsterItemBeforePlaying : 1;                     // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInstantHolster : 1;                               // Mask: 0x2, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEquipLastItemAfterPlaying : 1;                    // Mask: 0x4, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateSlaveTransform : 1;                         // Mask: 0x8, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateTransformsInstantly : 1;                    // Mask: 0x10, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIndependentFinishes : 1;                          // Mask: 0x20, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDriverFPMotion : 1;                            // Mask: 0x40, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_185 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27EE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          DriverMontage;                                     // 0x60(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          DriverMontage_FP;                                  // 0x68(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TriggerTolerance;                                  // 0x70(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DriverBlendDuration;                               // 0x74(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSlaveFPMotion : 1;                             // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_186 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27EF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          SlaveMontage;                                      // 0x80(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          SlaveMontage_FP;                                   // 0x88(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMatchDriverYaw : 1;                               // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_187 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27F0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MatchedYawOffset;                                  // 0x94(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasSharedItemAnim : 1;                            // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_188 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27F1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          SharedItemMontage;                                 // 0xA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UInteractionsData* GetDefaultObj();

	class APairedInteractionDriver* PlayPairedInteraction(class AActor* Driver, class AActor* Slave, class ABaseItem* OptionalItem);
	class APairedInteractionDriver* IsPairedInteractionPlayingOn(class AActor* Target);
};

// 0x20 (0x2C8 - 0x2A8)
// Class ReadyOrNot.InteractWithDoorObjective
class AInteractWithDoorObjective : public AObjective
{
public:
	TArray<class ADoor*>                         Doors;                                             // 0x2A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                  DoorTag;                                           // 0x2B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EObjectiveDoorInteractions        DoorInteractionType;                               // 0x2C0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27F3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AInteractWithDoorObjective* GetDefaultObj();

	void OnDoorKicked(class ADoor* Door, class AReadyOrNotCharacter* InstigatorCharacter, bool bSuccess);
};

// 0xD0 (0x328 - 0x258)
// Class ReadyOrNot.InterestOverrideZone
class AInterestOverrideZone : public AVolume
{
public:
	TArray<struct FInterestPoint>                InterestPoints;                                    // 0x258(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FInterestStationPoint>         StationPoints;                                     // 0x268(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<class ACyberneticCharacter*>          CharactersInZone;                                  // 0x278(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<class ACyberneticCharacter*, uint8>     FocusIndexMap;                                     // 0x288(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<class ACyberneticCharacter*, uint8>     MoveIndexMap;                                      // 0x2D8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AInterestOverrideZone* GetDefaultObj();

	void OnWorldBeginPlay();
	void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	bool GetCurrentInterestInfo(class ACyberneticCharacter* AI, struct FVector* OutLocation, class AActor** OutActor);
};

// 0x378 (0x428 - 0xB0)
// Class ReadyOrNot.InventoryComponent
class UInventoryComponent : public UActorComponent
{
public:
	uint8                                        Pad_2834[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnEquippedItemChanged;                             // 0xB8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClientItemAddedToInventory;                      // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemAddedToInventory;                            // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemRemovedFromInventory;                        // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemEquipped;                                    // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemHolstered;                                   // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2835[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemChangeRequest                    LatestItemChangeRequest;                           // 0x148(0x28)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FItemChangeRequest                    LastReceivedItemChangeRequest;                     // 0x170(0x28)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	class ABaseItem*                             QueuedItemSwap;                                    // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseItem*                             LastEquippedItem;                                  // 0x1A0(0x8)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseWeapon*                           LastEquippedWeapon;                                // 0x1A8(0x8)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseItem*                             LastEquippedItemWheel;                             // 0x1B0(0x8)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ABaseItem*>                     InventoryItems;                                    // 0x1B8(0x10)(Edit, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class ABaseItem*>                     RemovedInventoryItems;                             // 0x1C8(0x10)(Edit, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FSpawnedGear                          SpawnedGear;                                       // 0x1D8(0x78)(BlueprintVisible, Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FSavedLoadout                         LastEquippedLoadout;                               // 0x250(0x188)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	class ABaseItem*                             SelectedDevice;                                    // 0x3D8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2836[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemSelectionGroup>           ItemSelectionGroups;                               // 0x418(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UInventoryComponent* GetDefaultObj();

	void ThrowSpecificItem(class ABaseItem* Item);
	void ThrowEquippedItem();
	void ThrowAllWeapons();
	void ThrowAllItems();
	void Server_PlayTPHolster(const struct FItemChangeRequest& ItemChangeRequest);
	void Server_ChangeEquippedItem(const struct FItemChangeRequest& ItemChangeRequest);
	void Server_AttemptEquipNewLoadout(const struct FSavedLoadout& Loadout);
	bool RemoveInventoryItem(class ABaseItem* Item, bool bNullOwner);
	bool PutItemInHands(class ABaseItem* Item, bool bInstant, bool bForce);
	void PlayTPDraw(const struct FItemChangeRequest& ItemChangeRequest);
	void PlayLocalHolster(const struct FItemChangeRequest& ItemChangeRequest);
	void PlayLocalDraw(const struct FItemChangeRequest& ItemChangeRequest);
	void OnRep_SpawnedGear();
	void OnRep_ItemChangeRequest();
	void OnRep_InventoryItemsChanged();
	void OnPlayerItemChanged__DelegateSignature(class ABaseItem* Item);
	void OnNewItemChangeDrawComplete(class ABaseItem* Item);
	void OnItemRemoved__DelegateSignature(class ABaseItem* Item);
	void OnItemEquipped__DelegateSignature(class ABaseItem* Item);
	void OnEquippedItemChanged__DelegateSignature();
	void OnActorRelevancyChanged(class AActor* Actor, bool bIsRelevant);
	void Multicast_NotifyInventoryItemsChanged();
	bool IsWearingHeadArmour();
	bool IsWearingExplosiveVest();
	bool IsWearingArmour();
	bool IsWearingAntiFlashGoggles();
	bool IsItemEquipped_Class(TSubclassOf<class ABaseItem> ItemClass);
	bool IsItemEquipped(enum class EItemCategory ItemCategory);
	bool IsEquippingSpecificItem(class ABaseItem* Item);
	bool IsEquippingItemOfType(enum class EItemCategory ItemCategory);
	bool IsEquippingItemOfClass(class UClass* ClassType);
	bool IsEquippingItem();
	bool IsEquippedWithShield(class ABaseItem* Item);
	bool IsAnyItemAttachedToHands();
	bool IsAnyItemAttachedToBody();
	bool IsAnyBlockingAnimationPlaying();
	bool HolsterEquippedItem(bool bInstant);
	bool Holster(class ABaseItem* Item, bool bInstant);
	bool HasInventoryItem(class ABaseItem* Item);
	bool HasAnyInventoryItemsOfType(enum class EItemCategory ItemCategory);
	bool HasAnyInventoryItemsOfClass(TSubclassOf<class ABaseItem> ItemClass);
	bool HasAnyInventoryItems();
	TArray<class ABaseItem*> GetRemovedInventoryItems();
	class ABaseWeapon* GetLastEquippedWeapon();
	struct FSavedLoadout GetLastEquippedLoadout();
	class ABaseItem* GetLastEquippedItem();
	TArray<class ABaseItem*> GetInventoryItemsOfType(enum class EItemCategory ItemCategory);
	TArray<class ABaseItem*> GetInventoryItems();
	class ABaseItem* GetInventoryItemOfType(enum class EItemCategory ItemCategory);
	class ABaseItem* GetInventoryItemOfClassType(enum class EItemClass ItemClass);
	class ABaseItem* GetInventoryItemOfClass(class UClass* Class, bool bCanEquipCheck);
	class ABaseItem* GetHolsteredItem();
	class AHeadwear* GetHeadwear();
	class AHeadwear* GetHeadArmour();
	class ABaseItem* GetEquippedItem();
	class ABaseArmour* GetArmour();
	void EquipLastEquippedWeapon(bool bInstant, bool bForce);
	void EquipLastEquippedItemWheel(bool bInstant, bool bForce);
	void EquipLastEquippedItem(bool bInstant, bool bForce);
	class ABaseItem* EquipItemOfType(enum class EItemCategory ItemCategory, bool bInstant);
	class ABaseItem* EquipItemOfClass(class UClass* ClassType, bool bInstant);
	class ABaseItem* EquipItemFromGroup_Name(class FName GroupName, int32 ItemCategoryIndex);
	class ABaseItem* EquipItemFromGroup_Index(int32 GroupIndex, int32 ItemCategoryIndex);
	bool EquipHolsteredItem(bool bInstant);
	bool DestroyInventoryItem(class ABaseItem* Item);
	void DestroyAllEquippedItems();
	int32 CountInventoryItemType(enum class EItemCategory ItemCategory);
	void ClientOnItemAddedToInventory__DelegateSignature(class ABaseItem* Item);
	void Client_NotifyInventorySpawned();
	void Client_NotifyInventoryItemsDestroyed();
	void Client_NotifyInventoryItemsChanged();
	bool CanEquip(class ABaseItem* Item);
	bool AddInventoryItem(class ABaseItem* Item);
};

// 0x90 (0x228 - 0x198)
// Class ReadyOrNot.WorldBuildingActivity
class UWorldBuildingActivity : public UBaseActivity
{
public:
	bool                                         bShouldHolsterWeapon;                              // 0x198(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldSurrenderFromActivity;                      // 0x199(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequireRotationMatch;                             // 0x19A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_283F[0x15];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              FinalRotationOffset;                               // 0x1B0(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bOneShotAnimationDataTable;                        // 0x1BC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2840[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TableMontageName;                                  // 0x1C0(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Loop;                                              // 0x1D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MontageStart;                                      // 0x1D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          MontageEnd;                                        // 0x1E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          MontageAbruptEnd;                                  // 0x1E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                StartActivitySpeech;                               // 0x1F0(0x10)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                FinishActivitySpeech;                              // 0x200(0x10)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          TableMontageAnim;                                  // 0x210(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2842[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldBuildingActivity* GetDefaultObj();

	void TickMoveToState(float DeltaTime, float Uptime);
	void TickLoopState(float DeltaTime, float Uptime);
	bool ShouldStart();
	bool ShouldLoop();
	bool ShouldEndAbruptly();
	bool ShouldEnd();
	bool ShouldComplete();
	void SetRotation(const struct FRotator& NewRotator);
	bool IsSetupCorrectly();
	struct FRotator GetRotationOffset();
	void EnterStartState();
	void EnterMoveToState();
	void EnterLoopState();
	void EnterEndState();
	void EnterCompleteState();
	void EnterAbruptEndState();
};

// 0x0 (0x228 - 0x228)
// Class ReadyOrNot.InvestigateActivity
class UInvestigateActivity : public UWorldBuildingActivity
{
public:

	static class UClass* StaticClass();
	static class UInvestigateActivity* GetDefaultObj();

};

// 0x68 (0x200 - 0x198)
// Class ReadyOrNot.InvestigateStimulusActivity
class UInvestigateStimulusActivity : public UBaseActivity
{
public:
	struct FAIStimulus                           Stimulus;                                          // 0x198(0x3C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                        Pad_2844[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  Instigator;                                        // 0x1D8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2845[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInvestigateStimulusActivity* GetDefaultObj();

};

// 0x370 (0x3A0 - 0x30)
// Class ReadyOrNot.ItemData
class UItemData : public UDataAsset
{
public:
	TArray<struct FWeaponData>                   BluePVPUniquePrimaryWeapons;                       // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponData>                   RedPVPUniquePrimaryWeapons;                        // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponData>                   PrimaryWeapons;                                    // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FWeaponData>                   SecondaryWeapons;                                  // 0x60(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FDeviceData>                   LongTacticalItems;                                 // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FDeviceData>                   TacticalItems;                                     // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class ABaseItem>                 NullItem;                                          // 0x90(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullPrimaryScopeAttachment;                        // 0x98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullMuzzleAttachment;                              // 0xA0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullOverbarrelAttachment;                          // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullUnderbarrelAttachment;                         // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullStockAttachment;                               // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullGripAttachment;                                // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullIlluminatorAttachment;                         // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         NullAmmunitionAttachment;                          // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABaseItem>>         DefaultItemsGivenToPlayer;                         // 0xD8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class USkinComponent>            FactorySkin;                                       // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSavedLoadout>                 DefaultLoadouts;                                   // 0xF0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSavedCustomization                   DefaultCustomization;                              // 0x100(0xD0)(Edit, NativeAccessSpecifierPublic)
	TMap<enum class EEquippingSwat, struct FDefaultCharacterCustomization> DefaultCharacters;                                 // 0x1D0(0x50)(Edit, NativeAccessSpecifierPublic)
	struct FSavedCustomization                   TrailerCustomization;                              // 0x220(0xD0)(Edit, NativeAccessSpecifierPublic)
	TArray<class UCustomizationCharacter*>       TrailerCharacters;                                 // 0x2F0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FArmourData>                   BodySelection;                                     // 0x300(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FArmourData>                   HeadSelection;                                     // 0x310(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UArmourMaterial>> ArmourMaterials;                                   // 0x320(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class USkinComponent>>    UniformSelection;                                  // 0x330(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FCharacterData>                CharacterSelection;                                // 0x340(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             DefaultItemImage;                                  // 0x350(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                          PersonnelNames;                                    // 0x378(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          PersonnelDescriptions;                             // 0x388(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        AttachmentPointsBase;                              // 0x398(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_284A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemData* GetDefaultObj();

};

// 0x38 (0x2C0 - 0x288)
// Class ReadyOrNot.ItemSlot_V2
class UItemSlot_V2 : public UCommonUserWidget
{
public:
	class ABaseItem*                             BaseItem;                                          // 0x288(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArmourMaterial*                       ArmorMaterial;                                     // 0x290(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            ItemName;                                          // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            ItemType;                                          // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                        PrefixText;                                        // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                PresetName;                                        // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UItemSlot_V2* GetDefaultObj();

	void SetTexts(class FText Name, class FText Type);
	void SetItem(class ABaseItem* Item);
	void SetArmorMaterial(class UArmourMaterial* Armor);
};

// 0x68 (0x2F0 - 0x288)
// Class ReadyOrNot.ItemSlotTactical_V2
class UItemSlotTactical_V2 : public UCommonUserWidget
{
public:
	enum class ELoadoutTacticalSlotType          SlotType;                                          // 0x288(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2852[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABaseItem>                 SlotItem;                                          // 0x290(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SlotAmmunitionName;                                // 0x298(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  SlotName;                                          // 0x2A0(0x18)(Edit, NativeAccessSpecifierPublic)
	FDelegateProperty_                           NavigationDelegate;                                // 0x2B8(0x10)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UTextBlock*                            ItemName;                                          // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            ItemType;                                          // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            ItemCount;                                         // 0x2D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                               LeftArrow;                                         // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                               RightArrow;                                        // 0x2E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UItemSlotTactical_V2* GetDefaultObj();

	void Refresh();
	void OnSlotsUpdated();
	class UWidget* OnNavigateRight(enum class EUINavigation NavigationRule);
	class UWidget* OnNavigateLeft(enum class EUINavigation NavigationRule);
	class FText GetItemName();
	class FText GetItemDescription();
};

// 0x38 (0xF00 - 0xEC8)
// Class ReadyOrNot.ItemVisualizationComponent
class UItemVisualizationComponent : public USkeletalMeshComponent
{
public:
	enum class EItemVisualizationType            VisualizationType;                                 // 0xEC8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2854[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseItem*                             BasedOfItem;                                       // 0xED0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  MagazineComp;                                      // 0xED8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                ScopeAttachment;                                   // 0xEE0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                MuzzleAttachment;                                  // 0xEE8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                UnderbarrelAttachment;                             // 0xEF0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                OverbarrelAttachment;                              // 0xEF8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UItemVisualizationComponent* GetDefaultObj();

};

// 0x1A0 (0x400 - 0x260)
// Class ReadyOrNot.ItemWheel
class UItemWheel : public UUserWidget
{
public:
	class UWidgetAnimation*                      FadeIn;                                            // 0x260(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      FadeOut;                                           // 0x268(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      OuterWheelFadeIn;                                  // 0x270(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      OuterWheelFadeOut;                                 // 0x278(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      InnerWheelFadeIn;                                  // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      InnerWheelFadeOut;                                 // 0x288(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           OuterWheel;                                        // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                TacticalCategory;                                  // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                MiscCategory;                                      // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                GrenadeCategory;                                   // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                MagazineCategory;                                  // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     GrenadeFlashbang;                                  // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     GrenadeCSGas;                                      // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     GrenadeStinger;                                    // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     TacticalC2;                                        // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     TacticalSpray;                                     // 0x2D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     TacticalWedge;                                     // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     TacticalTaser;                                     // 0x2E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     TacticalLockpickGun;                               // 0x2F0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     MiscDetonator;                                     // 0x2F8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     MiscMultitool;                                     // 0x300(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelElement*                     MiscZipcuffs;                                      // 0x308(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelMagazineElement*             MagazineSlot1;                                     // 0x310(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemWheelMagazineElement*             MagazineSlot2;                                     // 0x318(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          GrenadeWheel;                                      // 0x320(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          TacticalWheel;                                     // 0x328(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          MiscWheel;                                         // 0x330(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          MagazineWheel;                                     // 0x338(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           InnerWheel;                                        // 0x340(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          InnerWheelCanvasPanel;                             // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          OuterWheelCanvasPanel;                             // 0x350(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShowOuterWheelMenu;                                // 0x358(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2860[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextBlock*                            HeaderText;                                        // 0x360(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2861[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemWheel* GetDefaultObj();

	void SetInnerwheelOpacity(float Opacity);
	void OnNumberOfSegmentsChange(int32 NumSegments);
	void OnMagazineIconChange(class UTexture2D* Icon);
	struct FVector GetOuterWheelPosition();
	struct FVector GetInnerWheelPosition();
};

// 0xC0 (0x320 - 0x260)
// Class ReadyOrNot.ItemWheelElement
class UItemWheelElement : public UUserWidget
{
public:
	uint8                                        Pad_2866[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EItemCategory                     ElementCategory;                                   // 0x268(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2868[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UImage*                                ElementImage;                                      // 0x270(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           ElementBrush;                                      // 0x278(0x88)(Edit, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                            CounterText;                                       // 0x300(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2869[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemWheelElement* GetDefaultObj();

	bool ShowCounter();
	void Selected(bool Selected);
	bool IsSelectable();
};

// 0x30 (0x350 - 0x320)
// Class ReadyOrNot.ItemWheelMagazineElement
class UItemWheelMagazineElement : public UItemWheelElement
{
public:
	uint8                                        Pad_286B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextBlock*                            MagazineType;                                      // 0x330(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_286C[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UItemWheelMagazineElement* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.KillHostageChanceAnimNotify
class UKillHostageChanceAnimNotify : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UKillHostageChanceAnimNotify* GetDefaultObj();

};

// 0x40 (0x810 - 0x7D0)
// Class ReadyOrNot.KingOfTheHillGM
class AKingOfTheHillGM : public AReadyOrNotGameMode_PVP
{
public:
	TArray<class APlayerCharacter*>              ArrestedBlueCharacters;                            // 0x7D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APlayerCharacter*>              ArrestedRedCharacters;                             // 0x7E0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFMODEvent*                            TOWVictorySound;                                   // 0x7F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchLoopMusic;                                    // 0x7F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchStartMusic;                                   // 0x800(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchEndMusic;                                     // 0x808(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AKingOfTheHillGM* GetDefaultObj();

};

// 0x8 (0x7E8 - 0x7E0)
// Class ReadyOrNot.KingOfTheHillGS
class AKingOfTheHillGS : public AReadyOrNotGameState
{
public:
	class ATugOfWarMover*                        Mover;                                             // 0x7E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AKingOfTheHillGS* GetDefaultObj();

};

// 0x30 (0x800 - 0x7D0)
// Class ReadyOrNot.KingOfTheHostageGM
class AKingOfTheHostageGM : public AReadyOrNotGameMode_PVP
{
public:
	TArray<class APawn*>                         SpawnedHostages;                                   // 0x7D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2870[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Start_RoundTime;                                   // 0x7F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBlueTeamOnAttack;                                 // 0x7F4(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2871[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AKingOfTheHostageGM* GetDefaultObj();

	class APawn* SpawnHostage(TSubclassOf<class APawn> HostageClass, const TArray<struct FVector>& SpawnLocations);
	void OnHostageRescued__DelegateSignature(class APawn* HostageRescued);
	bool AreAllHostagesSafe();
};

// 0x8 (0x7E8 - 0x7E0)
// Class ReadyOrNot.KingOfTheHostageGS
class AKingOfTheHostageGS : public AReadyOrNotGameState
{
public:
	float                                        RedTeam_RoundTimeRemaining;                        // 0x7E0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlueTeam_RoundTimeRemaining;                       // 0x7E4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AKingOfTheHostageGS* GetDefaultObj();

};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.Ladder
class ALadder : public AActor
{
public:
	class UBoxComponent*                         BoxCollision;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  LadderMesh;                                        // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ALadder* GetDefaultObj();

};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.LadderSnapZone
class ALadderSnapZone : public AActor
{
public:
	class UBoxComponent*                         SelectionZone;                                     // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                GhostLadder;                                       // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         Collision;                                         // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneRoot;                                         // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ValidPlacementMaterial;                            // 0x240(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             InvalidPlacementMaterial;                          // 0x248(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxRetractedRungCount;                             // 0x250(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHorizontal;                                       // 0x254(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_287B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ATelescopicLadder*                     AttachedLadder;                                    // 0x258(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUnableToPlace;                                    // 0x260(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_287C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumberOverlappers;                                 // 0x264(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ALadderSnapZone* GetDefaultObj();

	void OnCollisionOverlapEnd(class UPrimitiveComponent* Comp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnCollisionOverlapBegin(class UPrimitiveComponent* Comp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void Multicast_StopShowingGhostMesh();
	void Multicast_StartShowingGhostMesh(bool bAbleToPlace);
	void EnableCollision();
	void DisableCollision();
};

// 0x130 (0xFF8 - 0xEC8)
// Class ReadyOrNot.WeaponAttachment
class UWeaponAttachment : public USkeletalMeshComponent
{
public:
	TArray<class UMaterialInstanceDynamic*>      SkinMaterials;                                     // 0xEC8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EWeaponAttachmentType             WeaponAttachmentType;                              // 0xED8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2881[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EWeaponAttachmentType>     RemovesWeaponAttachmentTypes;                      // 0xEE0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EWeaponUnderbarrelAnimationType   UnderbarrelAnimationType;                          // 0xEF0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNeedNotAttach;                                    // 0xEF1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNullAttachmentOnly;                               // 0xEF2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2882[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketAttachment;                                  // 0xEF4(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2883[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  ItemName;                                          // 0xF00(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        PointCost;                                         // 0xF18(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2885[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAttachmentUIElements                 UIElements;                                        // 0xF20(0x78)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<enum class EItemAttachment>           AdditionalAttachments;                             // 0xF98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        AttachmentWeight;                                  // 0xFA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalRecoilMultiplier;                          // 0xFAC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HorizontalRecoilMultiplier;                        // 0xFB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpreadMultiplier;                                  // 0xFB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeadzoneMultiplier;                                // 0xFB8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MuzzleVelocityMultiplier;                          // 0xFBC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowReadyLengthMultiplier;                          // 0xFC0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldSupressWeapon;                              // 0xFC4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHidesMuzzleFlash;                                 // 0xFC5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideMuzzleFlash;                              // 0xFC6(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2887[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       MuzzleFlashParticle;                               // 0xFC8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       MuzzleSmokeParticle;                               // 0xFD0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2888[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MagazineAmmoIncrease;                              // 0xFDC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  HideBoneOnMesh;                                    // 0xFE0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraBobAdditionFactor;                           // 0xFE8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADS_Speed_Multiplier;                              // 0xFEC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ToggleSound;                                       // 0xFF0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UWeaponAttachment* GetDefaultObj();

	void PlayToggleSound();
	void ApplyWetness(float Wetness, float RainAmount);
};

// 0x48 (0x1040 - 0xFF8)
// Class ReadyOrNot.LaserAttachment
class ULaserAttachment : public UWeaponAttachment
{
public:
	bool                                         bRequireNVG;                                       // 0xFF8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2889[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              LaserParticleComponent;                            // 0x1000(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              LaserBeamEndComponent;                             // 0x1008(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       LaserParticle;                                     // 0x1010(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       LaserBeamEnd;                                      // 0x1018(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRepOn;                                            // 0x1020(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_288A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ALensFlare>                LensFlareClass;                                    // 0x1028(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALensFlare*                            SpawnedLensFlare;                                  // 0x1030(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_288B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULaserAttachment* GetDefaultObj();

	void ToggleLaser(bool bOn);
	void OnRep_On();
	bool IsLaserOn();
};

// 0x2D8 (0x4F8 - 0x220)
// Class ReadyOrNot.LensFlare
class ALensFlare : public AActor
{
public:
	class USceneComponent*                       Scene;                                             // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialBillboardComponent*           LensFlare;                                         // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AReadyOrNotCharacter*                  OwningCharacter;                                   // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    FlareMat;                                          // 0x238(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             BaseSize;                                          // 0x240(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinimumRotationDeltaToBeVisible;                   // 0x248(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_288C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              FlareMatInstance;                                  // 0x250(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_288D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalBrightness;                                  // 0x25C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GhostsBrightness;                                  // 0x260(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlickerIntensity;                                  // 0x264(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlickerTime;                                       // 0x268(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          GlobalColor;                                       // 0x26C(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FadeDistance;                                      // 0x27C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseFadeDistance;                                  // 0x280(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_288E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IncreasingBloomByDistance;                         // 0x284(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseDistanceBloom;                                 // 0x288(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2890[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HaloOpacity;                                       // 0x28C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HaloInnerRadius;                                   // 0x290(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HaloBrightness;                                    // 0x294(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          HaloOuterColor;                                    // 0x298(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          HaloInnerColor;                                    // 0x2A8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              HaloTexture;                                       // 0x2B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HaloTextureSize;                                   // 0x2C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HaloContrast;                                      // 0x2C4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CentreFlareBrightness;                             // 0x2C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2891[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              CentreFlareTexture;                                // 0x2D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          CentreFlareColor;                                  // 0x2D8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CentreFlareSize;                                   // 0x2E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CentreFlareContrast;                               // 0x2EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MainFlareBrightness;                               // 0x2F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2893[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              MainFlare;                                         // 0x2F8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MainFlareInnerRadius;                              // 0x300(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          MainOuterColor;                                    // 0x304(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          MainLensInnerColor;                                // 0x314(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MainFlareSize;                                     // 0x324(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MainFlareContrast;                                 // 0x328(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectionSize;                                    // 0x32C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              ReflectionCentreTexture;                           // 0x330(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          ReflectionColor;                                   // 0x338(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectionBrightness;                              // 0x348(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectionContrast;                                // 0x34C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OppositeFlaresAxisProjection;                      // 0x350(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeSize01;                               // 0x354(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeSize02;                               // 0x358(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          FlareOppositeColor01;                              // 0x35C(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          FlareOppositeColor02;                              // 0x36C(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeBrightness01;                         // 0x37C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeBrightness02;                         // 0x380(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeContrast01;                           // 0x384(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareOppositeContrast02;                           // 0x388(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2894[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              FlareOpposite01;                                   // 0x390(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              FlareOpposite02;                                   // 0x398(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FrontFlaresAxisProjection;                         // 0x3A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontSize01;                                  // 0x3A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontSize02;                                  // 0x3A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          FlareFrontColor01;                                 // 0x3AC(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          FlareFrontColor02;                                 // 0x3BC(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontProximityCentre01;                       // 0x3CC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontProximityCentre02;                       // 0x3D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2896[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              FlareFront01;                                      // 0x3D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              FlareFront02;                                      // 0x3E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontContrast01;                              // 0x3E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontContrast02;                              // 0x3EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontBrightness01;                            // 0x3F0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FlareFrontBrightness02;                            // 0x3F4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareSize01;                              // 0x3F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareSize02;                              // 0x3FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareProximityCentre01;                   // 0x400(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareProximityCentre02;                   // 0x404(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              ReflectedFlare01;                                  // 0x408(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              ReflectedFlare02;                                  // 0x410(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          ReflectedFlareColor01;                             // 0x418(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          ReflectedFlareColor02;                             // 0x428(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareContrast01;                          // 0x438(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareContrast02;                          // 0x43C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareBrightness01;                        // 0x440(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReflectedFlareBrightness02;                        // 0x444(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareProximityCentre01;                       // 0x448(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareSize01;                                  // 0x44C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareSizeRandom01;                            // 0x450(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2897[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              MinorFlare01;                                      // 0x458(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          MinorFlareColor01;                                 // 0x460(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareContrast01;                              // 0x470(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareBrightness01;                            // 0x474(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          MinorFlareColor02;                                 // 0x478(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareContrast02;                              // 0x488(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareBrightness02;                            // 0x48C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareProximityCentre02;                       // 0x490(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareSize02;                                  // 0x494(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinorFlareSizeRandom02;                            // 0x498(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2898[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              MinorFlare02;                                      // 0x4A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              Iris;                                              // 0x4A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IrisSize;                                          // 0x4B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IrisProximityCentre;                               // 0x4B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IrisBrightness;                                    // 0x4B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IrisContrast;                                      // 0x4BC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          IrisColor;                                         // 0x4C0(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              AdditionalFlare;                                   // 0x4D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AdditionalFlareSize;                               // 0x4D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AdditionalFlareContrast;                           // 0x4DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AdditionalFlareBrightness;                         // 0x4E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          AdditionalFlareColor;                              // 0x4E4(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_289A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALensFlare* GetDefaultObj();

};

// 0x798 (0x7C8 - 0x30)
// Class ReadyOrNot.ModLevelData
class UModLevelData : public UPrimaryDataAsset
{
public:
	class FName                                  LevelName;                                         // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowInMissionSelect;                              // 0x38(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_289C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLevelDataLookupTable                 Data;                                              // 0x40(0x788)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UModLevelData* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class ReadyOrNot.LicenseSave
class ULicenseSave : public USaveGame
{
public:
	bool                                         bAcceptedAlphaNonDisclosureAgreement;              // 0x28(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_289E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULicenseSave* GetDefaultObj();

	void AcceptAlphaNDA();
};

// 0x108 (0x1100 - 0xFF8)
// Class ReadyOrNot.LightAttachment
class ULightAttachment : public UWeaponAttachment
{
public:
	class USpotLightComponent*                   SpotLightComponent;                                // 0xFF8(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPointLightComponent*                  PointLightComponent;                               // 0x1000(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRepOn;                                            // 0x1008(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Intensity;                                         // 0x1010(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BouncedIntensity;                                  // 0x1014(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Attenuation;                                       // 0x1018(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InnerConeAngle;                                    // 0x101C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterConeAngle;                                    // 0x1020(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightColor;                                        // 0x1024(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    LightFunctionMaterial;                             // 0x1038(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LightFunctionScale;                                // 0x1040(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ALensFlare>                LensFlareClass;                                    // 0x1050(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALensFlare*                            SpawnedLensFlare;                                  // 0x1058(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumOfFlashLightTrackingPoints;                     // 0x1060(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AFlashLightTrackingPoint*>      FlashLightTrackingPoints;                          // 0x1068(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AFlashLightTrackingPoint*              PrimaryTrackingPoint;                              // 0x1078(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A5[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULightAttachment* GetDefaultObj();

	void ToggleLight(bool bOn);
	void OnRep_On();
	bool IsLightOn();
};

// 0xA8 (0x2C8 - 0x220)
// Class ReadyOrNot.LightningGenerator
class ALightningGenerator : public AActor
{
public:
	uint8                                        Pad_28A7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneRoot;                                         // 0x230(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                       Thunder;                                           // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              ParticleComponent;                                 // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParticleSpawnChance;                               // 0x248(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystem*>               ParticleTemplates;                                 // 0x250(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    ThunderSounds;                                     // 0x260(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*            Lightning;                                         // 0x270(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ThunderDelayMin;                                   // 0x278(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ThunderDelayMax;                                   // 0x27C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightningColorMin;                                 // 0x280(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightningColorMax;                                 // 0x290(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningDelayMin;                                 // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningDelayMax;                                 // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityMin;                             // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityMax;                             // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityDecay;                           // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityJitterMin;                       // 0x2B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityJitterMax;                       // 0x2B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityJitterTimeMin;                   // 0x2BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningIntensityJitterTimeMax;                   // 0x2C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightningJitterTimeRemaining;                      // 0x2C4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ALightningGenerator* GetDefaultObj();

	void PlayThunder();
	void PlayLightning();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ListenForDeath
class IListenForDeath : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IListenForDeath* GetDefaultObj();

	void OnCharacterDied(class AReadyOrNotCharacter* Victim, class AReadyOrNotCharacter* Killer, class AActor* Inflictor);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ListenForGameEnd
class IListenForGameEnd : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IListenForGameEnd* GetDefaultObj();

	void OnGameEnded();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ListenForGameStart
class IListenForGameStart : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IListenForGameStart* GetDefaultObj();

	void OnGameStarted();
};

// 0x78 (0x2D8 - 0x260)
// Class ReadyOrNot.LoadingScreen
class ULoadingScreen : public UUserWidget
{
public:
	uint8                                        Pad_28B2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevelStreaming*                       StreamedLevel;                                     // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28B4[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULoadingScreen* GetDefaultObj();

	void UpdateTip(class UTextBlock* TipBlock);
	void SetLoadingScreen(const class FString& InMap, const class FString& InMode, const class FString& InSessionName, bool bSeamlessTravel);
	class FString GetMapName();
	void GetLoadingScreenDetails(class FString* OutMap, class FString* OutMode, class FString* OutSessionName);
	float GetLoadingPercentage();
};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.Loadout_ArmorSelection_V2
class ULoadout_ArmorSelection_V2 : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class ULoadout_ArmorSelection_V2* GetDefaultObj();

};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.Loadout_Carousel_V3
class ULoadout_Carousel_V3 : public UUserWidget
{
public:
	class UTextBlock*                            Text;                                              // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ULoadout_Carousel_V3* GetDefaultObj();

	void SetText(class FText InputText);
};

// 0x40 (0x2C8 - 0x288)
// Class ReadyOrNot.Loadout_InformationBox
class ULoadout_InformationBox : public UCommonUserWidget
{
public:
	class UTextBlock*                            Txt_Category;                                      // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Txt_Class;                                         // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Txt_ItemName;                                      // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Txt_Description;                                   // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          VB_Attachments;                                    // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          VB_Effects;                                        // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotGameState*                  Gs;                                                // 0x2B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ULoadout_InformationBox* GetDefaultObj();

	void UpdateMaterialInfo(class UArmourMaterial* ArmorMaterial, class FText CurrentItemCategory);
	void UpdateInfoBox(class ABaseItem* Item, class FText CurrentItemCategory, bool IsItemWeapon);
	void UpdateEffectsInfo(class UWeaponAttachment* Attachment, class FText CurrentItemCategory);
	TArray<struct FAttachmentEffects> SetEffects(class UWeaponAttachment* Attachment);
	void SetCategory(class FText CurrentItemCategory);
	void SetAttachments(TSubclassOf<class ABaseWeapon> BaseWeapon, bool IsSecondary);
	void CreateEffectsElement(TArray<struct FAttachmentEffects>& AttachmentEffects);
	void CreateAttachmentElement(TArray<class UWeaponAttachment*>& Attachments, TArray<enum class EWeaponAttachmentType>& AttachmentTypes);
};

// 0x0 (0x288 - 0x288)
// Class ReadyOrNot.Loadout_SubSelection_V2
class ULoadout_SubSelection_V2 : public UCommonUserWidget
{
public:

	static class UClass* StaticClass();
	static class ULoadout_SubSelection_V2* GetDefaultObj();

};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.Loadout_TacticalSelection_V2
class ULoadout_TacticalSelection_V2 : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class ULoadout_TacticalSelection_V2* GetDefaultObj();

};

// 0x458 (0x778 - 0x320)
// Class ReadyOrNot.Loadout_V2
class ULoadout_V2 : public UCommonActivatableWidget
{
public:
	class UOverview_V2*                          OverviewWidget;                                    // 0x320(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonActivatableWidgetStack*         WidgetStack;                                       // 0x328(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotGameState*                  Gs;                                                // 0x330(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerController*           PC;                                                // 0x338(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerState*                Ps;                                                // 0x340(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28DF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotPlayerState*                PreviewPlayerState;                                // 0x350(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AReadyOrNotCharacter*, class AReadyOrNotPlayerState*> PlayerStatePreviewMap;                             // 0x358(0x50)(Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class APlayerCharacter>        RedTeamClass;                                      // 0x3A8(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class APlayerCharacter>        BlueTeamClass;                                     // 0x3D0(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class APlayerCharacter>        VIPClass;                                          // 0x3F8(0x28)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponPreset> WeaponToWeaponPresetsMap;                          // 0x420(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerState*                EquippingPlayerState;                              // 0x470(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EEquippingSwat, struct FSavedLoadout> LastSavedLoadout;                                  // 0x480(0x50)(Protected, NativeAccessSpecifierProtected)
	TMap<enum class EEquippingSwat, struct FSavedLoadout> LastEquippedPreviewLoadout;                        // 0x4D0(0x50)(Protected, NativeAccessSpecifierProtected)
	class FString                                PrimaryDrawAnim;                                   // 0x520(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                PrimaryHolsterAnim;                                // 0x530(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                SidearmDrawAnim;                                   // 0x540(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                SidearmHolsterAnim;                                // 0x550(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                CurrentPreviewAnimation;                           // 0x560(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  CurrentCameraTag;                                  // 0x570(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        HolsterTimeRemaining;                              // 0x578(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EItemCategory, class FName>  CategoryCameraTags;                                // 0x580(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EItemCategory, class FString> CategoryPoses;                                     // 0x5D0(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         ApplyingPresets;                                   // 0x620(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         UsingPreset;                                       // 0x621(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         PresetDirty;                                       // 0x622(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         VerticalListOpen;                                  // 0x623(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ListVisible;                                       // 0x624(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidgetAnimation*                      AnimExtendListSlide;                               // 0x628(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class ABaseItem*>          WorkBenchItemPtrMap;                               // 0x630(0x50)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponAttachmentData> WeaponToAttachmentsMap;                            // 0x680(0x50)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsCustomizingPrimary;                             // 0x6D0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E3[0x13];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ActiveCameraTag;                                   // 0x6E4(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E4[0x5C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ULoadoutSlotWidget*                    CurrentActiveSlot;                                 // 0x748(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      FadeOut;                                           // 0x750(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_28E5[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0x770(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadout_V2* GetDefaultObj();

	void UpdateWorkbenchItemAttachments(const struct FSavedLoadout& Loadout, bool IsSecondary);
	void UpdatePreviewWeaponAttachments(bool IsSecondary, TSubclassOf<class UWeaponAttachment> Attachment);
	void UpdatePreviewCharacterSecondary();
	void UpdatePreviewCharacterPrimary();
	void UpdatePreviewCharacterLongTactical();
	void UpdatePreviewCharacterHeadwear();
	void UpdatePreviewCharacterArmour();
	void UpdatePreviewCharacter(class AReadyOrNotPlayerState* InPreviewPlayerState, class FName Tag);
	void UpdateDefaultPreviewCharacter();
	void SetWorkbenchItemClass(TSubclassOf<class ABaseItem> Item, class FName Tag, const struct FSavedLoadout& Loadout);
	void SetSecondaryWeapon(const struct FWeaponData& WeaponData);
	void SetPrimaryWeapon(const struct FWeaponData& WeaponData);
	void SetLongTactical(TSubclassOf<class ABaseItem> LongTactical);
	void SetLockInput(bool bShouldLockInput);
	void SetItem(enum class EItemType ItemType, TSubclassOf<class ABaseItem> ItemClass);
	void SetHeadwear(TSubclassOf<class ABaseItem> Headwear);
	void SetDefaultCamera(float BlendTime);
	void SetBodyArmour(TSubclassOf<class ABaseItem> BodyArmour);
	void SetActiveCameraByTagWithFade(class FName Tag, float BlendTime, float FadeTime);
	void SetActiveCameraByTag(class FName Tag, float BlendTime);
	void SaveStoredWeaponAttachments();
	void PlayAnimationOnPreviewCharacter(const class FString& Animation);
	void OpenCustomization();
	void OnSwatCharacterChanged();
	void OnLoadoutSaved();
	void OnLoadoutPresetsSaved();
	void OnLoadoutPresetsLoaded();
	void OnLoadoutLoaded();
	void OnLoadoutItemPresetsSaved();
	void OnLoadoutItemPresetsLoaded();
	void OnLoadoutItemAttachmentsSaved();
	void OnLoadoutItemAttachmentsLoaded();
	void LoadWeaponPresets();
	void LoadStoredWeaponAttachments();
	void LoadAddAttachment(class ABaseWeapon* BaseWeapon, TSubclassOf<class UWeaponAttachment> Attachment, bool bReplicateAttachment);
	void HidePrimaryAndSecondary();
	void HidePrimary(bool bIsHidden);
	bool GetInputLocked();
	class AReadyOrNotCharacter* GetDefaultPreviewCharacter();
	void ExitLoadout();
	void ApplyLoadoutPreset(const struct FLoadoutPreset& LoadoutPreset);
};

// 0x8 (0x328 - 0x320)
// Class ReadyOrNot.Loadout_WeaponSelection_V2
class ULoadout_WeaponSelection_V2 : public UCommonActivatableWidget
{
public:
	int32                                        ActiveSwitcherIndex;                               // 0x320(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         ShouldUpdateWorkbench;                             // 0x324(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28E6[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULoadout_WeaponSelection_V2* GetDefaultObj();

	void SetShouldUpdateWorkbench(bool ShouldUpdate);
	bool GetShouldUpdateWorkbench();
};

// 0x50 (0x2B0 - 0x260)
// Class ReadyOrNot.LoadoutInformationTableWidget
class ULoadoutInformationTableWidget : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnModifyWeaponButtonClicked;                       // 0x260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInfoPanelRemoved;                                // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCancelRefresh;                                   // 0x280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInfoPanelAttachmentClicked;                      // 0x290(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInfoPanelRemoveAttachmentClicked;                // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutInformationTableWidget* GetDefaultObj();

	void RefreshPanelItemInfo(const struct FSavedLoadout& ActiveLoadout, TSubclassOf<class ABaseItem> ItemClass, enum class EItemCategory LoadoutSlot, bool bRestricted);
	void RefreshPanelArmourMaterial(class UArmourMaterial* ArmourMaterial);
	void RefreshPanelAmmoInfo(const struct FAmmoTypeData& AmmoType, TSubclassOf<class ABaseItem> ItemClass);
	void OnModifyWeaponButtonClicked__DelegateSignature(class ABaseItem* ItemToModify);
	void OnInfoPanelRemoved__DelegateSignature();
	void OnInfoPanelRemoveAttachmentClicked__DelegateSignature(enum class EWeaponAttachmentType WeaponSlot);
	void OnInfoPanelAttachmentClicked__DelegateSignature(enum class EWeaponAttachmentType WeaponSlot, class UWeaponAttachment* AttachmentData);
	void OnCancelRefresh__DelegateSignature();
};

// 0x90 (0xB8 - 0x28)
// Class ReadyOrNot.LoadoutManager
class ULoadoutManager : public UObject
{
public:
	TArray<class ABaseItem*>                     AllItems;                                          // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     PrimaryWeapons;                                    // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     SecondaryWeapons;                                  // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     LongTacticalItems;                                 // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     TacticalItems;                                     // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     BodyArmors;                                        // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABaseItem*>                     Helmets;                                           // 0x88(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UArmourMaterial*>               ArmorMaterials;                                    // 0x98(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCustomizationDataBase*>        CustomizationAssets;                               // 0xA8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutManager* GetDefaultObj();

};

// 0x60 (0x2C0 - 0x260)
// Class ReadyOrNot.LoadoutOverviewWidget
class ULoadoutOverviewWidget : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnOverviewItemClicked;                             // 0x260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOverviewItemHovered;                             // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOverviewItemUnhovered;                           // 0x280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttachmentSlotClicked;                           // 0x290(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttachmentSlotHovered;                           // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttachmentSlotUnhovered;                         // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutOverviewWidget* GetDefaultObj();

	void LoadoutSlotInteraction__DelegateSignature(class ULoadoutSlotWidget* TriggeringSlot);
	void LoadoutSlotAttachmentInteraction__DelegateSignature(class ULoadoutSlotAttachmentWidget* AttachmentSlot);
	void InitializeOverviewList(bool bRemotePlayer);
};

// 0x68 (0x288 - 0x220)
// Class ReadyOrNot.LoadoutPortal
class ALoadoutPortal : public AActor
{
public:
	uint8                                        Pad_28EC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>          CompsToOutline;                                    // 0x230(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class ULightComponent*>               LightsToEnable;                                    // 0x240(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class ULevelSequence*                        LevelSequence;                                     // 0x250(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequencePlayer*                  LevelSequencePlayer;                               // 0x258(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALevelSequenceActor*                   LevelSequenceActor;                                // 0x260(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bOpenCustomization;                                // 0x268(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28EE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  LightActorsOfTag;                                  // 0x26C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         IsActive;                                          // 0x274(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28EF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULoadout_V2*                           LoadoutWidget;                                     // 0x278(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28F0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALoadoutPortal* GetDefaultObj();

	void OnLoadoutUnloaded();
	void OnLoadoutShown();
	void OnLoadoutLoaded();
	void OnLoadoutHidden();
	void OnLoadoutFadeOut();
	void OnLoadoutFadeIn();
	void LoadLoadout();
};

// 0xB8 (0x340 - 0x288)
// Class ReadyOrNot.LoadoutSlot_V2
class ULoadoutSlot_V2 : public UCommonUserWidget
{
public:
	class ABaseItem*                             BaseItem;                                          // 0x288(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseItem>                 BaseItemClass;                                     // 0x290(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseWeapon*                           BaseWeapon;                                        // 0x298(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseArmour*                           BaseArmor;                                         // 0x2A0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArmourMaterial*                       ArmorMaterial;                                     // 0x2A8(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  AmmunitionName;                                    // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            ItemImage;                                         // 0x2B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            EmptyImage;                                        // 0x2C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  ItemName;                                          // 0x2C8(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                  ItemType;                                          // 0x2E0(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                  ItemSubtext;                                       // 0x2F8(0x18)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                        SlotCount;                                         // 0x310(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EWeaponAttachmentType             AttachmentType;                                    // 0x314(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2900[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWeaponAttachment*                     Attachment;                                        // 0x318(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ELoadoutMunitionSlotType          MunitionType;                                      // 0x320(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHovered;                                          // 0x321(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPressed;                                          // 0x322(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseGamepad;                                       // 0x323(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAttachment;                                       // 0x324(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2901[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotGameState*                  Gs;                                                // 0x328(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0x330(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bEquipped;                                         // 0x338(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2902[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULoadoutSlot_V2* GetDefaultObj();

	void UpdateSlotCount();
	void ShowSubtext(class FText& Text, bool Show);
	void SetVisualState(bool Hovered, bool Pressed, bool Equipped);
	void SetTacticalMunition(enum class ELoadoutMunitionSlotType Munition, class ABaseItem* TacticalItem);
	void SetStyle(bool UseGamepad);
	void SetItem(class ABaseItem* Item);
	void SetEquipped(bool IsEquipped);
	void SetAttachment(class UWeaponAttachment* WeaponAttachment);
	void SetArmorMaterial(class UArmourMaterial* Item);
	void SetAmmoMunition(class FName AmmoName, bool Secondary);
	void RefreshItemImage();
	void RefreshInfo();
	void RefreshAttachmentImage();
	void OnSlotsUpdated();
	void OnEquipped();
	void IncrementSlots();
	bool GetEquipped();
	TSubclassOf<class UWeaponAttachment> GetAttachmentClass();
	void DecrementSlots();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.LoadoutSlotAttachmentWidget
class ULoadoutSlotAttachmentWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class ULoadoutSlotAttachmentWidget* GetDefaultObj();

};

// 0x1A0 (0x428 - 0x288)
// Class ReadyOrNot.LoadoutSlotWidget
class ULoadoutSlotWidget : public UCommonUserWidget
{
public:
	bool                                         IsActive;                                          // 0x288(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemCategory                     LoadoutSlot;                                       // 0x289(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2903[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABaseItem>                 ItemData;                                          // 0x290(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPrimary;                                        // 0x298(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAmmunition;                                     // 0x299(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2904[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAmmoTypeData                         AmmoType;                                          // 0x2A0(0x160)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bIsArmourMaterial;                                 // 0x400(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2905[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UArmourMaterial*                       ArmourMaterialData;                                // 0x408(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EWeaponAttachmentType             AttachmentSlot;                                    // 0x410(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2906[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLoadoutCategory>              GearCategoryClasses;                               // 0x418(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutSlotWidget* GetDefaultObj();

	void SetActive(bool IsActive);
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.LoadoutUnitSelectWidget
class ULoadoutUnitSelectWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class ULoadoutUnitSelectWidget* GetDefaultObj();

	void Init();
};

// 0x40 (0x360 - 0x320)
// Class ReadyOrNot.LoadoutVerticalItemListWidget
class ULoadoutVerticalItemListWidget : public UCommonActivatableWidget
{
public:
	FMulticastInlineDelegateProperty_            OnOverviewItemHovered;                             // 0x320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOverviewItemUnhovered;                           // 0x330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttachmentSlotHovered;                           // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAttachmentSlotUnhovered;                         // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULoadoutVerticalItemListWidget* GetDefaultObj();

};

// 0x610 (0x930 - 0x320)
// Class ReadyOrNot.PreMissionPlanning
class UPreMissionPlanning : public UMenuWidget
{
public:
	bool                                         bIsWeaponCustomization;                            // 0x320(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOpenInQuartermaster;                              // 0x321(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCustomizingPrimary;                             // 0x322(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_294F[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABaseItem>                 CustomizeItemClass;                                // 0x328(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotGameState*                  Gs;                                                // 0x330(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotPlayerController*           PC;                                                // 0x338(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotPlayerState*                Ps;                                                // 0x340(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                       PreMissionStreamedLevel;                           // 0x348(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            LoadoutMusic;                                      // 0x350(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2952[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotPlayerState*                PreviewPlayerState;                                // 0x368(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2953[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EEquippingSwat                    EquippingSwatMember;                               // 0x372(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2954[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EEquippingSwat, struct FSavedLoadout> LastSavedLoadout;                                  // 0x378(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_2955[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLoadedLoadout;                                    // 0x420(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2956[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         ActiveLoadout;                                     // 0x428(0x188)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLoadoutPreset>     LoadoutPresetMap;                                  // 0x5B0(0x50)(BlueprintVisible, NativeAccessSpecifierPublic)
	class AReadyOrNotPlayerState*                EquippingPlayerState;                              // 0x600(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponPreset> WeaponToWeaponPresetsMap;                          // 0x608(0x50)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseItem>, struct FSavedWeaponAttachmentData> WeaponToAttachmentsMap;                            // 0x658(0x50)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseWeapon>, enum class EFireMode> WeaponClassToDefaultFireModeMap;                   // 0x6A8(0x50)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        Pad_2957[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ActiveCameraTag;                                   // 0x6FC(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2959[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnRequestRefresh;                                  // 0x708(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_295B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APlayerCharacter>        RedTeamClass;                                      // 0x720(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class APlayerCharacter>        BlueTeamClass;                                     // 0x748(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class APlayerCharacter>        VIPClass;                                          // 0x770(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_295D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AReadyOrNotCharacter*, class AReadyOrNotPlayerState*> PlayerStatePreviewMap;                             // 0x7A0(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_295E[0xD8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, class ABaseItem*>          WorkBenchItemPtrMap;                               // 0x8C8(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	enum class EItemType                         LastSetItemType;                                   // 0x918(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemClass                        LastSetItemClass;                                  // 0x919(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_295F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ABaseItem>                 LastSetItemObjectClass;                            // 0x920(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2960[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanUpdateWithUI;                                  // 0x929(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2962[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPreMissionPlanning* GetDefaultObj();

	void UpdateWorkbenchItemAttachments();
	void UpdateWeaponPresets(TSubclassOf<class ABaseItem> Weapon, const struct FSavedWeaponPreset& Presets);
	void UpdateWeaponPreset(TSubclassOf<class ABaseItem> Weapon, const struct FWeaponPreset& PresetData, int32 Index);
	void UpdateWeaponDefaultFireMode(TSubclassOf<class ABaseWeapon> Weapon, enum class EFireMode NewDefaultFireMode);
	void UpdatePreviewWeaponSkin(bool IsSecondary, TSubclassOf<class USkinComponent> SkinAttachment);
	void UpdatePreviewWeaponAttachments(bool IsSecondary, TSubclassOf<class UWeaponAttachment> Attachment);
	void UpdatePreviewCharacterSecondary();
	void UpdatePreviewCharacterPrimary();
	void UpdatePreviewCharacterLongTactical();
	void UpdatePreviewCharacterHeadwear();
	void UpdatePreviewCharacterArmour();
	void UpdatePreviewCharacter(class AReadyOrNotPlayerState* InPreviewPlayerState, class FName Tag);
	void SetWorkbenchItemClass(TSubclassOf<class ABaseItem> Item, class FName Tag);
	void SetSubcategory(enum class EPreMissionSubCategory NewSubCategory);
	void SetSecondaryWeapon(const struct FWeaponData& WeaponData);
	void SetSecondaryUnderbarrelAttachment(TSubclassOf<class UWeaponAttachment> UnderbarrelAttachment);
	void SetSecondaryStockAttachment(TSubclassOf<class UWeaponAttachment> StockAttachment);
	void SetSecondarySkinAttachment(TSubclassOf<class USkinComponent> SkinAttachment);
	void SetSecondaryScopeAttachment(TSubclassOf<class UWeaponAttachment> ScopeAttachment);
	void SetSecondaryOverbarrelAttachment(TSubclassOf<class UWeaponAttachment> OverbarrelAttachment);
	void SetSecondaryMuzzleAttachment(TSubclassOf<class UWeaponAttachment> MuzzleAttachment);
	void SetSecondaryIlluminatorAttachment(TSubclassOf<class UWeaponAttachment> IlluminatorAttachment);
	void SetSecondaryGripAttachment(TSubclassOf<class UWeaponAttachment> GripAttachment);
	void SetSecondaryAmmunitionAttachment(TSubclassOf<class UWeaponAttachment> AmmunitionAttachment);
	void SetPrimaryWeapon(const struct FWeaponData& WeaponData);
	void SetPrimaryUnderbarrelAttachment(TSubclassOf<class UWeaponAttachment> UnderbarrelAttachment);
	void SetPrimaryStockAttachment(TSubclassOf<class UWeaponAttachment> StockAttachment);
	void SetPrimarySkinAttachment(TSubclassOf<class USkinComponent> SkinAttachment);
	void SetPrimaryScopeAttachment(TSubclassOf<class UWeaponAttachment> ScopeAttachment);
	void SetPrimaryOverbarrelAttachment(TSubclassOf<class UWeaponAttachment> OverbarrelAttachment);
	void SetPrimaryMuzzleAttachment(TSubclassOf<class UWeaponAttachment> MuzzleAttachment);
	void SetPrimaryIlluminatorAttachment(TSubclassOf<class UWeaponAttachment> IlluminatorAttachment);
	void SetPrimaryGripAttachment(TSubclassOf<class UWeaponAttachment> GripAttachment);
	void SetPrimaryAmmunitionAttachment(TSubclassOf<class UWeaponAttachment> AmmunitionAttachment);
	void SetPlayerSkin(TSubclassOf<class USkinComponent> SkinCompClass);
	void SetLongTactical(TSubclassOf<class ABaseItem> LongTactical);
	void SetLockInput(bool bShouldLockInput);
	void SetLightColorByTag(class FName Tag, const struct FLinearColor& Color);
	void SetItem_V2(enum class EItemClass ItemClass, TSubclassOf<class ABaseItem> ItemObjectClass);
	void SetItem(enum class EItemType ItemType, TSubclassOf<class ABaseItem> ItemClass);
	void SetHeadwear(TSubclassOf<class ABaseItem> Headwear);
	void SetEquippingSwatMember(enum class EEquippingSwat NewEquippingSwat, class AReadyOrNotPlayerState* NewEquippingPlayerState);
	void SetBodyArmour(TSubclassOf<class ABaseItem> BodyArmour);
	void SetActiveCameraByTag(class FName Tag, float BlendTime);
	void SaveWeaponPresets();
	void SaveWeaponDefaultFireMode();
	void SaveWeaponAttachments();
	void SaveLoadoutPresets();
	void SaveItemClassAsSlot(enum class EItemType ItemType, TSubclassOf<class ABaseItem> Class);
	void SaveActiveLoadout();
	void PlayAnimationOnQuartermaster(const class FString& Animation);
	void PlayAnimationOnPreviewCharacter(const class FString& Animation);
	void OnWeaponDefaultFireModesLoaded();
	void OnSwatCharacterChanged();
	void OnRequestRefresh__DelegateSignature();
	void OnLoadoutSaved();
	void OnLoadoutPresetsSaved();
	void OnLoadoutPresetsLoaded();
	void OnLoadoutLoaded();
	void OnLoadoutItemPresetsSaved();
	void OnLoadoutItemPresetsLoaded();
	void OnLoadoutItemAttachmentsSaved();
	void OnLoadoutItemAttachmentsLoaded();
	void LoadWeaponPresets();
	void LoadWeaponDefaultFireModes();
	void LoadWeaponAttachments();
	void LoadLoadoutPresets();
	enum class EItemType ItemClassToItemType(enum class EItemClass InItemClass);
	bool IsInLobby();
	bool IsAnyWeaponVisible();
	void Init(bool bReadOnly, const struct FSavedLoadout& PreviewLoadout);
	void HideWeapons(bool bHidePrimary, bool bHideSecondary, float Delay);
	void HideSecondary(bool bIsHidden);
	void HidePrimary(bool bIsHidden);
	struct FSavedWeaponPreset GetWeaponPresetsData(TSubclassOf<class ABaseItem> Weapon);
	struct FWeaponPreset GetWeaponPresetData(TSubclassOf<class ABaseItem> Weapon, int32 Index);
	enum class EPreMissionSubCategory GetSubcategory();
	class UPreMissionPlanning* GetPremissionPlanning();
	TSubclassOf<class ABaseItem> GetLastItemInSlot(enum class EItemType ItemType);
	struct FSavedWeaponAttachmentData GetItemAttachmentData(TSubclassOf<class ABaseItem> Weapon);
	bool GetInputLocked();
	void GetEquippingSwatMember(enum class EEquippingSwat* EquippingSwat);
	class AReadyOrNotCharacter* GetDefaultPreviewCharacter();
	TArray<TSubclassOf<class USkinComponent>> GetAvailablePlayerSkins();
	void EquipSecondary();
	void EquipPrimary();
	void DoSaveLoadout(enum class EEquippingSwat SwatMember, const struct FSavedLoadout& Loadout);
	void DoPrimaryWeaponPreviewBlend();
	void ClearPreviewWeaponSkin(bool IsSecondary);
	void CleanSecondaryGun();
	void CleanPrimaryGun();
	void AttachSecondaryToSocket(class FName Socket);
	void AttachPrimaryToSocket(class FName Socket);
};

// 0x1D0 (0xB00 - 0x930)
// Class ReadyOrNot.LoadoutWidget
class ULoadoutWidget : public UPreMissionPlanning
{
public:
	TSubclassOf<class UUserWidget>               HUDWidgetClass;                                    // 0x930(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoadoutUnitSelectWidget*              WLoadoutCharacterSelect;                           // 0x938(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoadoutOverviewWidget*                WLoadoutOverview;                                  // 0x940(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoadoutVerticalItemListWidget*        VerticalItemList;                                  // 0x948(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoadoutInformationTableWidget*        InfoPanel;                                         // 0x950(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class EItemCategory, class FName>  CategoryCameraTags;                                // 0x958(0x50)(Edit, NativeAccessSpecifierPrivate)
	TMap<enum class EItemCategory, class FString> CategoryPoses;                                     // 0x9A8(0x50)(Edit, NativeAccessSpecifierPrivate)
	class FString                                PrimaryDrawAnim;                                   // 0x9F8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                SidearmDrawAnim;                                   // 0xA08(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                PrimaryHolsterAnim;                                // 0xA18(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                SidearmHolsterAnim;                                // 0xA28(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODEvent*                            WeaponHolsteredSound;                              // 0xA38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29A0[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULoadoutWidget* GetDefaultObj();

	void UpdateWorkbenchCameraRotation(float DeltaTime);
	void UpdatePreview(enum class EItemCategory Selection);
	void UpdateHUDStates();
	void UpdateCurrentItem();
	void UpdateAllPreviewWeaponAttachments(bool bIsWorkbench, TSubclassOf<class ABaseItem> Weapon, bool bIsSidearm);
	void SidearmChanged();
	void ShowToolTip(const struct FLevelDataLookupTable& MissionDetails);
	void ShowItemInfoPanel(class ULoadoutSlotWidget* LoadoutSlot);
	void ShowHUD();
	void SetupWorkbenchCamera();
	void SetupBindings();
	void SetPresetModified(bool bPresetDirty);
	void SetPreMissionCameraBySlot(enum class EItemCategory LoadoutSlot, float BlendTime);
	void SetPreMissionCamera(class FName Tag, const class FString& Animation, float BlendTime);
	void SetActiveQuartermasterSlot();
	void SetActiveLoadout(const class FString& LoadoutName, class AReadyOrNotPlayerState* RoNPlayerState, enum class EEquippingSwat EquippingUnit);
	void SaveWeaponPreset(class UUserWidget* TriggeringModal, class FText TextEntry);
	void SaveTacticalSlotcount(int32 TacticalSlotsCount);
	void SaveSidearmAmmoSlotCount(int32 SidearmAmmoSlotCount);
	void SavePrimaryAmmoSlotCount(int32 PrimaryAmmoSlotCount);
	void SaveLoadoutPreset(class UUserWidget* TriggeringModal, class FText TextEntry);
	void SaveGrenadeSlotCount(int32 GrenadeSlotsCount);
	void SaveArmorCoverage(enum class EArmourCoverage ArmourCoverage);
	void SaveActiveLoadoutOld();
	void RefreshItemInfoPanel(class ULoadoutSlotWidget* LoadoutSlot);
	void RefreshAttachmentInfoPanel(class ULoadoutSlotWidget* LoadoutSlot);
	void PrimaryChanged();
	void PlaySetPreMissionCameraAnimation();
	void OpenWeaponQuartermaster(class ABaseItem* ItemToModify);
	void OpenLoadoutPresetModal(const class FString& CurrentPreset, bool bDelete);
	void OpenItemList(bool bVerticalList, enum class EItemCategory LoadoutSlot, TArray<struct FLoadoutCategory>& GearCategoryClasses);
	void OpenDeployableList(bool bVerticalList, enum class EItemCategory LoadoutSlot, TArray<struct FLoadoutCategory>& GearCategoryClasses, TArray<TSubclassOf<class ABaseItem>>& ExcludedItems);
	void OpenAttachmentList(bool bVerticalList, TSubclassOf<class ABaseItem> ItemData, enum class EWeaponAttachmentType AttachmentType);
	void OpenArmourMaterialList(bool bVerticalList);
	void OpenArmorQuartermaster(class ABaseItem* ItemToModify);
	void OpenAmmoList(bool bVerticalList, class FName ExcludedAmmoType, TSubclassOf<class ABaseItem> Weapon);
	void LookAtAttachmentSlot(enum class EWeaponAttachmentType AttachmentSlot);
	void LoadDefaultLoadout();
	void ItemUnhovered(class ULoadoutSlotWidget* TriggeringSlot);
	void ItemHovered(class ULoadoutSlotWidget* TriggeringSlot);
	void ItemClicked(class ULoadoutSlotWidget* TriggeringSlot);
	bool IsNullAttachment(TSubclassOf<class UWeaponAttachment> Attachment);
	void InitializeWeaponAttachmentMap();
	void InitializeQuartermaster();
	void InitializeOverview();
	void InitializeItemSelectionRemote(class ULoadoutSlotWidget* TriggeringSlot);
	void InitializeItemSelectionPanel(class ULoadoutSlotWidget* TriggeringSlot);
	void InitializeAttachmentSelectionPanel(class ULoadoutSlotWidget* TriggeringSlot);
	bool HolsterPreviewCharacterWeapon();
	void HideItemList();
	void HideItemInfoPanel();
	void HideHUD();
	void GoBack();
	class ULoadoutWidget* GetLoadoutWidget();
	void EquipTactical(const TArray<class ABaseItem*>& ItemData);
	void EquipSidearmAttachments(enum class EWeaponAttachmentType AttachmentType, class UWeaponAttachment* AttachmentData, class ABaseItem* AttachingWeapon);
	void EquipSidearmAmmo(TArray<class FName>& SidearmAmmo);
	void EquipPrimaryAttachments(enum class EWeaponAttachmentType AttachmentType, class UWeaponAttachment* AttachmentData, class ABaseItem* AttachingWeapon);
	void EquipPrimaryAmmo(TArray<class FName>& PrimaryAmmo);
	void EquipLongTactical(class ABaseItem* ItemData);
	void EquipItem(class ABaseItem* ItemData);
	void EquipHeadwear(class ABaseItem* ItemData);
	void EquipGrenades(const TArray<class ABaseItem*>& ItemData);
	void EquipAttachment(class ABaseItem* AttachingWeapon, class UWeaponAttachment* AttachmentData);
	void EquipArmourMaterial(class UArmourMaterial* ArmourMaterial);
	void EquipArmor(class ABaseItem* ItemData);
	void DoItemUnhover();
	void DeselectLoadoutSlot();
	void DeselectAttachmentSlot();
	void DeleteLoadoutPreset(class UUserWidget* TriggeringModal, class FText TextEntry);
	void CloseLoadout();
	void ClearPreset();
	void CleanCurrentWeapon();
	void CheckPreset();
	void AttachmentUnhovered(class ULoadoutSlotAttachmentWidget* AttachmentSlot);
	void AttachmentHovered(class ULoadoutSlotAttachmentWidget* AttachmentSlot);
	void AttachmentClicked(class ULoadoutSlotAttachmentWidget* AttachmentSlot);
	void ApplyLoadoutPreset(const struct FLoadoutPreset& LoadoutPreset);
};

// 0x28 (0x250 - 0x228)
// Class ReadyOrNot.ReadyOrNotTriggerVolume
class AReadyOrNotTriggerVolume : public ATriggerBox
{
public:
	TArray<TSubclassOf<class AActor>>            OverlappingClasses;                                // 0x228(0x10)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        TestActors;                                        // 0x238(0x10)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_29BC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotTriggerVolume* GetDefaultObj();

	void OnActorSpawned(class AActor* Actor);
};

// 0x0 (0x250 - 0x250)
// Class ReadyOrNot.LobbyFiringRangeArea
class ALobbyFiringRangeArea : public AReadyOrNotTriggerVolume
{
public:

	static class UClass* StaticClass();
	static class ALobbyFiringRangeArea* GetDefaultObj();

};

// 0x80 (0x7F0 - 0x770)
// Class ReadyOrNot.LobbyGM
class ALobbyGM : public AReadyOrNotGameMode
{
public:
	uint8                                        Pad_29C2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotPlayerController*>   InitalizedPlayerControllers;                       // 0x778(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C3[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UCommanderProfile*                     CommanderProfile;                                  // 0x7D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URosterManager*                        RosterManager;                                     // 0x7D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29C4[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALobbyGM* GetDefaultObj();

	void OpenRosterSelection();
	void OpenMissionSelect();
	void OnGenericPlayerInitialization__DelegateSignature(class AReadyOrNotPlayerController* ReadyOrNotPlayerController);
};

// 0x20 (0x800 - 0x7E0)
// Class ReadyOrNot.LobbyGS
class ALobbyGS : public AReadyOrNotGameState
{
public:
	class UFMODEvent*                            LobbyMusicEvent;                                   // 0x7E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MissionGradeMusic;                                 // 0x7F0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C7[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALobbyGS* GetDefaultObj();

};

// 0x0 (0x1E8 - 0x1E8)
// Class ReadyOrNot.LockPickDoorActivity
class ULockPickDoorActivity : public UDoorInteractionActivity
{
public:

	static class UClass* StaticClass();
	static class ULockPickDoorActivity* GetDefaultObj();

};

// 0x18 (0x9E8 - 0x9D0)
// Class ReadyOrNot.Tool
class ATool : public ABaseItem
{
public:
	float                                        MaxOperatingTime;                                  // 0x9D0(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CurrentOperatingTime;                              // 0x9D4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bOperating : 1;                                    // Mask: 0x1, PropSize: 0x10x9D8(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1DB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_29D8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                TargetActor;                                       // 0x9E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ATool* GetDefaultObj();

	void StopUsingTool(class AActor* Target);
	void StartUsingTool(class AActor* Target);
	void Server_ToolComplete();
	void Server_StopUsingTool(class AActor* Target);
	void Server_StartUsingTool(class AActor* Target);
	bool IsOperating();
	float GetMaxOperatingTime();
	float GetCurrentOperatingTime();
	void Client_StopToolAnimation();
	void Client_FinishedToolUse(class AActor* Target, class APlayerCharacter* PC);
};

// 0x8 (0x9F0 - 0x9E8)
// Class ReadyOrNot.LockpickGun
class ALockpickGun : public ATool
{
public:
	uint8                                        Pad_29DA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALockpickGun* GetDefaultObj();

};

// 0xC8 (0xF8 - 0x30)
// Class ReadyOrNot.LookupData
class ULookupData : public UDataAsset
{
public:
	bool                                         bToggleToDoAssetUpdate;                            // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29DB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class ABaseItem>>       Items;                                             // 0x38(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class ABaseWeapon>>     Weapons;                                           // 0x48(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class ABaseArmour>>     Armour;                                            // 0x58(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class ABaseGrenade>>    Grenades;                                          // 0x68(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class ABaseShell>>      Shells;                                            // 0x78(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class AProjectile>>     Projectiles;                                       // 0x88(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class APlayerCharacter>> Characters;                                        // 0x98(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class ACyberneticCharacter>> AI;                                                // 0xA8(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                         bAddSelectedBlueprintToItemData;                   // 0xB8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29DD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class ABaseItem>>         biClassArray;                                      // 0xC0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UDataTable*                            ItemDataLookupTable;                               // 0xD0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bToggleForceLevelDataTable;                        // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29DE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            LevelDataLookupTable;                              // 0xE0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bToggleForceAIData;                                // 0xE8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29DF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            AIDataLookupTable;                                 // 0xF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ULookupData* GetDefaultObj();

	void EmptyData();
};

// 0x18 (0x290 - 0x278)
// Class ReadyOrNot.LoudnessMeterWidget
class ULoudnessMeterWidget : public UBaseWidget
{
public:
	class UWidgetSwitcher*                       MovementSound_WidgetSwitcher;                      // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x280(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_29E0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULoudnessMeterWidget* GetDefaultObj();

};

// 0x18 (0x1010 - 0xFF8)
// Class ReadyOrNot.MagazineAttachment
class UMagazineAttachment : public UWeaponAttachment
{
public:
	class UStaticMesh*                           MagazineStaticMesh;                                // 0xFF8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Socket_01;                                         // 0x1000(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Socket_02;                                         // 0x1008(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMagazineAttachment* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class ReadyOrNot.MagMaskingAnimNotify
class UMagMaskingAnimNotify : public UAnimNotify
{
public:
	bool                                         bIsFirstPerson;                                    // 0x38(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EMaskMag                          MaskMag;                                           // 0x39(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EMaskMagState                     MagState;                                          // 0x3A(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bDummyCopyMag02;                                   // 0x3B(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29E1[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMagMaskingAnimNotify* GetDefaultObj();

};

// 0xE8 (0x408 - 0x320)
// Class ReadyOrNot.MainMenu
class UMainMenu : public UMenuWidget
{
public:
	TMap<enum class ELoginState, class FText>    BackendConnectionStatus;                           // 0x320(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<enum class ELoginState, struct FSlateColor> BackendConnectionStatusColor;                      // 0x370(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCanvasPanel*                          BackgroundCanvas;                                  // 0x3C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           PlayBtn;                                           // 0x3C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           FindCOOPSessionBtn;                                // 0x3D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           FindPVPSessionBtn;                                 // 0x3D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           PlayPublicLobbyBtn;                                // 0x3E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                           PlayFriendsOnlyBtn;                                // 0x3E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Txt_BackEndConnection;                             // 0x3F0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Txt_PublicLobbyCooldown;                           // 0x3F8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableFindSessionCOOPButton : 1;                  // Mask: 0x1, PropSize: 0x10x400(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableFindSessionPVPButton : 1;                   // Mask: 0x2, PropSize: 0x10x400(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_29E6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMainMenu* GetDefaultObj();

	void OpenModMenu();
	bool IsLoggedIn();
	class FText GetVersion();
	class FText GetPublicLobbyCooldown();
	class FText GetBackEndConnectionStatus(enum class ELoginState LoginState);
	void CloseModMenu();
	bool CanPlayPublicLobby();
	bool CanFindSession(bool bCOOP);
};

// 0x68 (0xC38 - 0xBD0)
// Class ReadyOrNot.MainMenu_BaseButton
class UMainMenu_BaseButton : public UCommonButtonFMOD
{
public:
	class FText                                  ButtonText;                                        // 0xBD0(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                           NormalTextColor;                                   // 0xBE8(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                           HoveredTextColor;                                  // 0xC10(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMainMenu_BaseButton* GetDefaultObj();

};

// 0x90 (0x3B0 - 0x320)
// Class ReadyOrNot.MainMenu_V3
class UMainMenu_V3 : public UCommonActivatableWidget
{
public:
	TMap<enum class ELoginState, class FText>    BackendConnectionStatus;                           // 0x320(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                        bEnableFindSessionCOOPButton : 1;                  // Mask: 0x1, PropSize: 0x10x370(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableFindSessionPVPButton : 1;                   // Mask: 0x2, PropSize: 0x10x370(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29F0[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMainMenu_V3* GetDefaultObj();

	bool ShouldShowRestartDialog();
	bool ShouldShowModsButton();
	bool OpenModMenu(class APlayerController* PlayerController);
	void OnModMenuClosedDuringUpdate();
	void OnModMenuClosed();
	bool IsModUpdating();
	bool IsLoggedIn();
	void HideModMenu();
	class FText GetPublicLobbyCooldown();
	class FText GetBackEndConnectionStatus(enum class ELoginState LoginState);
	void EnableMainMenuInputPreprocessor();
	void DisableMainMenuInputPreprocessor();
	void CloseModMenu();
	bool CanPlayPublicLobby();
	bool CanFindSession(bool bCOOP);
};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.MainMenu_Wrapper
class UMainMenu_Wrapper : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class UMainMenu_Wrapper* GetDefaultObj();

	void OpenModMenu();
	void CloseModMenu();
};

// 0xB8 (0x378 - 0x2C0)
// Class ReadyOrNot.MainMenuGM
class AMainMenuGM : public AGameModeBase
{
public:
	class UCreateSessionCallbackProxyAdvanced*   CreateSessionCallbackProxyAdvanced;                // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFindSessionsCallbackProxyAdvanced*    FindSessionsCallbackProxyAdvanced;                 // 0x2C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDestroySessionCallbackProxyAdvanced*  DestroySessionCallbackProxyAdvanced;               // 0x2D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODEvent*                            MainMenuMusic;                                     // 0x2D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MainMenuAmbience;                                  // 0x2E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A03[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnUpdateSessionSearch;                             // 0x320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A05[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           AuthenticationMenu;                                // 0x360(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A06[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           MainMenu;                                          // 0x370(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMainMenuGM* GetDefaultObj();

	void ShowMainMenuMsg();
	void OnUpdateSessionSearch__DelegateSignature(bool bComplete, class FText OutMessage, bool bPVPSearch);
	void OnTrainingSuccess();
	void OnLobbySuccess();
	void OnLobbyFailed();
	void OnFindSessionSuccess(TArray<struct FBlueprintSessionResult>& Results);
	void OnFindSessionFailed(TArray<struct FBlueprintSessionResult>& Results);
	void OnDestroySessionBeforeStartingLobby();
	void OnBanStatusChecked(const class FString& SteamId, bool bIsBanned, const class FString& BanReason, bool bIsMySteamId);
	bool HasCompletedTraining();
	void GoToTraining();
	void GoToLobby(bool bOnlineMode, bool bFriendsOnly);
	void GoToCommanderMode(int32 ProfileSlot, bool bIronmanMode, bool bTutorialMode);
	void FindOnlineSession(bool bNewSearch, bool bPVPSession);
	void FindNextSessionList();
	void CreateRestartWidget();
	void ContinueCommanderMode();
	bool CanContinueCommanderMode();
	void CancelSessionSearch();
};

// 0xE8 (0x2E0 - 0x1F8)
// Class ReadyOrNot.MapActorComponent
class UMapActorComponent : public USceneComponent
{
public:
	uint8                                        bCondition : 1;                                    // Mask: 0x1, PropSize: 0x10x1F8(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x2, PropSize: 0x10x1F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1E1 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A0C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMapActorWidget>           MapActorWidgetClass;                               // 0x200(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  IconText;                                          // 0x208(0x18)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                          IconTextColor;                                     // 0x220(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                           IconBrush;                                         // 0x230(0x88)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                          IconColor;                                         // 0x2B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseActorRotation : 1;                             // Mask: 0x1, PropSize: 0x10x2C8(0x1)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1E2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A0E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RotationOffset;                                    // 0x2CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAddedToMap;                                       // 0x2D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A0F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMapActorIconWidget*                   MapIconWidget;                                     // 0x2D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UMapActorComponent* GetDefaultObj();

	void SetIconTextColor(struct FLinearColor& InIconTextColor);
	void SetIconText(class FText& InIconText);
	void SetIconColor(struct FLinearColor& InIconColor);
	bool IsUsingActorRotation();
	class FText GetIconText();
	void EnableMapActor();
	void DisableMapActor();
};

// 0x38 (0x2B0 - 0x278)
// Class ReadyOrNot.MapActorWidget
class UMapActorWidget : public UBaseWidget
{
public:
	class UTextBlock*                            MapActor_Text;                                     // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                ActorToTrack;                                      // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseActorRotation;                                 // 0x288(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseLocation;                                      // 0x289(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A16[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LocationToTrack;                                   // 0x28C(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RotationOffset;                                    // 0x298(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MapSize;                                           // 0x29C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MapTextureSize;                                    // 0x2A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             MapOrigin;                                         // 0x2A4(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A17[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapActorWidget* GetDefaultObj();

	void SetMapActorTextColor(const struct FLinearColor& InTextColor);
	void SetMapActorText(class FText InText);
	void InitializeWidget(class AActor* InActorToTrack, bool bInUseActorRotation, bool bInUseLocation, const struct FVector& InLocationToTrack, float InRotationOffset);
};

// 0x10 (0x2C0 - 0x2B0)
// Class ReadyOrNot.MapActorIconWidget
class UMapActorIconWidget : public UMapActorWidget
{
public:
	class UImage*                                Icon_Image;                                        // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Icon_Image_BG;                                     // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UMapActorIconWidget* GetDefaultObj();

	void SetIconColor(const struct FLinearColor& InIconColor);
	void SetIconBrushStyle(const struct FSlateBrush& InIconBrush, const struct FLinearColor& InIconColor);
};

// 0x88 (0x2A8 - 0x220)
// Class ReadyOrNot.Referendum
class AReferendum : public AActor
{
public:
	class FText                                  ReferendumName;                                    // 0x220(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  ReferendumDescription;                             // 0x238(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                        ReferendumTime;                                    // 0x250(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReferendumHoldingTime;                             // 0x254(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        YesVotes;                                          // 0x258(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NoVotes;                                           // 0x25C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReferendumTimeRemaining;                           // 0x260(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReferendumHoldingTimeRemaining;                    // 0x264(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReferendumRunning;                                // 0x268(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReferendumWaitingToTakeEffect;                    // 0x269(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A1C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotPlayerState*                ReferendumCaller;                                  // 0x270(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotPlayerController*>   YesVoters;                                         // 0x278(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotPlayerController*>   NoVoters;                                          // 0x288(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotPlayerController*>   EligibleVoters;                                    // 0x298(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AReferendum* GetDefaultObj();

	void OnReferendumPassed();
	void OnAnnounceYesVote(class AReadyOrNotPlayerState* Voter);
	void OnAnnounceVoteStarted(class AReadyOrNotPlayerState* CallingVoter);
	void OnAnnounceVotePassed();
	void OnAnnounceVoteFailed();
	void OnAnnounceNoVote(class AReadyOrNotPlayerState* Voter);
	void Multicast_AnnounceYesVote(class AReadyOrNotPlayerState* Voter);
	void Multicast_AnnounceVoteStarted(class AReadyOrNotPlayerState* CallingVoter);
	void Multicast_AnnounceVotePassed();
	void Multicast_AnnounceVoteFailed();
	void Multicast_AnnounceNoVote(class AReadyOrNotPlayerState* Voter);
	class FText GetHudDescription();
	void CastedYesVote(class AReadyOrNotPlayerController* Voter);
	void CastedNoVote(class AReadyOrNotPlayerController* Voter);
};

// 0x10 (0x2B8 - 0x2A8)
// Class ReadyOrNot.MapReferendum
class AMapReferendum : public AReferendum
{
public:
	class FString                                MapURL;                                            // 0x2A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMapReferendum* GetDefaultObj();

};

// 0x90 (0x2B0 - 0x220)
// Class ReadyOrNot.MapStatisticsSystem
class AMapStatisticsSystem : public AInfo
{
public:
	uint8                                        Pad_2A1F[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 GameId;                                            // 0x22C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2A20[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, uint8>                   ActorIdMap;                                        // 0x250(0x50)(NativeAccessSpecifierPrivate)
	TArray<struct FAnalyticsStatus>              Statuses;                                          // 0x2A0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AMapStatisticsSystem* GetDefaultObj();

	void StartRecording(const class FString& InLevelName, const class FString& InGameMode);
	bool IsRecording();
	class FString GetRecordingStatus();
	struct FGuid GetGameId();
	void EndLevel();
};

// 0x10 (0x288 - 0x278)
// Class ReadyOrNot.MatchStatusCardWidget
class UMatchStatusCardWidget : public UBaseWidget
{
public:
	class UMatchTimeRemainingWidget*             MatchTimeRemaining;                                // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurrentMatchRoundWidget*              CurrentMatchRound;                                 // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UMatchStatusCardWidget* GetDefaultObj();

};

// 0x10 (0x288 - 0x278)
// Class ReadyOrNot.MatchTimeRemainingWidget
class UMatchTimeRemainingWidget : public UBaseWidget
{
public:
	class UTextBlock*                            MatchTimeRemaining_Text;                           // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RoundTimeRemaining;                                // 0x280(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A23[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMatchTimeRemainingWidget* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.Meleeable
class IMeleeable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMeleeable* GetDefaultObj();

	bool ShouldPlayMeleeEffectsLocally();
	void OnMelee(class AReadyOrNotCharacter* Attacker, const struct FHitResult& Hit);
	class UFMODEvent* GetMeleeImpactSound();
	class UParticleSystem* GetMeleeImpactParticle();
};

// 0x20 (0x1020 - 0x1000)
// Class ReadyOrNot.MeleeWeapon
class AMeleeWeapon : public ABaseWeapon
{
public:
	class FString                                MeleeMontage;                                      // 0x1000(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bApplyBleed;                                       // 0x1010(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A24[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MeleeDamage;                                       // 0x1014(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A25[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMeleeWeapon* GetDefaultObj();

};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.MemorialViewer
class AMemorialViewer : public AActor
{
public:
	uint8                                        Pad_2A26[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       RootSceneComponent;                                // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                           Widget;                                            // 0x238(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AMemorialViewer* GetDefaultObj();

};

// 0x10 (0x330 - 0x320)
// Class ReadyOrNot.MemorialWidget
class UMemorialWidget : public UCommonActivatableWidget
{
public:
	TArray<class URosterCharacter*>              MemorialCharacters;                                // 0x320(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMemorialWidget* GetDefaultObj();

	TArray<class URosterCharacter*> GetMemorialCharacters();
	void CloseMemorialWidget();
};

// 0x28 (0x288 - 0x260)
// Class ReadyOrNot.MessageDisplayBox
class UMessageDisplayBox : public UUserWidget
{
public:
	class FString                                MessageTxt;                                        // 0x260(0x10)(BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ButtonTxt;                                         // 0x270(0x10)(BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldQuitOnButtonPress;                          // 0x280(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A29[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMessageDisplayBox* GetDefaultObj();

};

// 0x50 (0x270 - 0x220)
// Class ReadyOrNot.MessagePromptActor
class AMessagePromptActor : public AActor
{
public:
	class FString                                MessageMapID;                                      // 0x220(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBigPopUp;                                       // 0x230(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasDisplayedMessage;                              // 0x231(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A2C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  MessageTitle;                                      // 0x238(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                          MessageContent;                                    // 0x250(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMessagePromptContent>         MessageActions;                                    // 0x260(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMessagePromptActor* GetDefaultObj();

	void ShowMessageThroughPopUp();
	void HideMessagePopUp();
	void GenerateMessageContent();
};

// 0xF8 (0x368 - 0x270)
// Class ReadyOrNot.MetaGameProfile
class UMetaGameProfile : public UBaseProfile
{
public:
	int32                                        MetaGameVersion;                                   // 0x270(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2A2D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LastCampaignSave;                                  // 0x278(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalLobbyLogins;                                  // 0x288(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasCompletedTutorial;                             // 0x28C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A2E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        CompletedLevels;                                   // 0x290(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                        CompletedMultiplayerLevels;                        // 0x2A0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<class FName>                            ProgressionTags;                                   // 0x2B0(0x50)(NativeAccessSpecifierPrivate)
	struct FMetaGameProfileTemporaryData         TemporaryData;                                     // 0x300(0x68)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMetaGameProfile* GetDefaultObj();

};

// 0x40 (0x260 - 0x220)
// Class ReadyOrNot.Mirror
class AMirror : public AActor
{
public:
	struct FTransform                            VisibilityBoundsTransform;                         // 0x220(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                               VisibilityBoundsExtent;                            // 0x250(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDynamicShadowsDisabled : 1;                       // Mask: 0x1, PropSize: 0x10x25C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A2F[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMirror* GetDefaultObj();

};

// 0x8 (0x470 - 0x468)
// Class ReadyOrNot.MirrorPortalComponent
class UMirrorPortalComponent : public UArrowComponent
{
public:
	uint8                                        Pad_2A30[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMirrorPortalComponent* GetDefaultObj();

};

// 0x28 (0x210 - 0x1E8)
// Class ReadyOrNot.MirrorUnderDoorActivity
class UMirrorUnderDoorActivity : public UDoorInteractionActivity
{
public:
	enum class EMirrorContactType                MirrorContactType;                                 // 0x1E8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A31[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ACyberneticCharacter*>          SpottedCharacters;                                 // 0x1F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A32[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMirrorUnderDoorActivity* GetDefaultObj();

	void MirrorForCustom();
};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.MissionEnd
class UMissionEnd : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class UMissionEnd* GetDefaultObj();

};

// 0x290 (0x4B0 - 0x220)
// Class ReadyOrNot.MissionPlanManager
class AMissionPlanManager : public AInfo
{
public:
	struct FPlanningMarkerArray                  MarkerArray;                                       // 0x220(0x148)(Net, NativeAccessSpecifierPublic)
	struct FPlanningLineArray                    LineArray;                                         // 0x368(0x148)(Net, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMissionPlanManager* GetDefaultObj();

	void OnMissionChanged();
	class AReadyOrNotPlayerState* GetPlayerStateFromPlanningNumber(class UObject* WorldContextObject, int32 Number);
};

// 0x30 (0x138 - 0x108)
// Class ReadyOrNot.MissionPlanLinesWidget
class UMissionPlanLinesWidget : public UWidget
{
public:
	float                                        LineWidth;                                         // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FirstNodeRadius;                                   // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NodeRadius;                                        // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A36[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    LineMaterial;                                      // 0x118(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnlyDrawPreviewLine;                              // 0x120(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A37[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionPlanLinesWidget* GetDefaultObj();

	void SetPreviewLine(struct FPlanningLine& Line);
	void SetCurrentFloor(int32 Floor);
};

// 0xD0 (0x330 - 0x260)
// Class ReadyOrNot.MissionPlanWidget
class UMissionPlanWidget : public UUserWidget
{
public:
	uint8                                        Pad_2A3C[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionPlanManager*                   MissionPlanManager;                                // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODAudioComponent*                   DrawingAudioComponent;                             // 0x2A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LineThickness;                                     // 0x2B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeTime;                                          // 0x2B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LineColor;                                         // 0x2B8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ActiveLineColor;                                   // 0x2C8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlanLineWidth;                                     // 0x2D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FirstNodeRadius;                                   // 0x2DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NodeRadius;                                        // 0x2E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A3D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    PlanLineMaterial;                                  // 0x2E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DrawingSoundEvent;                                 // 0x2F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DrawingFloor;                                      // 0x2F8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A3E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidget*                               DrawingTargetWidget;                               // 0x300(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlanningLine                         PreviewLine;                                       // 0x308(0x28)(BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMissionPlanWidget* GetDefaultObj();

	void SetEntryPoint(class FName EntryPoint);
	void RemoveMarker(int32 ID);
	void RemoveLine(int32 ID);
	void OnMissionChanged(const class FString& URL, struct FLevelDataLookupTable& LevelData);
	void OnMarkerRemoved(int32 ID);
	void OnMarkerAdded(int32 ID, struct FPlanningMarker& Marker);
	void OnLineRemoved(int32 ID);
	void OnLineAdded(int32 ID, struct FPlanningLine& Line);
	void OnEntryPointChanged(const struct FEntryPoint& NewEntryPoint);
	void AddMarker(struct FPlanningMarker& Marker);
	void AddLine(struct FPlanningLine& Line);
};

// 0x120 (0x370 - 0x250)
// Class ReadyOrNot.MissionPortal
class AMissionPortal : public AReadyOrNotTriggerVolume
{
public:
	uint8                                        Pad_2A54[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x258(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class AReadyOrNotGameMode>> SelectableGameModes;                               // 0x260(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class AMissionSelect*                        MissionSelect;                                     // 0x270(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UReadyOrNotProfile*                    Profile;                                           // 0x278(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommanderProfile*                     CommanderProfile;                                  // 0x280(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMetaGameProfile*                      MetaGameProfile;                                   // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextRenderComponent*                  WhiteboardText;                                    // 0x290(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2A57[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMissionSelected_Delegate;                        // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                MissionURL;                                        // 0x2B0(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ModeURL;                                           // 0x2C0(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SelectedEntryPoint;                                // 0x2D0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>          CompsToOutline;                                    // 0x2D8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class ULightComponent*>               LightsToEnable;                                    // 0x2E8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>          CompsToOutlineMissionSelected;                     // 0x2F8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class ULightComponent*>               LightsToEnableMissionSelected;                     // 0x308(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A58[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCountdownStarted;                                // 0x330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCountdownCancelled;                              // 0x340(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        NumReadyPlayers;                                   // 0x350(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A59[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotPlayerController*>   ReadiedPlayers;                                    // 0x358(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A5A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMissionPortal* GetDefaultObj();

	void SetSelectedMode(class FName InMode);
	void SetSelectedMission(const class FString& InMissionURL);
	void SetSelectedEntryPoint(class FName EntryPoint);
	void OnRep_ReadiedPlayersChange();
	void OnRep_MissionURL();
	void OnPlayerReadyChange(class AReadyOrNotPlayerController* ReadyOrNotPlayerController, bool bReady);
	void OnPlayerJoinedLobby(class AReadyOrNotPlayerController* PlayerController);
	void OnMissionSelected__DelegateSignature();
	void OnMissionSelected();
	void OnCountdownStarted__DelegateSignature(float Countdown);
	void OnCountdownCancelled__DelegateSignature();
	void Multicast_SetTimer(bool bEnabled, float SetTime);
	bool IsMissionStarting(bool* bStarting, float* Countdown);
	bool IsLevelUnlocked(const class FString& InUrl, bool* OutIsUnlocked, float* OutScoreRequired, class FString* OutLockedUrl);
	bool IsGameModeSelectable(enum class ECOOPMode InMode);
	bool GetSelectedModeName(class FString* OutName);
	bool GetSelectedMode(class FString* OutMode);
	void GetSelectedMission(class FString* OutMissionURL);
	bool GetPlayersReady(int32* Ready, int32* Total);
	bool DoesLevelExistInBuild(const class FString& InUrl);
};

// 0x110 (0x330 - 0x220)
// Class ReadyOrNot.MissionSelect
class AMissionSelect : public AActor
{
public:
	TSoftObjectPtr<class UWorld>                 LosSuenosLevel;                                    // 0x220(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PersistentLightingLevelName;                       // 0x248(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LevelOffset;                                       // 0x250(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  CameraTag;                                         // 0x25C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  EffectsTag;                                        // 0x264(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PreloadTag;                                        // 0x26C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraInterpSpeed;                                 // 0x274(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeOutTime;                                       // 0x278(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInTime;                                        // 0x27C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeHoldTime;                                      // 0x280(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          FadeColor;                                         // 0x284(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseBlockingLoad;                                  // 0x294(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A5E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ADirectionalLight*>             HiddenDirectionalLights;                           // 0x298(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class ASkyLight*>                     HiddenSkyLights;                                   // 0x2A8(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class APostProcessVolume*>            HiddenPostProcessVolumes;                          // 0x2B8(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class AExponentialHeightFog*>         HiddenExponentialHeightFogs;                       // 0x2C8(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	class AActor*                                ViewTargetActor;                                   // 0x2D8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               OriginalCameraPosition;                            // 0x2E0(0xC)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A5F[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevelStreamingDynamic*                CurrentLevel;                                      // 0x308(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelStreamingDynamic*                InFlightLevel;                                     // 0x310(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelStreaming*                       PersistentLightingLevel;                           // 0x318(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AReadyOrNotPlayerController*           PlayerController;                                  // 0x320(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerCameraManager*                  PlayerCameraManager;                               // 0x328(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class AMissionSelect* GetDefaultObj();

	void SelectMission(class ULevelData* LevelData);
	void PreviewMission(class ULevelData* LevelData);
	void OpenMissionSelect();
	void OnLevelShown();
	void OnLevelLoaded();
	void LoadLevel(TSoftObjectPtr<class UWorld> Level);
	bool IsOpen();
	void CloseMissionSelect();
};

// 0xF0 (0x118 - 0x28)
// Class ReadyOrNot.LevelData
class ULevelData : public UObject
{
public:
	TSoftObjectPtr<class UWorld>                 LevelPreview;                                      // 0x28(0x28)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLocked;                                         // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A61[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBasicLevelStats                      LevelStats;                                        // 0x54(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  LevelName;                                         // 0x60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  LevelFriendlyName;                                 // 0x68(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  LevelNickname;                                     // 0x80(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             LevelImage;                                        // 0x98(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  LevelDescription;                                  // 0xC0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  LevelLocation;                                     // 0xD8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  LevelTimeOfDay;                                    // 0xF0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FEntryPoint>                   EntryPoints;                                       // 0x108(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ULevelData* GetDefaultObj();

};

// 0x20 (0x340 - 0x320)
// Class ReadyOrNot.MissionSelectWidget
class UMissionSelectWidget : public UCommonActivatableWidget
{
public:
	TArray<class FName>                          DefaultMaps;                                       // 0x320(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ULevelData*>                    CachedLevelDatas;                                  // 0x330(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UMissionSelectWidget* GetDefaultObj();

	void SelectMission(class ULevelData* LevelData);
	void PreviewMission(class ULevelData* LevelData);
	TArray<class ULevelData*> GetLevelDataList();
	void CloseMissionSelect();
};

// 0x210 (0x238 - 0x28)
// Class ReadyOrNot.ModioManager
class UModioManager : public UObject
{
public:
	uint8                                        Pad_2A67[0x210];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UModioManager* GetDefaultObj();

	bool IsRestartRequired();
	bool IsModUpdating();
	bool IsModIoEnabled();
	class UModioManager* GetInstance();
	void ClearUserData();
};

// 0xB0 (0x1B8 - 0x108)
// Class ReadyOrNot.MoraleComponent
class UMoraleComponent : public UResourceComponent
{
public:
	class ACyberneticCharacter*                  OwnerCharacter;                                    // 0x108(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartingMorale;                                    // 0x110(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A71[0xA4];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMoraleComponent* GetDefaultObj();

	void ResetMoraleOnCharacter(class ACyberneticCharacter* Character);
	void LowerMoraleOnCharacter(class ACyberneticCharacter* Character, float MoraleValue, class FName Reason);
	void IncreaseMoraleOnCharacter(class ACyberneticCharacter* Character, float MoraleValue, class FName Reason);
	TMap<class FName, struct FMoraleChangeInfo> GetMoraleGainHistory();
	TMap<class FName, struct FMoraleChangeInfo> GetMoraleDamageHistory();
	float GetMorale();
	void ApplyRadialMoraleDamageWithFalloff(class UObject* WorldContextObject, const struct FVector& Location, float Damage, float InnerRadius, float OuterRadius, const struct FMoraleDamageTraceParameters& LOSParameters, const TArray<enum class ETeamType>& Teams, enum class EEasingFunc FalloffCurve, class FName Reason);
	void ApplyRadialMoraleDamage(class UObject* WorldContextObject, const struct FVector& Location, float Damage, float Radius, const struct FMoraleDamageTraceParameters& LOSParameters, const TArray<enum class ETeamType>& Teams, class FName Reason);
};

// 0x10 (0x1B8 - 0x1A8)
// Class ReadyOrNot.MoveActivity
class UMoveActivity : public UTeamBaseActivity
{
public:
	uint8                                        Pad_2A73[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMoveActivity* GetDefaultObj();

};

// 0x8 (0x1A0 - 0x198)
// Class ReadyOrNot.MoveIntoLOSActivity
class UMoveIntoLOSActivity : public UBaseActivity
{
public:
	class AActor*                                LOSActor;                                          // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMoveIntoLOSActivity* GetDefaultObj();

};

// 0x0 (0x198 - 0x198)
// Class ReadyOrNot.MoveToActivity
class UMoveToActivity : public UBaseActivity
{
public:

	static class UClass* StaticClass();
	static class UMoveToActivity* GetDefaultObj();

};

// 0x0 (0x198 - 0x198)
// Class ReadyOrNot.MoveToExitActivity
class UMoveToExitActivity : public UBaseActivity
{
public:

	static class UClass* StaticClass();
	static class UMoveToExitActivity* GetDefaultObj();

};

// 0x8 (0x1D0 - 0x1C8)
// Class ReadyOrNot.MoveToPlayerSpawn
class UMoveToPlayerSpawn : public UBaseCombatMoveActivity
{
public:
	bool                                         bBeArrestedOnceReachedLocation;                    // 0x1C8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A74[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMoveToPlayerSpawn* GetDefaultObj();

};

// 0x88 (0xA70 - 0x9E8)
// Class ReadyOrNot.Multitool
class AMultitool : public ATool
{
public:
	TMap<enum class EMultitoolFunctions, class UReadyOrNotWeaponAnimData*> MultitoolAnimData;                                 // 0x9E8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UInteractionsData*                     PvPFreeInteraction;                                // 0xA38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMultitoolFunctions               CurrentToolKit;                                    // 0xA40(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAudioBasedProgress : 1;                           // Mask: 0x1, PropSize: 0x10xA41(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1E7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A7B[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FMODLockpickingSound;                              // 0xA48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODKnifeSound;                                    // 0xA50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODWirecutterSound;                               // 0xA58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODFreeingSound;                                  // 0xA60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      PendingFreeCharacter;                              // 0xA68(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMultitool* GetDefaultObj();

	float GetMultitoolOperatingTimeFromToolkit(enum class EMultitoolFunctions MultitoolFunction);
	float GetMultitoolOperatingTimeFromAudioLength(class UFMODEvent* Event);
	float GetMultitoolOperatingTimeFromActiveToolkit();
	void Client_StopMultitoolAudio();
	void Client_PlayMultitoolAudio();
	void Client_ChangeToolkit(enum class EMultitoolFunctions MultitoolFunction, bool bPlayAnimation);
	void ChangeToolkit(enum class EMultitoolFunctions MultitoolFunction, bool bPlayAnimation);
};

// 0x78 (0x300 - 0x288)
// Class ReadyOrNot.MunitionsSlot
class UMunitionsSlot : public UCommonUserWidget
{
public:
	int32                                        SlotCount;                                         // 0x288(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A84[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UHorizontalBox*                        ElementContainer;                                  // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotGameState*                  Gs;                                                // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasElementsPrevious;                              // 0x2A0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasElementsNext;                                  // 0x2A1(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A85[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotLoadoutManager*             LoadoutFunctionLibrary;                            // 0x2A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PrimaryAmmoIcon;                                   // 0x2B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            SecondaryAmmoIcon;                                 // 0x2B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            GrenadeIcon;                                       // 0x2C0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            C2ChargeIcon;                                      // 0x2C8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            WedgeIcon;                                         // 0x2D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            PepperSprayIcon;                                   // 0x2D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            LockpickGunIcon;                                   // 0x2E0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            TaserIcon;                                         // 0x2E8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABaseItem>>         SlotItems;                                         // 0x2F0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMunitionsSlot* GetDefaultObj();

	void UpdateSlotText(int32 CurrentSlots, int32 MaxSlots);
	void UpdateSlotCount();
	void UpdateElementContainer();
	void SetTacticalSlot();
	void SetSecondaryAmmoSlot();
	void SetPrimaryAmmoSlot();
	void SetGrenadeSlot();
	void CreateSeparator(bool bShouldCreateSeparator);
	void CreateElement(class UTexture2D* Icon, int32 Amount, bool bIsAmmoElement, class FText& AmmoType);
};

// 0x10 (0x270 - 0x260)
// Class ReadyOrNot.MunitionsSlotElement
class UMunitionsSlotElement : public UUserWidget
{
public:
	class UImage*                                ElementImage;                                      // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                            ElementText;                                       // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMunitionsSlotElement* GetDefaultObj();

};

// 0x88 (0xB8 - 0x30)
// Class ReadyOrNot.MusicData
class UMusicData : public UDataAsset
{
public:
	struct FMusicTrack                           PreplanningTrack;                                  // 0x30(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMusicTrack                           AmbientTrack;                                      // 0x58(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMusicTrack                           ActionTrack;                                       // 0x80(0x28)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMusicTrackFMOD                       FMODTracks;                                        // 0xA8(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UMusicData* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class ReadyOrNot.MusicManager
class UMusicManager : public UWorldSubsystem
{
public:
	class UFMODEvent*                            MusicEvent;                                        // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFMODEventInstance                    MusicEventInst;                                    // 0x38(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                          TH_UpdateMusicParameters;                          // 0x40(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UMusicManager* GetDefaultObj();

	void UpdateMusicParameters();
	void StopTheMusic(bool bGoHome);
	void StopMusicParametersUpdate();
	void StartMusicParametersUpdate();
	void SetMusicParameterValue(const class FString& ParamName, float ParamValue);
	void ResumeMusicParametersUpdate();
	void PauseMusicParametersUpdate();
	TArray<class FString> GetMusicParameters();
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.MusicSequencerBase
class AMusicSequencerBase : public AActor
{
public:
	class USceneComponent*                       Scene;                                             // 0x220(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AMusicSequencerBase* GetDefaultObj();

	void OnStoppedAudio();
	void OnStartedTransitioningToState(enum class EMusicState NewState);
	void OnAudioReset();
	void Multicast_StopAudio();
	void Multicast_StartTransitioningToState(enum class EMusicState NewState);
	void Multicast_ResetAudio();
};

// 0x30 (0x258 - 0x228)
// Class ReadyOrNot.MusicSequencerUnreal
class AMusicSequencerUnreal : public AMusicSequencerBase
{
public:
	uint8                                        Pad_2A94[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioComponent*                       AudioPlayer;                                       // 0x248(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMusicState                       CurrentState;                                      // 0x250(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMusicState                       NextState;                                         // 0x251(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMusicState                       NextScriptedState;                                 // 0x252(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A95[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMusicSequencerUnreal* GetDefaultObj();

	void PlayScriptedMusic(class USoundCue* Music, enum class EMusicState NewScriptedState, bool bImmediately);
	void OnAudioPlaybackPercent(class USoundWave* PlayingSoundWave, float PlaybackPercent);
	void OnAudioFinished();
};

// 0x80 (0x2A0 - 0x220)
// Class ReadyOrNot.NavigationSplinePathPreview
class ANavigationSplinePathPreview : public AActor
{
public:
	float                                        PathPointDistanceThreshold;                        // 0x220(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PathPointSubStep;                                  // 0x224(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawRawPath : 1;                                  // Mask: 0x1, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawRawPathPoints : 1;                            // Mask: 0x2, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawSmoothedPath : 1;                             // Mask: 0x4, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawSmoothedPathPoints : 1;                       // Mask: 0x8, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawSmoothedPathPointsDetail : 1;                 // Mask: 0x10, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1E9 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A96[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PathLineThickness;                                 // 0x22C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A97[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANavigationSplinePathPreview* GetDefaultObj();

};

// 0xB0 (0x500 - 0x450)
// Class ReadyOrNot.NavSplinePathRenderingComponent
class UNavSplinePathRenderingComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_2A99[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNavSplinePathRenderingComponent* GetDefaultObj();

};

// 0x18 (0x2C0 - 0x2A8)
// Class ReadyOrNot.NeutralizeSuspectByTag
class ANeutralizeSuspectByTag : public AObjective
{
public:
	class ACyberneticCharacter*                  Suspect;                                           // 0x2A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  SuspectTag;                                        // 0x2B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequireArrest;                                    // 0x2B8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowIncapacitation;                              // 0x2B9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A9B[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANeutralizeSuspectByTag* GetDefaultObj();

	void OnSuspectKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnAISpawned();
};

// 0x5B8 (0x1B20 - 0x1568)
// Class ReadyOrNot.NightvisionGoggles
class ANightvisionGoggles : public AHeadwear
{
public:
	class UUserWidget*                           SpawnedWidget;                                     // 0x1568(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            Green_LUT;                                         // 0x1570(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            White_LUT;                                         // 0x1578(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*          GlobalMaterialParameters;                          // 0x1580(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  NVGGlobalParameterName;                            // 0x1588(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               NightVisionFirstPersonWidget;                      // 0x1590(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A9C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  NightVisionPostProcess;                            // 0x15A0(0x560)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                         bNVGOn;                                            // 0x1B00(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTogglingNVG;                                      // 0x1B01(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A9D[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UDamageType>>       BlockDamageTypesWhileActive;                       // 0x1B08(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A9E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANightvisionGoggles* GetDefaultObj();

	void SpawnNightvisionWidget();
	void Server_SetTogglingNVG(bool bNewTogglingNVG);
	void OnNightvisionDeactivated();
	void OnNightvisionActivated();
	void DestroyNightvisionWidget();
};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.NinebangDamageType
class UNinebangDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UNinebangDamageType* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class ReadyOrNot.ObituaryData
class UObituaryData : public UDataAsset
{
public:
	TMap<class FName, struct FObituaryForBone>   PointDeathMessages;                                // 0x30(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                          DefaultBulletDeathText;                            // 0x80(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UObituaryData* GetDefaultObj();

};

// 0x120 (0x6C0 - 0x5A0)
// Class ReadyOrNot.ObjectiveMarkerComponent
class UObjectiveMarkerComponent : public UWidgetComponent
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartHidden : 1;                                  // Mask: 0x2, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1F2 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCustomLocation : 1;                               // Mask: 0x8, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFadeOffscreen : 1;                                // Mask: 0x10, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDistanceScaleIcon : 1;                            // Mask: 0x20, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideIconOffscreen : 1;                            // Mask: 0x40, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompletelyFadeWhenOverlappingOtherWidgets : 1;    // Mask: 0x80, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompletelyFadeWhenClose : 1;                      // Mask: 0x1, PropSize: 0x10x5A1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1F5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2AAF[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FadeAtDistance_Close;                              // 0x5A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompletelyFadeWhenFar : 1;                        // Mask: 0x1, PropSize: 0x10x5A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1F6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2AB1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FadeAtDistance_Far;                                // 0x5AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideDistanceInfo : 1;                             // Mask: 0x1, PropSize: 0x10x5B0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1F7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2AB2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HideDistanceInfoAtDistance;                        // 0x5B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideDirectionalArrow : 1;                         // Mask: 0x1, PropSize: 0x10x5B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisplayMarkerText : 1;                            // Mask: 0x2, PropSize: 0x10x5B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1F8 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2AB3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  MarkerText;                                        // 0x5C0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UObjectiveMarkerWidget>    MarkerWidgetClass;                                 // 0x5D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                           IconBrush;                                         // 0x5E0(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                          IconColorAndOpacity;                               // 0x668(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             IconSize;                                          // 0x678(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x680(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1FA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2AB6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UObjectiveMarkerWidget*                ObjectiveMarkerWidget_Offscreen;                   // 0x688(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectiveMarkerWidget*                ObjectiveMarkerWidget_Onscreen;                    // 0x690(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsOffscreen;                                      // 0x698(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bRequestingFadeOut;                                // 0x699(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2AB9[0x26];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectiveMarkerComponent* GetDefaultObj();

	void ToggleObjectiveMarkerVisibility();
	void ShowObjectiveMarker();
	void ShowMarkerText();
	void ShowIcon();
	void SetNewFadeDistance(float NewDistance);
	void SetMarkerTextFontSize(int32 NewFontSize);
	void SetMarkerTextColor(const struct FLinearColor& InIconColorAndOpacity);
	void SetMarkerText(class FText NewMarkerText);
	void SetIconSize(const struct FVector2D& NewIconSize);
	void SetIconColor(const struct FLinearColor& InIconColorAndOpacity);
	void SetIconBrush(const struct FSlateBrush& NewIconBrush);
	bool IsObjectiveMarkerOffscreen();
	void HideObjectiveMarker(bool bFadeOut);
	void HideMarkerText();
	void HideIcon();
	void EnableObjectiveMarker();
	void DisableObjectiveMarker();
	bool CanShowObjectiveMarker();
};

// 0x50 (0x2C8 - 0x278)
// Class ReadyOrNot.ObjectiveMarkerWidget
class UObjectiveMarkerWidget : public UBaseWidget
{
public:
	class UObjectiveMarkerComponent*             ParentComponent;                                   // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                          RootCanvasPanel;                                   // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              Icon_SizeBox;                                      // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Icon_Image;                                        // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                DirectionalArrow_Image;                            // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            DistanceInMeters_Text;                             // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            MarkerName_Text;                                   // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               Location;                                          // 0x2B0(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DistanceToLocalPlayer;                             // 0x2BC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DirectionAngle;                                    // 0x2C0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHideDistance : 1;                                 // Mask: 0x1, PropSize: 0x10x2C4(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2ACC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectiveMarkerWidget* GetDefaultObj();

	void ShowMarkerText();
	void ShowIcon();
	void ShowAll();
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetMarkerNameTextFontSize(int32 NewFontSize);
	void SetMarkerNameTextColorAndOpacity(struct FLinearColor& InColor);
	void SetMarkerNameText(class FText NewMarkerNameText);
	void SetIconSize(const struct FVector2D& NewIconSize);
	void SetIconImage(struct FSlateBrush& InBrush);
	void SetIconColorAndOpacity(struct FLinearColor& InColor);
	void SetDirectionAngle(float Angle);
	void OnMarkerVisibilityEnabled();
	void OnMarkerVisibilityDisabled();
	void HideMarkerText();
	void HideIcon();
	void HideAll();
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.ObjectivePoint
class AObjectivePoint : public AActor
{
public:
	class AActor*                                TiedToActor;                                       // 0x220(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMapActorComponent*                    MapActorComponent;                                 // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AObjectivePoint* GetDefaultObj();

	void ToggleObjectiveMarkerVisibility();
	void ShowObjectiveMarker();
	void InitSettings(const struct FSlateBrush& Icon, class FText Text, float ShowMarkerAtDistance);
	void HideObjectiveMarker();
};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.OcclusionTestActor
class AOcclusionTestActor : public AActor
{
public:
	float                                        OcclusionMultiplier;                               // 0x220(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FullOcclusionDepth;                                // 0x224(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TickInterval;                                      // 0x228(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         GunshotOrFootstep;                                 // 0x22C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AD3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            GunshotSound;                                      // 0x230(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsOutside;                                        // 0x238(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AD4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FootstepSound;                                     // 0x240(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FoleySound;                                        // 0x248(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHeavyArmor;                                       // 0x250(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCrouching;                                      // 0x251(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AD5[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODAudioPropagationComponent*        FMODAudioPropagationComp;                          // 0x258(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   AudioComponent;                                    // 0x260(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AOcclusionTestActor* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class ReadyOrNot.OnlineActivityManager
class UOnlineActivityManager : public UObject
{
public:
	uint8                                        Pad_2AD6[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UOnlineActivityManager* GetDefaultObj();

};

// 0xF0 (0xAC0 - 0x9D0)
// Class ReadyOrNot.Optiwand
class AOptiwand : public ABaseItem
{
public:
	class UAnimMontage*                          Montage_StartOptiwandADS;                          // 0x9D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Montage_EndOptiwandADS;                            // 0x9D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CollisionTraceDistance;                            // 0x9E0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AD7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FMODOptiwandMove;                                  // 0x9E8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODOptiwandEnterView;                             // 0x9F0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODOptiwandExitView;                              // 0x9F8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                     MI_AIOutline;                                      // 0xA00(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2ADA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneCaptureComponent2D*              SceneCapture2D;                                    // 0xA10(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                CameraRenderTarget;                                // 0xA18(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACameraActor*                          CameraActor;                                       // 0xA20(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LookAtPosition;                                    // 0xA28(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              LookAtRotation;                                    // 0xA34(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                              OptiwandCaptureRotation;                           // 0xA40(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bMirorring : 1;                                    // Mask: 0x1, PropSize: 0x10xA4C(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_204 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bRepMirroring;                                     // 0xA4D(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInUse : 1;                                        // Mask: 0x1, PropSize: 0x10xA4E(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_205 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2ADC[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 LastUsedDoor;                                      // 0xA50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODAudioComponent*                   FMODOptiwandMoveAudioComp;                         // 0xA58(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODAudioComponent*                   FMODOptiwandEnterViewComp;                         // 0xA60(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFMODAudioComponent*                   FMODOptiwandExitViewComp;                          // 0xA68(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2ADD[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AOptiwand* GetDefaultObj();

	void Server_NotifyMirroring(bool bIsMirroring);
	bool IsCameraBlocked();
	enum class EOptiwandViewMode GetViewMode();
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.OutOfBoundsVolume
class AOutOfBoundsVolume : public AActor
{
public:
	class UBoxComponent*                         Bounds;                                            // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AOutOfBoundsVolume* GetDefaultObj();

};

// 0x18 (0x338 - 0x320)
// Class ReadyOrNot.Overview_V2
class UOverview_V2 : public UCommonActivatableWidget
{
public:
	class FString                                ActiveLoadoutName;                                 // 0x320(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                      SwitchCharacter;                                   // 0x330(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UOverview_V2* GetDefaultObj();

	void SavePresets(const struct FSavedLoadout& Loadout, bool IsNPC);
};

// 0x0 (0x320 - 0x320)
// Class ReadyOrNot.PageWidget
class UPageWidget : public UCommonActivatableWidget
{
public:

	static class UClass* StaticClass();
	static class UPageWidget* GetDefaultObj();

};

// 0x50 (0x370 - 0x320)
// Class ReadyOrNot.PageFooter
class UPageFooter : public UPageWidget
{
public:
	TMap<class FString, struct FScreenFooterEntry> FooterEntries;                                     // 0x320(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPageFooter* GetDefaultObj();

	void GetInputActionData(const struct FDataTableRowHandle& InputActionRow, class FText* ActionName, struct FKey* ActionKey);
};

// 0x100 (0x320 - 0x220)
// Class ReadyOrNot.PairedInteractionDriver
class APairedInteractionDriver : public AInfo
{
public:
	class UInteractionsData*                     InteractionData;                                   // 0x220(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                Driver;                                            // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                Slave;                                             // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ABaseItem*                             OptionalItem;                                      // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2AEA[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            Event_OnPairedInteractionStarted;                  // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Event_OnDriverInteractionFinished;                 // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Event_OnSlaveInteractionFinished;                  // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Event_OnPairedInteractionFinished;                 // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AED[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APairedInteractionDriver* GetDefaultObj();

	void OnSlaveInteractionFinished();
	void OnPairedInteractionStarted__DelegateSignature();
	void OnPairedInteractionFinished__DelegateSignature(class AActor* InDriver, class AActor* InSlave);
	void OnInteractionFinished();
	void OnEquippedItemHolstered(class ABaseItem* Item);
	void OnDriverInteractionFinished();
	void OnActorInteractionFinished__DelegateSignature(class AActor* InActor);
};

// 0x20 (0x2A8 - 0x288)
// Class ReadyOrNot.PauseMenu_Wrapper
class UPauseMenu_Wrapper : public UCommonUserWidget
{
public:
	class UCommonActivatableWidgetStack*         WidgetStack;                                       // 0x288(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*              PauseMenu;                                         // 0x290(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPauseMenuClosed;                                 // 0x298(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPauseMenu_Wrapper* GetDefaultObj();

	void OpenPauseMenu();
	void ClosePauseMenu();
};

// 0x4C8 (0x4F8 - 0x30)
// Class ReadyOrNot.PenetrationData
class UPenetrationData : public UDataAsset
{
public:
	struct FMaterialPenetration                  DefaultPenetrationData;                            // 0x30(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Aluminium;                                     // 0x48(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Asphalt;                                       // 0x60(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Brick;                                         // 0x78(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_CarbonFibre;                                   // 0x90(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Cardboard;                                     // 0xA8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Ceramic;                                       // 0xC0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_ConcreteSoft;                                  // 0xD8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_ConcreteStrong;                                // 0xF0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Dirt;                                          // 0x108(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Drywall;                                       // 0x120(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Electrical;                                    // 0x138(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_EnergyShield;                                  // 0x150(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Fabric_Carpet;                                 // 0x168(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Fabric_Stuffing;                               // 0x180(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Fabric_Thin;                                   // 0x198(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Flesh;                                         // 0x1B0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Galvanized;                                    // 0x1C8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Glass_Plate;                                   // 0x1E0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Glass_Windshield;                              // 0x1F8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Grass;                                         // 0x210(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Gravel;                                        // 0x228(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Ice;                                           // 0x240(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Lava;                                          // 0x258(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Lead;                                          // 0x270(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Leaves;                                        // 0x288(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Limestone;                                     // 0x2A0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Mahogany;                                      // 0x2B8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Marble_Coated;                                 // 0x2D0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Marble_Thick;                                  // 0x2E8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Mud;                                           // 0x300(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Oil;                                           // 0x318(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Paper;                                         // 0x330(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Pine;                                          // 0x348(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Plaster;                                       // 0x360(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Plastic;                                       // 0x378(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Plywood;                                       // 0x390(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Polystyrene;                                   // 0x3A8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Powder;                                        // 0x3C0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Rock;                                          // 0x3D8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Rubber;                                        // 0x3F0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Sand;                                          // 0x408(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Snow;                                          // 0x420(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Soil;                                          // 0x438(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Steel;                                         // 0x450(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Tin;                                           // 0x468(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Treewood;                                      // 0x480(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Wallpaper;                                     // 0x498(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Water;                                         // 0x4B0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Vehicle;                                       // 0x4C8(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMaterialPenetration                  RON_Bulletproof_Glass;                             // 0x4E0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPenetrationData* GetDefaultObj();

	struct FMaterialPenetration GetPenetrationData(enum class EPhysicalSurface Surface);
};

// 0x10 (0x630 - 0x620)
// Class ReadyOrNot.PepperballDamageType
class UPepperballDamageType : public UStunDamage
{
public:
	float                                        StunDurationHeadshot;                              // 0x620(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StunDurationLeg;                                   // 0x624(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AF5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPepperballDamageType* GetDefaultObj();

};

// 0x30 (0x1460 - 0x1430)
// Class ReadyOrNot.PepperballGun
class APepperballGun : public ABaseMagazineWeapon
{
public:
	class UParticleSystemComponent*              ShootTrailComponent;                               // 0x1430(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       ParticleShootTrail;                                // 0x1438(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HeadshotsUntilAbuse;                               // 0x1440(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentHeadshotCounter;                            // 0x1444(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StunShotsUntilAbuse;                               // 0x1448(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentStunShotCounter;                            // 0x144C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxBallsInHopper;                                  // 0x1450(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BallsInHopper;                                     // 0x1454(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AF9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APepperballGun* GetDefaultObj();

	void IncrementStunShotCounter(class ACyberneticCharacter* StunnedPerson);
	void IncrementHeadshotCounter(class ACyberneticCharacter* HeadshottedPerson);
};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.PepperGasCloud
class APepperGasCloud : public AActor
{
public:
	uint8                                        Pad_2AFA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              GasParticleSystem;                                 // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GasRadius;                                         // 0x230(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LifeTime;                                          // 0x234(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxGasPoints;                                      // 0x238(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AFB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APepperGasCloud* GetDefaultObj();

};

// 0x8 (0x370 - 0x368)
// Class ReadyOrNot.PepperProjectile
class APepperProjectile : public ABulletProjectile
{
public:
	class UParticleSystem*                       GasEffect;                                         // 0x368(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APepperProjectile* GetDefaultObj();

};

// 0x90 (0xA60 - 0x9D0)
// Class ReadyOrNot.Pepperspray
class APepperspray : public ABaseItem
{
public:
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x9D0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2AFF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              SprayParticleComponent;                            // 0x9E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAmmoComponent*                        AmmoComponent;                                     // 0x9E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ParticleStart;                                     // 0x9F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ParticleEnd;                                       // 0x9F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ParticleImpact;                                    // 0xA00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ParticleRunningOut;                                // 0xA08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       ParticleSprayLoop;                                 // 0xA10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*              ParticleSprayLoopComponent;                        // 0xA18(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODSprayEvent;                                    // 0xA20(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODSprayEmptyEvent;                               // 0xA28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODImpactEvent;                                   // 0xA30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            FMODSprayLowAmmoEvent;                             // 0xA38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SprayDistance;                                     // 0xA40(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bSpraying : 1;                                     // Mask: 0x1, PropSize: 0x10xA44(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_208 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2B00[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DurationFrontTorso;                                // 0xA48(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DurationBackFace;                                  // 0xA4C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DurationFrontFace;                                 // 0xA50(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PepperSprayAbuseDebounce;                          // 0xA54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2B01[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APepperspray* GetDefaultObj();

	void StopSpraySoundEffect();
	void StopSprayParticleEffect();
	void StopSpraying();
	void StartSpraying();
	void Server_StopSpraying();
	void Server_StartSpraying();
	void PlaySpraySoundEffect(bool bRunningOutEffect);
	void PlaySprayParticleEffect(bool bRunningOutEffect);
	void OnRep_Spraying();
	void OnLowPeppersprayAmmo(float CurrentResource);
	void OnDepletedPeppersprayAmmo();
};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.PepperSprayDamageType
class UPepperSprayDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UPepperSprayDamageType* GetDefaultObj();

};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.PersonalizationWidget
class UPersonalizationWidget : public UUserWidget
{
public:
	class ACharacterCustomizationPortal*         SpawnedFromPortal;                                 // 0x260(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPersonalizationWidget* GetDefaultObj();

};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.PickUpCharacterActivity
class UPickUpCharacterActivity : public UBaseActivity
{
public:
	class AReadyOrNotCharacter*                  PickUpCharacter;                                   // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B02[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPickUpCharacterActivity* GetDefaultObj();

	void TickPickUpStage(float DeltaTime, float Uptime);
	bool IsPlaceDownComplete();
	void EnterTransitStage();
	void EnterPlaceDownStage();
	void EnterPickUpStage();
	void EnterMoveToStage();
	void EnterCompleteStage();
	bool CanTransitNow();
	bool CanPlaceDownNow();
	bool CanPickUpNow();
};

// 0x8 (0x2B0 - 0x2A8)
// Class ReadyOrNot.PickupEvidenceByTag
class APickupEvidenceByTag : public AObjective
{
public:
	class FName                                  EvidenceTag;                                       // 0x2A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class APickupEvidenceByTag* GetDefaultObj();

	bool HasCollectedEvidenceByTag(class FName& Tag);
};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.PickupItemActivity
class UPickupItemActivity : public UBaseActivity
{
public:
	float                                        SearchRadius;                                      // 0x198(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B04[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AWeaponCacheActor*                     WeaponCacheActor;                                  // 0x1A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             PickupItem;                                        // 0x1A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPickupItemActivity* GetDefaultObj();

	void OnPickupItemComplete();
};

// 0x28 (0x2B0 - 0x288)
// Class ReadyOrNot.PickupMagazineActor
class APickupMagazineActor : public APickupActor
{
public:
	class FName                                  MagazineLabel;                                     // 0x288(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinimumHitThreshold;                               // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B09[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            DroppedMagazineHitEvent;                           // 0x298(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMagazine                             MagazineData;                                      // 0x2A0(0x4)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2B0A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseMagazineWeapon*                   CameFromWeapon;                                    // 0x2A8(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class APickupMagazineActor* GetDefaultObj();

	void Server_Pickup(class AActor* InPickupInstigator);
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void Multicast_SetWeapon(class ABaseMagazineWeapon* Weapon);
	class ABaseMagazineWeapon* GetValidWeaponForPickerUpper(class APlayerCharacter* PlayerCharacter);
};

// 0x30 (0x2B8 - 0x288)
// Class ReadyOrNot.PickupWeaponActor
class APickupWeaponActor : public APickupActor
{
public:
	TSubclassOf<class ABaseWeapon>               Weapon;                                            // 0x288(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bKillOnPickup;                                     // 0x290(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSecondaryWeapon;                                  // 0x291(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bModifyLoadout;                                    // 0x292(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B0B[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UWeaponAttachment>         ScopeAttachment;                                   // 0x298(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         MuzzleAttachment;                                  // 0x2A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         UnderbarrelAttachment;                             // 0x2A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         OverbarrelAttachment;                              // 0x2B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APickupWeaponActor* GetDefaultObj();

};

// 0xB8 (0x2D8 - 0x220)
// Class ReadyOrNot.PingActor
class APingActor : public AActor
{
public:
	class AActor*                                PingedActor;                                       // 0x220(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                           IconBrush;                                         // 0x228(0x88)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	class FText                                  PingText;                                          // 0x2B0(0x18)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	class UObjectiveMarkerComponent*             ObjectiveMarkerComponent;                          // 0x2C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMapActorComponent*                    MapActorComponent;                                 // 0x2D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class APingActor* GetDefaultObj();

	void ToggleObjectiveMarkerVisibility();
	void ShowObjectiveMarker();
	void Setup(class AActor* InActor);
	void OnRep_SetPingText();
	void OnRep_SetIconBrush();
	void HideObjectiveMarker();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.PingInterface
class IPingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPingInterface* GetDefaultObj();

	class FText GetPingText();
	struct FVector GetPingLocation();
	struct FSlateBrush GetPingIcon();
	float GetPingDuration();
	bool CanPing();
};

// 0x168 (0x388 - 0x220)
// Class ReadyOrNot.PlacedC2Explosive
class APlacedC2Explosive : public AActor
{
public:
	uint8                                        Pad_2B0E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              ExplosionComp;                                     // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                MeshComp;                                          // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   AudioComponent;                                    // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                C2InteractableComponent;                           // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARadialForceActor*                     RadialForce;                                       // 0x250(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AC2Explosive*                          ConnectedC2Explosive;                              // 0x258(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           PlacedByController;                                // 0x260(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABaseItem>                 ItemInventoryClass;                                // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageToInflict;                                   // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDamageToInflict;                                // 0x274(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x278(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageInnerRadius;                                 // 0x280(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageOuterRadius;                                 // 0x284(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExplosionPostKillTime;                             // 0x288(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDetonated;                                        // 0x28C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B13[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DoorIntegrityDamage;                               // 0x290(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B14[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                TargetItem;                                        // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODC2ExplosionAudio;                              // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            PlacementHit;                                      // 0x2A8(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                         bUseScreenShake;                                   // 0x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B15[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UMatineeCameraShake>       ExplosionScreenShake;                              // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraShakeBase*                      ExplosionScreenShakeInst;                          // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraShakeRadius;                                 // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B16[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UStunDamage>               StunDamageType;                                    // 0x350(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRemovedViaMultitool;                              // 0x358(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B17[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsBeingRemoved;                                   // 0x368(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B18[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  IsBeingRemovedBy;                                  // 0x370(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        C2OcclusionMultiplier;                             // 0x378(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        C2FullOcclusionDepth;                              // 0x37C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B19[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlacedC2Explosive* GetDefaultObj();

	void Server_DetonateC2();
	void RemoveFromTarget();
	void PostExplosionKill();
	void Multicast_OnC2Detonated();
	class USkeletalMeshComponent* GetMeshComp();
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.PlacedZipcuffs
class APlacedZipcuffs : public AActor
{
public:
	class USkeletalMeshComponent*                ZipcuffMesh;                                       // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APlacedZipcuffs* GetDefaultObj();

};

// 0x10 (0x238 - 0x228)
// Class ReadyOrNot.PlaceTrapActivity
class UPlaceTrapActivity : public UWorldBuildingActivity
{
public:
	class ADoor*                                 Door;                                              // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B1A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlaceTrapActivity* GetDefaultObj();

	void OnTrapPlacementInterrupted();
};

// 0x18 (0x278 - 0x260)
// Class ReadyOrNot.PlanningMapWidget
class UPlanningMapWidget : public UUserWidget
{
public:
	bool                                         bDrawable;                                         // 0x260(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2B26[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFloorMapPointData>            DrawPointData;                                     // 0x268(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlanningMapWidget* GetDefaultObj();

	void OnPersonnelRemoved(int32 PersonnelNum);
	void OnPersonnelAdded(int32 PersonnelNum, int32 PersonnelZone);
	void OnForceMapRefresh();
	class UWorld* GetWorldContext();
	void ClearPointData(bool bClearAll, int32 FloorNum, bool bClearAllFloors);
	void AddPointData(const struct FVector2D& PointData, int32 FloorNum, enum class EFreeDrawColor Color, bool bNewPoint, float Thickness);
};

// 0x100 (0x130 - 0x30)
// Class ReadyOrNot.PlayableCharacterData
class UPlayableCharacterData : public UDataAsset
{
public:
	class FText                                  CharacterNameUI;                                   // 0x30(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterName;                                     // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterRole;                                     // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterBio;                                      // 0x78(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterRealName;                                 // 0x90(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterYearsOfService;                           // 0xA8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  CharacterDateOfBirth;                              // 0xC0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                  HandleName;                                        // 0xD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>          FaceMesh;                                          // 0xE0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPoseAsset>             FaceROM;                                           // 0x108(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlayableCharacterData* GetDefaultObj();

};

// 0x20 (0x1B8 - 0x198)
// Class ReadyOrNot.PlayDeadActivity
class UPlayDeadActivity : public UBaseActivity
{
public:
	uint8                                        Pad_2B2E[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayDeadActivity* GetDefaultObj();

	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnHeardYell(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void OnDamaged(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
};

// 0x0 (0x220 - 0x220)
// Class ReadyOrNot.PlayDeadSpot
class APlayDeadSpot : public AActor
{
public:

	static class UClass* StaticClass();
	static class APlayDeadSpot* GetDefaultObj();

};

// 0x30 (0x2A8 - 0x278)
// Class ReadyOrNot.PlayerActionPromptWidget
class UPlayerActionPromptWidget : public UBaseWidget
{
public:
	class FText                                  ActionText;                                        // 0x278(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class URichTextBlock*                        Action_RichText;                                   // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_OnShow;                                       // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInUse : 1;                                        // Mask: 0x1, PropSize: 0x10x2A0(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2B36[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerActionPromptWidget* GetDefaultObj();

	void UpdateText(class FText& InText, bool bAnimate, bool bLoopAnimation);
	void UpdateActionSlot(class FText& InText, bool ClearText, bool bAnimate, bool bLoopAnimation);
	bool IsInUse();
	void ClearText();
};

// 0xEE8 (0x2510 - 0x1628)
// Class ReadyOrNot.PlayerCharacter
class APlayerCharacter : public AReadyOrNotCharacter
{
public:
	TArray<class UMeshComponent*>                CustomizationFirstPersonMeshes;                    // 0x1628(0x10)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                CustomizationFirstPersonBodyMeshes;                // 0x1638(0x10)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>      CustomizationActorMaterials;                       // 0x1648(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	bool                                         bFirstPersonMeshesDirty;                           // 0x1658(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCameraComponent*                      ThirdPersonCameraComponent;                        // 0x1660(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpringArmComponent*                   ThirdPersonCameraArm;                              // 0x1668(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                Mesh1P;                                            // 0x1670(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                MeshBody1P;                                        // 0x1678(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                      FirstPersonCameraComponent;                        // 0x1680(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerPostProcessing*                 PlayerPostProcessingComp;                          // 0x1688(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   FMODBreathingAudioComp;                            // 0x1690(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBleedComponent*                       BleedComponent;                                    // 0x1698(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScoringComponent*                     ScoringComponent;                                  // 0x16A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           PrimaryItemVisualizationComponent;                 // 0x16A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           SecondaryItemVisualizationComponent;               // 0x16B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           LongTacticalVisualizationComponent;                // 0x16B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           HelmetVisualizationComponent;                      // 0x16C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           ArmorVisualizationComponent;                       // 0x16C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UItemVisualizationComponent*           EquippedItemVisualizationComponent;                // 0x16D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2BC3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         Rep_FPBodyMesh;                                    // 0x16E0(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                    LastSetMesh1PDynamicMaterial;                      // 0x16E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>      DynamicWeaponFovMats;                              // 0x16F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2BC4[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USkeletalMeshComponent*>        MeshComps;                                         // 0x1710(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class APlayerState*                          LastKnownPlayerState;                              // 0x1720(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ReplicatedFPMesh;                                  // 0x172C(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC6[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CurInputVector;                                    // 0x174C(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                          PushOverlappingAI_Handle;                          // 0x1758(0x8)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              Body1PMat;                                         // 0x1760(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  CurrentViewCharacter;                              // 0x1768(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnDefaultCommandIssued;                            // 0x1770(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTeamViewSet;                                     // 0x1780(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        CurrentTeamViewIndex;                              // 0x1790(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerViewActor*                      PlayerViewActor;                                   // 0x1798(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerViewActor>          PlayerViewActorClass;                              // 0x17A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                          TH_TeamViewInput;                                  // 0x17A8(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TeamViewInputHoldTime;                             // 0x17B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SurfaceType;                                       // 0x17B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoomType;                                          // 0x17B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PVPSpeakerName;                                    // 0x17C0(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSwatCommandOpen;                                // 0x17D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BC9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USwatCommandWidget*                    SwatCommandWidget;                                 // 0x17D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BCA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInCommandMenu;                                    // 0x17E2(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInDevicesMenu;                                    // 0x17E3(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInTabMenu;                                        // 0x17E4(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFadeToGray;                                       // 0x17E5(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BCB[0x1A];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Sensitivity;                                       // 0x1800(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertYaw;                                        // 0x1804(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertPitch;                                      // 0x1805(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BCC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GamepadLookSensitivity;                            // 0x1808(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GamepadAimSensitivity;                             // 0x180C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertGamepadHorizontal;                          // 0x1810(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertGamepadVertical;                            // 0x1811(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldCrouchGamepad;                                // 0x1812(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bToggleADSGamepad;                                 // 0x1813(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsingAlternateControls;                           // 0x1814(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BCD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UUserWidget>               HUD_Widget;                                        // 0x1818(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHumanCharacterHUD_V2*                 HumanCharacterWidget_V2;                           // 0x1820(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                           MagCheckUI;                                        // 0x1828(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeamViewWidget*                       TeamViewWidget;                                    // 0x1830(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                LastInteractableComponent;                         // 0x1838(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingTrigger*                      LastBuildingEntered;                               // 0x1840(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingTrigger*                      InsideCurrentBuilding;                             // 0x1848(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 LastHighlightedDoor;                               // 0x1850(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             LastHighlightedEvidence;                           // 0x1858(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APickupMagazineActor*                  LastHighlightedPickupMagazine;                     // 0x1860(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bExitWithFireSelect;                               // 0x1868(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BCE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      PreviousPosessedCharacter;                         // 0x1870(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnClientPossessed;                                 // 0x1878(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerTakenDamageDetails;                        // 0x1888(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFMODEvent*                            CriticalInjuredEvent;                              // 0x1898(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FlatlineEvent;                                     // 0x18A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FlatlineEventPvP;                                  // 0x18A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HeadshotEvent;                                     // 0x18B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SAPIPlateHitEvent;                                 // 0x18B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMirroring : 1;                                    // Mask: 0x1, PropSize: 0x10x18C0(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_215 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2BCF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSpawnInventoryItemsOnPossess;                     // 0x18C8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              FreeLookCache;                                     // 0x18CC(0xC)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        YellOutEffectLength;                               // 0x18E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        YelloutEffectRadius;                               // 0x18EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowReadyStatus;                                  // 0x18F0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotPlayerState*                LastPlayerState;                                   // 0x18F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          HitBones;                                          // 0x1900(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Arm_L;                                  // 0x1910(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Arm_R;                                  // 0x1918(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Low;                                    // 0x1920(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Leg_L;                                  // 0x1928(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Leg_R;                                  // 0x1930(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Head_Front;                             // 0x1938(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       Camera_Hit_Head_Back;                              // 0x1940(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchHeight;                                      // 0x1948(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             BodyImpactGroundSound;                             // 0x1950(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              Camera_RotationRate;                               // 0x1958(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 CurrentlyPiloting;                                 // 0x1968(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD5[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      RevivingPlayer;                                    // 0x19F8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      BeingRevivedByPlayer;                              // 0x1A00(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RevivingOperatingTime;                             // 0x1A08(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StunMovementSpeedMultiplier;                       // 0x1A0C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStunAimLocked;                                    // 0x1A10(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseItem*                             LastEquippedItemBeforeStun;                        // 0x1A18(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FirstPersonShakeAmount;                            // 0x1A24(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewBlendMultiplier;                               // 0x1A28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  BlendedBone;                                       // 0x1A30(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BD9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UAnimInstance>             Replicated_3PAnimInstance;                         // 0x1A40(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             Replicated_1PAnimInstance;                         // 0x1A48(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  MontageQueue_3P;                                   // 0x1A50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                  MontageQueue_1P;                                   // 0x1A60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        HoldingUseTime;                                    // 0x1A70(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldingUse;                                       // 0x1A74(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLookingAtEvidenceItem;                            // 0x1A75(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLookingAtDoor;                                    // 0x1A76(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLookingAtHuman;                                   // 0x1A77(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLookingAtTarget;                                  // 0x1A78(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUserLowReady;                                     // 0x1A79(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceLowReady;                                    // 0x1A7A(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BDA[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LowReadyTraceDistance;                             // 0x1A80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BDB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AEvidenceActor*                        LastCollectedEvidence;                             // 0x1A88(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ABaseArmour>, class USkeletalMesh*> ArmorOverrideMapFP;                                // 0x1A90(0x50)(Edit, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BDC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class AActor>>            ChemlightClasses;                                  // 0x1AE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UBasePlayerEffect*>             PlayerEffects;                                     // 0x1AF8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBasePlayerEffect*                     RecoilNerfEffect;                                  // 0x1B08(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideHeadwearPaperdollTexture : 1;             // Mask: 0x1, PropSize: 0x10x1B10(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_216 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2BDD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            HeadwearPaperdollTexture_Override;                 // 0x1B18(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            HeadwearPaperdollTexture_Crouch_Override;          // 0x1B20(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLoadout                              DefaultItems;                                      // 0x1B28(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        EquipIndex;                                        // 0x1B48(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BDE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLoadout>                      RandomLoadoutSelection;                            // 0x1B50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       ForwardShake;                                      // 0x1B60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       RightShake;                                        // 0x1B68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponFireModeChanged;                           // 0x1B70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponFired;                                     // 0x1B80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BDF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ABloodPool*                            BloodPool;                                         // 0x1BA0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CameraRotationRateMeshSpaceMultiplier;             // 0x1BA8(0xC)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MeshspaceRecoilMovementMultiplier;                 // 0x1BB4(0xC)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MeshSpaceMovementMultiplier1P;                     // 0x1BC0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MeshspaceRecoilMovementMinMax;                     // 0x1BC4(0xC)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInteract;                                        // 0x1BD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE0[0x29];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bWeaponDown3P;                                     // 0x1C09(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsWearingHeavyArmour;                             // 0x1C0A(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFireLoop;                                         // 0x1C0B(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          FullAutoLoop_Handle;                               // 0x1C10(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceAiming;                                   // 0x1C20(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE3[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bServerIsBlockingAnimationPlaying;                 // 0x1C30(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnItemGroupSelection_Pressed;                      // 0x1C38(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemGroupSelection_Held;                         // 0x1C48(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemGroupSelection_Released;                     // 0x1C58(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnItemGroupSelection_ItemChanged;                  // 0x1C68(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bItemGroupSelectionHeld;                           // 0x1C78(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAttachmentLightToggled;                          // 0x1C80(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMelee;                                           // 0x1CA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE7[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SprintFovFactor;                                   // 0x1CBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SprintFovInterpTime;                               // 0x1CC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultFovInterpTime;                              // 0x1CC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE8[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWeaponSwitchAmmoType;                            // 0x1CD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnChemlightThrown;                                 // 0x1CE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BE9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlacedC2Explosive*                    PendingC2Removal;                                  // 0x1D00(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseGrenade*                          QuickThrowItem;                                    // 0x1D08(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BEA[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bQuickThrowing;                                    // 0x1D11(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BEB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClearingScore;                                     // 0x1D18(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimTime;                                           // 0x1D1C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BEC[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bReloadLoop;                                       // 0x1D26(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BED[0x11];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWeaponReload;                                    // 0x1D38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWeaponTacticalReload;                            // 0x1D48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BEE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnWeaponMagCheck;                                  // 0x1D68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BEF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForwardStrafeSpeedMultiplier;                      // 0x1D7C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BackwardStrafeSpeedMultiplier;                     // 0x1D80(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SideStrafeSpeedMultiplier;                         // 0x1D84(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanSpeedMultiplier;                               // 0x1D88(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedPercentLossPerLegInjury;                      // 0x1D8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedPercentLossWhenCarrying;                      // 0x1D90(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraFreelookSetting                FreelookSetting;                                   // 0x1D94(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHitResult                            VaultTraceForward;                                 // 0x1DA8(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                            VaultTraceDownClose;                               // 0x1E30(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                            VaultTraceDownMiddle;                              // 0x1EB8(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                            VaultTraceDownFar;                                 // 0x1F40(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                         bLedgeFound;                                       // 0x1FC8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVaulting;                                         // 0x1FC9(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF1[0x2E];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          LastPlayedVaultMontage;                            // 0x1FF8(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RunSpeed;                                          // 0x2004(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAcceleration;                                   // 0x2008(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_AimFocus;                            // 0x200C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_Aim;                                 // 0x2010(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_Crouch;                              // 0x2014(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_Sprint;                              // 0x2018(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_SprintMax;                           // 0x201C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedModifier_SprintTime;                          // 0x2020(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitSpeedMultiplier;                                // 0x2024(0x4)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SlowDownSpeedMultiplier;                           // 0x2028(0x4)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WalkSpeedRampMultiplier;                           // 0x202C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        SprintSpeedRampUpMultiplier;                       // 0x2030(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        CurrentRunSpeedPercent;                            // 0x2034(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxRunSpeedPercent;                                // 0x203C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxCrouchRunSpeedPercent;                          // 0x2040(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinWalkSpeedPercent;                               // 0x2044(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF4[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastSetRunSpeed;                                   // 0x2058(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedMultiplier;                               // 0x205C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeployableWalkSpeedMultiplier;                     // 0x2060(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldingFastWalk;                                  // 0x2064(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldingSprint;                                    // 0x2065(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF5[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisableSprinting : 1;                             // Mask: 0x1, PropSize: 0x10x2074(0x1)(BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_217 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bWalking;                                          // 0x2075(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowPlacement;                                   // 0x2076(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF6[0x55];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MeshspaceInterp;                                   // 0x20CC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityCameraRollMultiplier;                      // 0x20D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              PendingRecoil;                                     // 0x20D4(0xC)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF7[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RecoilSpeed;                                       // 0x20EC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          Last1PMontage;                                     // 0x20F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UAnimMontage*>     PlayedTableMontageMap1P;                           // 0x2100(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_2BF9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            JumpStartSound;                                    // 0x2158(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            JumpLandSound;                                     // 0x2160(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODSnapshot*                         InMix;                                             // 0x2168(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODSnapshot*                         OutMix;                                            // 0x2170(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOutMixPlaying;                                    // 0x2178(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            InjuredScreamPVP;                                  // 0x2180(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            DeathScreamPVP;                                    // 0x2190(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   InjuredScreamComponent;                            // 0x2198(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementRequiredPerSound;                          // 0x21A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RotationRequiredPerSound;                          // 0x21A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NegativeVelocityRequiredForLandingSound;           // 0x21AC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFD[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMovementSound>                WalkSounds;                                        // 0x21D0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class AImpactEffect>           WalkSounds_Environmental;                          // 0x21E0(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovementSound>                RunSounds;                                         // 0x2208(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class AImpactEffect>           RunSounds_Environmental;                           // 0x2218(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovementSound>                TurningSounds;                                     // 0x2240(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovementSound>                LandingSounds;                                     // 0x2250(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HitDirectionForward;                               // 0x2270(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitDirectionRight;                                 // 0x2274(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2BFF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BreathingBaseEvent;                                // 0x2288(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExhaustionLevel;                                   // 0x2290(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExhaustionDissipationRate;                         // 0x2294(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExhaustionIncreaseRate;                            // 0x2298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExhaustionThreshold;                               // 0x229C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FearLevel;                                         // 0x22A0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C00[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FearDissipationRate;                               // 0x22A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FearSuppressionScale;                              // 0x22AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FearThreshold;                                     // 0x22B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSightTweakMode;                                 // 0x22B4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C01[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UUserWidget>               SightTweakerWidgetTemplate;                        // 0x22B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                           SightTweakerOverlay;                               // 0x22C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               SightTweakerPosOffset;                             // 0x22C8(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              SightTweakerRotOffset;                             // 0x22D4(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C02[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnProtectionTime;                               // 0x22F0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsThirdPerson;                                    // 0x22F4(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C03[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              Server_BaseAimRotation;                            // 0x22F8(0xC)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              FreeAimCache;                                      // 0x2304(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C04[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsPlayingInteraction;                              // 0x2318(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C05[0x4F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsStopping;                                       // 0x2368(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C06[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ALadderSnapZone*                       LadderPlacementZone;                               // 0x2370(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C07[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoveForwardInput;                                  // 0x2384(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MoveRightInput;                                    // 0x2388(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C08[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  LeftFootSocketName;                                // 0x23A4(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  RighttFootSocketName;                              // 0x23AC(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFootConstEnum                    LeftFootEnum;                                      // 0x23B4(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFootConstEnum                    RightFootEnum;                                     // 0x23B5(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C09[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FootAdjustOffset;                                  // 0x23B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootInterpSpeed;                                   // 0x23BC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootRotationInterpSpeed;                           // 0x23C0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HipInterpSpeed;                                    // 0x23C4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceDistance;                                     // 0x23C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceOffset;                                       // 0x23CC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityThreshold;                                 // 0x23D0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedBubbleAmount;                                 // 0x23D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              CurrentMeshRot;                                    // 0x23D8(0xC)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIgnoreRotationOverride;                           // 0x23E6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0B[0x15];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CameraBobTrans;                                    // 0x23FC(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               WeaponBobTrans;                                    // 0x2408(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              WeaponBobRot;                                      // 0x2414(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              CameraBobRot;                                      // 0x2420(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bIsSecondarySightActive;                           // 0x242C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCantedSightToggled;                              // 0x2430(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSecondarySightToggled;                           // 0x2450(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bIsPelvisFPMovementBobActive;                      // 0x2460(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PelvisFPMovementDamping;                           // 0x2464(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCopyTPMeshTransformsToFP;                         // 0x2468(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C0F[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           ScoreboardWidget;                                  // 0x2488(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C10[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCommandInterface*                     CommandInterface;                                  // 0x2498(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C11[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bItemWheelActive;                                  // 0x24B0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C12[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCommandWheelActive;                               // 0x24C0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C13[0x4F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerCharacter* GetDefaultObj();

	void UpdatePictureInPictureVisibility();
	void TryNextPlayerView_Released();
	void ToggleUnderbarrelAttachment();
	void ToggleThirdPerson();
	void ToggleSprint();
	void ToggleSightTweaker();
	void ToggleSecondarySight();
	void ToggleNoTarget();
	void ToggleLowReady();
	void ToggleHUD();
	void ToggleGodMode();
	void ToggleFreeThirdPerson();
	void ToggleFreeLook();
	void ToggleFastMovement();
	void ToggleCrouch();
	void ToggleCrosshairOverlay();
	void TeleportPlayerToLocation(const struct FVector& Location);
	void StopUsingMultitool(class AActor* Target);
	void StopLockPicking(class AActor* Target);
	void StopFreeLook();
	void StopFPMontageFromTable(const class FString& Animation, float BlendoutTime);
	void StartUsingMultitool(class AActor* Target);
	void StartQuickThrow();
	void StartLockPicking(class AActor* Target);
	void StartFreeLook();
	void StartChemThrow();
	void StartBleeding();
	void ShowPlayer();
	void SetTabletFocused(bool bFocused);
	void SetRunSpeed(float NewRunSpeed);
	void SetMaxRunSpeed(float NewMaxSpeed);
	void SetHumanCharacterWidget_V2(class UHumanCharacterHUD_V2* NewHumanCharacterWidget);
	void SetFreelookYawMin(float NewYawMinValue);
	void SetFreelookYawMax(float NewYawMaxValue);
	void SetFreelookPitchMin(float NewPitchMinValue);
	void SetFreelookPitchMax(float NewPitchMaxValue);
	void SetForceLowReady(bool bShouldForceLowReady);
	void SetCommandInterfaceActive(bool CommandInterfaceActive);
	void SetAmmo(const class FString& AmmoType);
	void Server_Walk();
	void Server_UpdateLastSetRunSpeed(float NewRunSpeed);
	void Server_UpdateIsBlockingAnimationPlaying(bool bIsBlockingAnimationPlaying);
	void Server_UpdateFreeLookCache(const struct FRotator& NewFreeLookCache);
	void Server_UpdateCameraRotationRate(const struct FRotator& NewCameraRotRate);
	void Server_UpdateADS(bool bADS);
	void Server_UnlockMovementAndAim();
	void Server_UnlockMovementAndActions();
	void Server_UnlockMovement();
	void Server_UnlockAllActions();
	void Server_UnlockAim();
	void Server_ToggleWalk();
	void Server_ToggleNoTarget();
	void Server_ToggleLightByClass(enum class ELightRadialSelection LightType);
	void Server_ToggleGodMode();
	void Server_ToggleFastMovement();
	void Server_TeleportPlayerToLocation(const struct FVector& Location);
	void Server_TakeDamage(float Damage, struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void Server_StopAIMoveTo(class ACyberneticCharacter* AI);
	void Server_Sprint();
	void Server_SpawnEjectedMagazine(const struct FTransform& SpawnTransform, class ABaseMagazineWeapon* Weapon);
	void Server_SetWalkSpeed(float NewWalkSpeed, float NewCrouchWalkSpeed);
	void Server_SetUserLowReady(bool bShouldUserLowReady);
	void Server_SetLowReady(bool bUp, bool bLowReady, bool bIsUserLowReady);
	void Server_SecondaryUse();
	void Server_ResetPlayerEffect(TSubclassOf<class UBasePlayerEffect> InPlayerEffectClass, bool bMulticast);
	void Server_RemoveLadder(class ATelescopicLadder* Ladder);
	void Server_PrimaryUse();
	void Server_PrepareForHeal();
	void Server_PlayVaultAnimation(const struct FVector& Ledge, const struct FVector& LegeWallNormal, const struct FVector& LedgeTraceDown, float LedgeZ, enum class ELedgeWidth LedgeWidth, enum class ELedgeHeight LedgeHeight);
	void Server_PlaySound(class USoundCue* Cue);
	void Server_PlayPVPSpeech(const class FString& SpeechRowName, enum class ETeamType TeamType);
	void Server_Ping();
	void Server_OnReviveComplete(class APlayerCharacter* PlayerCharacter);
	void Server_OnReloadComplete();
	void Server_MarkWeaponCleaned(class ABaseItem* Item);
	void Server_LockMovementAndAim();
	void Server_LockMovementAndActions();
	void Server_LockMovement();
	void Server_LockAllActions();
	void Server_LockAim();
	void Server_KillfeedMessage(class APlayerCharacter* Killer, class APlayerCharacter* Victim, class ABaseItem* Weapon);
	void Server_InstaStartFree(class APlayerCharacter* Target);
	void Server_InstaStartArrest(class APlayerCharacter* Target);
	void Server_InstantSurrenderTarget();
	void Server_GiveAITurnAroundOrder(class ACyberneticCharacter* AI);
	void Server_GiveAIMoveToExit(class ACyberneticCharacter* AI);
	void Server_GiveAIMoveTo(class ACyberneticCharacter* AI, const struct FVector& Location);
	void Server_FreefeedMessage(class APlayerCharacter* Freer, class APlayerCharacter* Victim);
	void Server_FinishHealing();
	void Server_FastWalk();
	void Server_EquipMultitool(enum class EMultitoolFunctions MultitoolFunction);
	void Server_EndPrimaryUse();
	void Server_EndFastWalk();
	void Server_ChangeMesh(class USkeletalMesh* FPMesh, class USkeletalMesh* TPMesh, class USkeletalMesh* TPHeadMesh);
	void Server_ChangeFPMesh(class USkeletalMesh* NewFPMesh);
	void Server_ArrestfeedMessage(class APlayerCharacter* Arrester, class APlayerCharacter* Victim);
	void Server_ApplyPlayerEffectFor(TSubclassOf<class UBasePlayerEffect> InPlayerEffectClass, float Seconds, bool bMulticast);
	void Server_ApplyPlayerEffect(TSubclassOf<class UBasePlayerEffect> InPlayerEffectClass, bool bResettable, bool bMulticast);
	void Server_ActorPickedUp(class APickupActor* PickupActor);
	void SecondaryUse();
	void ScreenPositionToWeaponFOV(struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void ResetLODS_Player();
	void ResetLODs_Items();
	void ReplenishAllMagazineAmmo();
	void ReplenishAllGrenadeAmmo();
	void RemovePendingC2();
	void ReloadOrMagCheck_Released();
	void ReloadOrMagCheck();
	void Reload();
	void PrintItemAttachmentListToLog();
	void PrimaryUse();
	void PlayVaultAnimation(const struct FVector& Ledge, const struct FVector& LedgeWallNormal, const struct FVector& LedgeTraceDown, float LedgeZ, enum class ELedgeWidth LedgeWidth, enum class ELedgeHeight LedgeHeight);
	void Ping();
	void OnWeaponTacticalReloadSignature__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnWeaponSwitchAmmoType__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnWeaponReloadSignature__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnWeaponMagCheckSignature__DelegateSignature(class ABaseMagazineWeapon* MagazineWeapon);
	void OnWeaponFireModeChanged__DelegateSignature(class APlayerCharacter* PlayerCharacter, enum class EFireMode NewFireMode, enum class EFireMode LastFireMode);
	void OnWeaponFired__DelegateSignature(class ABaseWeapon* Weapon);
	void OnTurn();
	void OnTeamViewSet__DelegateSignature(class AReadyOrNotCharacter* NewViewCharacter);
	void OnTeamChatPressed();
	void OnSupression__DelegateSignature(float Strength);
	void OnSupression(float Strength);
	void OnStartChemThrow__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnSelectDeviceReleased(const struct FKey& Key);
	void OnSelectDevicePressed(const struct FKey& Key);
	void OnSecondarySightToggled__DelegateSignature(bool bUsingSecondarySight, class ABaseMagazineWeapon* Weapon);
	void OnRep_UpdateAnimInstance();
	void OnRep_StartBoneBlend();
	void OnRep_RunSpeedUpdate();
	void OnRep_BaseAimRotation();
	void OnPlayerTakeDamageDetails__DelegateSignature(bool bWasHeadshot, float DamageTaken, float HealthRemaining, bool bBlockedByArmour, bool bBlockedByHelmet);
	void OnPlayerEffectExpired(TSubclassOf<class UReadyOrNotGameplayEffect> InPlayerEffectClass);
	void OnMelee__DelegateSignature();
	void OnLowReadyButtonUp();
	void OnLowReadyButtonDown();
	void OnLowHealth(float CurrentHealth);
	void OnKilledOrGoneUnconciousBP();
	void OnJumpStart();
	void OnJumpLand();
	void OnItemUseStart__DelegateSignature(class ABaseItem* Item);
	void OnItemUseCompleted__DelegateSignature(class ABaseItem* Item);
	void OnItemSelectionStyleChanged(enum class EItemSelectionInterfaceType NewItemSelectionInterface);
	void OnItemPrimaryUseCompleted(class ABaseItem* Item);
	void OnItemPrimaryUse(class ABaseItem* Item);
	void OnItemGroupSelection__DelegateSignature(int32 GroupIndex, int32 CategoryIndex);
	void OnInteract__DelegateSignature(class UInteractableComponent* InteractableComp);
	void OnFullHealth();
	void OnDefaultCommandIssued__DelegateSignature(class APlayerCharacter* Issuer, enum class ESwatCommand CommandIssued);
	void OnClientPossessed__DelegateSignature(class AController* NewController);
	void OnChatPressed();
	void OnCantedSightToggled__DelegateSignature(bool bUsingCantedSight);
	void OnBulletImpact__DelegateSignature(float DirectionForward, float DirectionRight);
	void OnBulletImpact(float DirectionForward, float DirectionRight);
	void OnAttachmentLightToggled__DelegateSignature();
	void Multicast_ToggleLaserLight();
	void Multicast_ShowThirdPerson();
	void Multicast_PlaySound(class USoundCue* Cue);
	void Multicast_PlayPVPSpeech(const class FString& SpeechRowName, enum class ETeamType TeamType);
	void Multicast_PlayInjuredScream();
	void Multicast_PlayArmourRelatedEffects(class ABaseArmour* Armour, class UParticleSystem* Particle, struct FTransform& AtTransform);
	void Multicast_HideThirdPerson();
	void Melee();
	void MagCheck();
	void LocalKillFeed(class APlayerCharacter* Killer, class APlayerCharacter* Victim, class ABaseItem* Weapon);
	void LocalFreeFeed(class APlayerCharacter* Freer, class APlayerCharacter* Victim);
	void LocalDeathFeed(class AReadyOrNotPlayerController* PlayerController);
	void LocalArrestFeed(class APlayerCharacter* Arrester, class APlayerCharacter* Victim);
	void JamDoor(class ADoor* Door);
	bool IsTabletFocused();
	bool IsSprinting();
	bool IsMovingForward();
	bool IsMoving();
	bool IsMagCheckPlaying();
	bool IsInLightSource(int32* VisibleLightSources, float MinimumLightLevel);
	bool IsInCinematicAnimation();
	bool IsHoldingSprint();
	bool IsHoldingFastWalk();
	bool IsFreelooking();
	bool IsFireModeSelectPlaying();
	bool IsAny1PMontagePlaying();
	bool Is1PMontagePlaying(class UAnimMontage* Montage);
	void IncrementalUse(float Val);
	void HidePlayer();
	bool HasWedge();
	bool HasOptiwand();
	bool HasNVG();
	bool HasLockpick();
	bool HasGrenadesInInventory();
	bool HasChemlightsInInventory();
	bool HasC2();
	bool HasBSG();
	float GetViewPitch();
	int32 GetQuickthrowGrenadeAmmo();
	struct FHitResult GetHitFromCamera(float MaxDistance, const TArray<enum class ECollisionChannel>& CollisionChannels, const struct FRotator& OffsetRotation, const struct FVector& OffsetVector, bool bDrawTrace);
	enum class EFireMode GetFiringMode();
	struct FCameraFreelookSetting GetCurrentFreelookSettings();
	class APlayerCharacter* GetClosestPlayerCharacter(enum class ETeamType Team, float* OutClosestDistance, bool bExcludeArrested);
	int32 GetChemlightAmmo();
	TArray<class AReadyOrNotCharacter*> GetAvaliablePlayersForTeamView(bool bIncludeDeadViews);
	TArray<class APlayerCharacter*> GetAllOtherPlayerCharacters(enum class ETeamType Team);
	struct FRotator GetAimOffsets();
	void ForceMaxLODs_Player();
	void ForceMaxLODs_Items();
	void ForceFirstDraw();
	void FireLaserEyes();
	void FadeToBlackEnable();
	void FadeToBlackDisable();
	void EquipZipcuffs();
	void EquipStinger();
	void EquipSecondaryItem();
	void EquipPrimaryItem();
	void EquipPepperspray();
	bool EquippedWeaponHasSecondarySight();
	bool EquippedWeaponHasLightAttachment();
	bool EquippedWeaponHasLaserAttachment();
	bool EquippedWeaponHasFireModes();
	void EquipMultitool();
	void EquipMirrorgun();
	void EquipLongTactical();
	class ABaseItem* EquipItemOfType(enum class EItemCategory ItemCategory);
	class ABaseItem* EquipItemFromGroup_Name(class FName GroupName, int32 ItemCategoryIndex);
	class ABaseItem* EquipItemFromGroup_Index(int32 GroupIndex, int32 ItemCategoryIndex);
	void EquipFlashbang();
	void EquipDoorJam();
	void EquipDetonator();
	void EquipCSGas();
	void EquipC2();
	void EquipBreachingShotgun();
	void EquipBatteringRam();
	void EndSecondaryUse();
	void EndQuickThrow();
	void Drone_Yaw(float Val);
	void Drone_Throttle(float Val);
	void Drone_Steady();
	void Drone_Right(float Val);
	void Drone_MoveForward(float Val);
	void DrawPermanentMarker();
	void DestroyNonDevelopmentComponents();
	void DebugDetachAllComponentsAndSubComponents();
	void CycleFireMode();
	void CreateTeamViewWidget();
	void CreateHUDWidget();
	void ClosePlayerView();
	void Client_StartStun(enum class EStunType StunType, class AActor* StunCauser, const struct FVector& DamageCauserLocation);
	void Client_StartPepperSprayed(class APepperspray* Pepperspray, const struct FVector& DamageCauserLocation);
	void Client_SetWalkSpeed(float NewWalkSpeed, float NewCrouchWalkSpeed);
	void Client_ResetPlayerEffect(TSubclassOf<class UBasePlayerEffect> InPlayerEffectClass);
	void Client_PossessedBy(class AController* NewController);
	void Client_PlayPostProcessEffect(class FName& InPostProcessEffect, class AActor* DamageCauser);
	void Client_OnTakenDamageDetail(bool bWasHeadshot, bool bTorsoShot, bool bLeftArm, bool bLeftLeg, bool bRightArm, bool bRightLeg, float DamageTaken, float RemainingHealth, bool bBlockedByArmour, bool bBlockedByHelmet);
	void Client_OnPlayerDamage(bool bTakenDamage, float InDamage, class AReadyOrNotCharacter* InstigatorCharacter, class AActor* DamageCauser);
	void Client_OnEndRemoveC2();
	void Client_OnBeginRemoveC2(class APlacedC2Explosive* C2);
	void Client_BulletHit(const struct FHitResult& BulletImpact);
	void Client_AutoSelectNewQuickthrowItem(class ABaseGrenade* CallingGrenade);
	void Client_ApplyPlayerEffect(TSubclassOf<class UBasePlayerEffect> InPlayerEffectClass, bool bResettable, bool bMulticast);
	void CaptureFPCamera(float DeltaTime);
	bool CanUseIncrementalSystem();
	bool CanQuickThrow();
	bool CanPingActor(class AActor* Actor);
	bool CalculateStopLocation(struct FVector* OutStopLocation, struct FVector& CurrentLocation, struct FVector& Velocity, struct FVector& Acceleration, float Friction, float BrakingDeceleration, float TimeStep, int32 MaxSimulationIterations);
	void C2Door(class ADoor* Door);
	void ApplyPlayerEffectFor(class UBasePlayerEffect* InPlayerEffect, float Seconds);
	void ApplyPlayerEffect(class UBasePlayerEffect* InPlayerEffect, bool bResettable);
	void AdjustScopeOffsetVertical(float NewOffset);
	void AdjustScopeOffsetHorizontal(float NewOffset);
};

// 0xB0 (0x110 - 0x60)
// Class ReadyOrNot.PlayerEffect_ModifyRecoil
class UPlayerEffect_ModifyRecoil : public UBasePlayerEffect
{
public:
	enum class ERecoilModifierOption             ModificationOption;                                // 0x60(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C1E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EItemClass>                WeaponFilter;                                      // 0x68(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                        RecoilFireStrength;                                // 0x78(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilFireStrengthFirst;                           // 0x7C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilDampStrength;                                // 0x80(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilAngleStrength;                               // 0x84(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilRandomness;                                  // 0x88(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilFireADSModifier;                             // 0x8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilBuildupADSModifier;                          // 0x90(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilAngleADSModifier;                            // 0x94(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RecoilBuildupDampStrength;                         // 0x98(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bApplySpecific : 1;                                // Mask: 0x1, PropSize: 0x10x9C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_219 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2C20[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSpecificWeaponRecoilMod>      SpecificWeaponRecoilMods;                          // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class ABaseMagazineWeapon*, struct FSpecificWeaponRecoilMod> OriginalRecoilValues;                              // 0xB0(0x50)(NativeAccessSpecifierPrivate)
	TArray<class ABaseMagazineWeapon*>           AffectedWeapons;                                   // 0x100(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UPlayerEffect_ModifyRecoil* GetDefaultObj();

};

// 0x20 (0x280 - 0x260)
// Class ReadyOrNot.PlayerHealthStatusWidget
class UPlayerHealthStatusWidget : public UUserWidget
{
public:
	class UHealthStatusWidget*                   Health;                                            // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHealthStatusWidget*                   Armor;                                             // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHealthStatusWidget*                   Helmet;                                            // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x278(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPlayerHealthStatusWidget* GetDefaultObj();

};

// 0x8 (0x318 - 0x310)
// Class ReadyOrNot.PlayerHUD
class APlayerHUD : public AHUD
{
public:
	class UUserWidget*                           PlayerHUD;                                         // 0x310(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APlayerHUD* GetDefaultObj();

	void SetWidgetTranslationByMouseDelta(class APlayerController* Controller, class UUserWidget* Widget, float DeltaSeconds, float InterpSpeed, float InputScale, float ClampAt);
	void SetCanvasTranslationByMouseDelta(class APlayerController* Controller, class UCanvasPanel* Widget, float DeltaSeconds, float InterpSpeed, float InputScale, float ClampAt);
};

// 0x148 (0x3A8 - 0x260)
// Class ReadyOrNot.PlayerPaperdollWidget
class UPlayerPaperdollWidget : public UUserWidget
{
public:
	class UWidgetSwitcher*                       StanceSwitcher;                                    // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                       Stand_CarrySwitcher;                               // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                       Crouch_CarrySwitcher;                              // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              Stand_Overlay;                                     // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              Crouch_Overlay;                                    // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              StandCarry_Overlay;                                // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              StandNoCarry_Overlay;                              // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              CrouchCarry_Overlay;                               // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                              CrouchNoCarry_Overlay;                             // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Outline_Image;                                     // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Head_Image;                                        // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Body_Image;                                        // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                RightArm_Image;                                    // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                LeftArm_Image;                                     // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                RightLeg_Image;                                    // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                LeftLeg_Image;                                     // 0x2D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Headwear_Image;                                    // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                BodyArmor_Image;                                   // 0x2E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Outline_Image;                               // 0x2F0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Head_Image;                                  // 0x2F8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Body_Image;                                  // 0x300(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_RightArm_Image;                              // 0x308(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_LeftArm_Image;                               // 0x310(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_BodyArmor_Image;                             // 0x318(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Outline_Crouch_Image;                              // 0x320(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Head_Crouch_Image;                                 // 0x328(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Body_Crouch_Image;                                 // 0x330(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                RightArm_Crouch_Image;                             // 0x338(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                LeftArm_Crouch_Image;                              // 0x340(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                RightLeg_Crouch_Image;                             // 0x348(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                LeftLeg_Crouch_Image;                              // 0x350(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Headwear_Crouch_Image;                             // 0x358(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                BodyArmor_Crouch_Image;                            // 0x360(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Outline_Crouch_Image;                        // 0x368(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Head_Crouch_Image;                           // 0x370(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_Body_Crouch_Image;                           // 0x378(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_RightArm_Crouch_Image;                       // 0x380(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_LeftArm_Crouch_Image;                        // 0x388(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_RightLeg_Crouch_Image;                       // 0x390(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_LeftLeg_Crouch_Image;                        // 0x398(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Carry_BodyArmor_Crouch_Image;                      // 0x3A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPlayerPaperdollWidget* GetDefaultObj();

	void UpdateHealth(class ABaseItem* Item);
};

// 0x670 (0xDE0 - 0x770)
// Class ReadyOrNot.PlayerPostProcessing
class UPlayerPostProcessing : public UPostProcessComponent
{
public:
	TArray<class UPostProcessEffectData*>        DebugPPEffects;                                    // 0x770(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>      DebugPPEffects_MIDs;                               // 0x780(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C4A[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPostProcessEffect>            PostProcessEffects;                                // 0x7C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C4B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            DevPostProcessMaterials;                           // 0x7F0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FNVGPostProcessSettings               NVG_Settings;                                      // 0x800(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C4C[0x568];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      OwningCharacter;                                   // 0xDC0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                RecentDamageCauser;                                // 0xDC8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C4D[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerPostProcessing* GetDefaultObj();

	void UpdateWeaponHighlightVisibility();
	void StopTaserEffect();
	void StopSuppressionEffects();
	void StopStingerEffect();
	void StopPostProcessEffect_Name(class FName EffectName);
	void StopPostProcessEffect_FromDataAsset(class UPostProcessEffectData* InPostProcessEffectData);
	void StopPostProcessEffect(struct FPostProcessEffect* InPostProcessEffect);
	void StopPeppersprayEffect();
	void StopInjuryEffects();
	void StopHeartbeatEffect();
	void StopHealingEffect();
	void StopGasEffect();
	void StopFlashbangEffect();
	void StopDeathEffect();
	void StopBleedingEffect();
	void StartTaserEffect(class AActor* DamageCauser);
	void StartSuppressionEffects(class AActor* DamageCauser);
	void StartStingerEffect(class AActor* DamageCauser);
	void StartPostProcessEffect_Specific(struct FPostProcessEffectPlayer* InPostProcessSetting, class AActor* DamageCauser);
	void StartPostProcessEffect_FromDataAsset(class UPostProcessEffectData* InPostProcessEffectData, class AActor* DamageCauser);
	void StartPostProcessEffect(struct FPostProcessEffect* InPostProcessEffect, class AActor* DamageCauser);
	void StartPeppersprayEffect(class AActor* DamageCauser);
	void StartInjuryEffects(class AActor* DamageCauser);
	void StartHeartbeatEffect();
	void StartHealingEffect();
	void StartGasEffect(class AActor* DamageCauser);
	void StartFlashbangEffect(class AActor* DamageCauser);
	void StartDeathEffect(class AActor* DamageCauser);
	void StartBleedingEffect();
	void ResetInjuryRadialBlur(float DeltaTime);
	void ProcessPostProcessEffect(struct FPostProcessEffect* InPostProcessEffect, float DeltaTime);
	void PlayPostProcessEffect_Name(class FName EffectName, class AActor* DamageCauser);
	void OnSupression(float Strength);
	void OnPlayerStunned(class AReadyOrNotCharacter* Character, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnPlayerPepperSprayed(class AActor* DamageCauser);
	void OnPlayerKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnItemHolstered(class ABaseItem* Item);
	void OnItemEquipped(class ABaseItem* Item);
	void OnFire();
	void OnDamageTakenDetails(bool bWasHeadshot, float DamageTaken, float HealthRemaining, bool bBlockedByArmour, bool bBlockedByHelmet);
	void OnDamageTaken(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnBulletImpact(float DirectionForward, float DirectionRight);
	bool IsPostProcessEffectPlaying(class UPostProcessEffectData* InPostProcessEffectData);
	int32 InitializePostProcessFloatParam(struct FPostProcessEffect& InPostProcessEffect, class FName& InParameterName, float Value, int32 Instance, int32 CurveKey);
	int32 GetPostProcessFromFloatParam(struct FPostProcessEffect& InPostProcessEffect, class FName& InParameterName, int32 Instance);
	bool FulfillsAllRequirements(TArray<TSubclassOf<class UPostProcessRequirement>>& InRequirementClasses, class AActor* InDamageCauser, bool bForceFulfillment);
	void FadeToGrey();
};

// 0x8 (0x2B0 - 0x2A8)
// Class ReadyOrNot.PlayerReferendum
class APlayerReferendum : public AReferendum
{
public:
	class AReadyOrNotPlayerState*                TargetPlayerState;                                 // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APlayerReferendum* GetDefaultObj();

};

// 0x40 (0x360 - 0x320)
// Class ReadyOrNot.PlayersList
class UPlayersList : public UCommonActivatableWidget
{
public:
	FMulticastInlineDelegateProperty_            OnSuccess;                                         // 0x320(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnFailure;                                         // 0x330(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FLobbyPlayer>                  PlayersList;                                       // 0x340(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMuteStateDelegate;                               // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UPlayersList* GetDefaultObj();

	bool VivoxAvailable();
	void UpdatedMutedState();
	void SetMutedState(const class FString& UniqueNetId, bool Value);
	void OnPlayersListUpdated__DelegateSignature();
	void MuteStateDelegate__DelegateSignature();
	class APlayerState* GetPlayerStateFromUniqueId(const class FString& UniqueId);
	void GetPlayersList();
	bool GetMutedState(const class FString& UniqueNetId);
};

// 0x78 (0x2F0 - 0x278)
// Class ReadyOrNot.PlayerSpeedIndicator_V2
class UPlayerSpeedIndicator_V2 : public UBaseWidget
{
public:
	class USizeBox*                              Twenty_Box;                                        // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Twenty_Image;                                      // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              Fourty_Box;                                        // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Fourty_Image;                                      // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              Sixty_Box;                                         // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Sixty_Image;                                       // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              Eighty_Box;                                        // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                Eighty_Image;                                      // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              OneHundred_Box;                                    // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                OneHundred_Image;                                  // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            SpeedPercentage_Text;                              // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x2D0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BaselineOpacity;                                   // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FadeSpeed;                                         // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastSetRunSpeedPercent;                            // 0x2E0(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinRunSpeedPercent;                                // 0x2E4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxRunSpeedPercent;                                // 0x2E8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        NormalizedRunSpeedPercent;                         // 0x2EC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPlayerSpeedIndicator_V2* GetDefaultObj();

};

// 0x40 (0x290 - 0x250)
// Class ReadyOrNot.PlayerStart_VIP_Spawn
class APlayerStart_VIP_Spawn : public APlayerStart
{
public:
	uint8                                        bHasVisited : 1;                                   // Mask: 0x1, PropSize: 0x10x250(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_21C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2C56[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  VIPSpawnDescriptor;                                // 0x258(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                        SuffixNumber;                                      // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C57[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         SpawnBox;                                          // 0x278(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextRenderComponent*                  TextRender;                                        // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArrowComponent*                       SpawnDirection;                                    // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class APlayerStart_VIP_Spawn* GetDefaultObj();

	class FText GetVIPSpawnDescriptor();
	struct FRotator GetSpawnDirection();
	struct FVector GetRandomSpawnPoint();
};

// 0xC0 (0x2E0 - 0x220)
// Class ReadyOrNot.PlayerViewActor
class APlayerViewActor : public AActor
{
public:
	uint8                                        bShouldCaptureScene : 1;                           // Mask: 0x1, PropSize: 0x10x220(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_21D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2C60[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneCaptureComponent2D*              CameraCaptureComponent;                            // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPostProcessEffect                    SwitchViewEffects;                                 // 0x238(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UFMODEvent*                            SwitchViewEvent;                                   // 0x260(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        DeathViewTime;                                     // 0x268(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C62[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            DeathViewEvent;                                    // 0x270(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            CloseViewEvent;                                    // 0x278(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                CameraRenderTarget;                                // 0x280(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      OwningPlayerCharacter;                             // 0x288(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  ViewCharacter;                                     // 0x290(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               TargetLocation;                                    // 0x298(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                              TargetRotation;                                    // 0x2A4(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstance*                     MI_PostProcess_Greyscale;                          // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                     MI_PostProcess_Bump;                               // 0x2B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                     MI_PostProcess_Glitch;                             // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDeathEffectsApplied : 1;                          // Mask: 0x1, PropSize: 0x10x2C8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bSwitchViewEffectsApplied : 1;                     // Mask: 0x2, PropSize: 0x10x2C8(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C64[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerViewActor* GetDefaultObj();

	void UpdateViewTarget(struct FVector& NewLocation, struct FRotator& NewRotation);
	void TryNextView(bool bRequestClose, bool bIncludeDeadViews);
	void SetViewPlayer(class AReadyOrNotCharacter* NewViewCharacter);
	void SetOwningPlayer(class APlayerCharacter* NewOwnerCharacter);
	bool IsSwitchingView();
	void HideComponent(class UPrimitiveComponent* ComponentToHide);
	void HideActor(class AActor* ActorToHide, bool bIncludeChildActors);
	void ClearHiddenComponents();
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.PolicePresenceTestActor
class APolicePresenceTestActor : public AActor
{
public:
	class USceneComponent*                       Scene;                                             // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   Police;                                            // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   Suspect;                                           // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APolicePresenceTestActor* GetDefaultObj();

};

// 0x28 (0x248 - 0x220)
// Class ReadyOrNot.PopupTarget
class APopupTarget : public AActor
{
public:
	class USkeletalMeshComponent*                Mesh;                                              // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        MaxHealth;                                         // 0x228(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        PopupTime;                                         // 0x22C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        Health;                                            // 0x230(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C66[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bFallDown;                                         // 0x240(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2C67[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APopupTarget* GetDefaultObj();

	void Popup();
	bool IsAlive();
};

// 0x70 (0x2C8 - 0x258)
// Class ReadyOrNot.PortalVolume
class APortalVolume : public AVolume
{
public:
	bool                                         bIsOutside;                                        // 0x258(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPortalType                       PortalType;                                        // 0x259(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C69[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        OverlappingActors;                                 // 0x260(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AActor>>         AttachedObjects;                                   // 0x270(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         Doors;                                             // 0x280(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                 BreakableGlass_SoftPointer;                        // 0x290(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABreakableGlass*>               BreakableGlasses;                                  // 0x2B8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APortalVolume* GetDefaultObj();

};

// 0x3F8 (0x428 - 0x30)
// Class ReadyOrNot.PostProcessEffectData
class UPostProcessEffectData : public UDataAsset
{
public:
	class UMaterialInterface*                    PostProcess_Material;                              // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPostProcessSetting_FloatParam> ScalarParameters;                                  // 0x38(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPostProcessSetting_VectorParam> VectorParameters;                                  // 0x48(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_21F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2C6D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  Note;                                              // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C6E[0x3B0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPostProcessEffectData* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class ReadyOrNot.PostProcessRequirement
class UPostProcessRequirement : public UObject
{
public:
	class APlayerCharacter*                      PlayerCharacter;                                   // 0x28(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                DamageCauser;                                      // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UPostProcessRequirement* GetDefaultObj();

	void Initialize(class APlayerCharacter* InPlayerCharacter, class AActor* InDamageCauser);
	class APlayerCharacter* GetPlayerCharacter();
	class AActor* GetDamageCauser();
	bool EnablePostProcessEffect();
};

// 0x0 (0x38 - 0x38)
// Class ReadyOrNot.PPR_IsDamageCauserOnScreen
class UPPR_IsDamageCauserOnScreen : public UPostProcessRequirement
{
public:

	static class UClass* StaticClass();
	static class UPPR_IsDamageCauserOnScreen* GetDefaultObj();

};

// 0x38 (0x2E0 - 0x2A8)
// Class ReadyOrNot.Pouch
class APouch : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                MagazineComponent;                                 // 0x2A8(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       AttachToComp;                                      // 0x2B0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  AttachToSocket;                                    // 0x2B8(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bShowMagazine;                                     // 0x2C0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C72[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  MagazineSocket;                                    // 0x2C4(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2C73[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         OpenPouch;                                         // 0x2D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         ClosePouch;                                        // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APouch* GetDefaultObj();

	void OnRep_UpdateVisibility();
	void OnRep_Attach();
};

// 0x38 (0x2D0 - 0x298)
// Class ReadyOrNot.PredictionPFComponent
class UPredictionPFComponent : public UCrowdFollowingComponent
{
public:
	struct FVector                               PathStopLocation;                                  // 0x298(0xC)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFixPathToAlwaysHaveBraking;                       // 0x2A4(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFixPathRemoveClosePoints;                         // 0x2A5(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C74[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PathPointRemoveDistanceThreshold;                  // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CustomAcceptanceRadius;                            // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C75[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPredictionPFComponent* GetDefaultObj();

};

// 0x60 (0x280 - 0x220)
// Class ReadyOrNot.PremissionStreetView
class APremissionStreetView : public AActor
{
public:
	class UStaticMeshComponent*                  LeftBuildingMesh;                                  // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  RightBuildingMesh;                                 // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChildActorComponent*                  LeftTrafficLight;                                  // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChildActorComponent*                  RightTrafficLight;                                 // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArrowComponent*                       Direction;                                         // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMesh*>                   Buildings;                                         // 0x248(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>            TrafficLights;                                     // 0x258(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C78[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpConstantSpeed;                               // 0x274(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilReset;                                    // 0x278(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C79[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APremissionStreetView* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class ReadyOrNot.ReadyOrNotProfile
class UReadyOrNotProfile : public USaveGame
{
public:
	class FString                                SaveSlotName;                                      // 0x28(0x10)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       UserIndex;                                         // 0x38(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C88[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, struct FBasicLevelStats> LevelStats;                                        // 0x40(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                     ChallengeProgress;                                 // 0x90(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotProfile* GetDefaultObj();

	void SaveProfile();
	void SaveLevelStats(const struct FBasicLevelStats& InStats, bool* NewBestRating, bool* NewBestTime);
	void ResetProfile();
	void LoadLevelStats(struct FBasicLevelStats* OutStats, enum class ECOOPMode Mode, const class FString& MapName);
	class UReadyOrNotProfile* CreateDefaultSavegame(TSubclassOf<class UReadyOrNotProfile> ProfileClass, const class FString& LoadSlotName);
};

// 0x0 (0xE0 - 0xE0)
// Class ReadyOrNot.ReadyOrNotMultiplayerProfile
class UReadyOrNotMultiplayerProfile : public UReadyOrNotProfile
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotMultiplayerProfile* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class ReadyOrNot.ProgressionComponent
class UProgressionComponent : public UActorComponent
{
public:
	uint8                                        Pad_2C8E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProgressionComponent* GetDefaultObj();

	void AddExperience(float XP);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ProgressionRequirement
class UProgressionRequirement : public UObject
{
public:

	static class UClass* StaticClass();
	static class UProgressionRequirement* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class ReadyOrNot.LevelCompleteRequirement
class ULevelCompleteRequirement : public UProgressionRequirement
{
public:
	class FName                                  RequiredLevel;                                     // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ELevelGrade                       RequiredGrade;                                     // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C91[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelCompleteRequirement* GetDefaultObj();

	TArray<class FName> GetLevelOptions();
};

// 0x0 (0x220 - 0x220)
// Class ReadyOrNot.PropagationPoint
class APropagationPoint : public ATargetPoint
{
public:

	static class UClass* StaticClass();
	static class APropagationPoint* GetDefaultObj();

};

// 0x28 (0x248 - 0x220)
// Class ReadyOrNot.PropagationTestactor
class APropagationTestactor : public AActor
{
public:
	float                                        TickInterval;                                      // 0x220(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C93[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            Event;                                             // 0x228(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDebugMode;                                        // 0x230(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C94[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBillboardComponent*                   BillBoard;                                         // 0x238(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOcclusionType                    OcclusionType;                                     // 0x240(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPropagationType                  PropagationType;                                   // 0x241(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C95[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APropagationTestactor* GetDefaultObj();

};

// 0x30 (0x800 - 0x7D0)
// Class ReadyOrNot.PropHuntGM
class APropHuntGM : public AReadyOrNotGameMode_PVP
{
public:
	TSubclassOf<class ACharacter>                PropHuntCharacterClass;                            // 0x7D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotPlayerController*>   Hunters;                                           // 0x7D8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotPlayerController*>   Props;                                             // 0x7E8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C96[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APropHuntGM* GetDefaultObj();

};

// 0x10 (0x7F0 - 0x7E0)
// Class ReadyOrNot.PropHuntGS
class APropHuntGS : public AReadyOrNotGameState
{
public:
	TArray<class UStaticMesh*>                   AvailableProps;                                    // 0x7E0(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class APropHuntGS* GetDefaultObj();

};

// 0x0 (0x1C8 - 0x1C8)
// Class ReadyOrNot.PushCombatMove
class UPushCombatMove : public UBaseCombatMoveActivity
{
public:

	static class UClass* StaticClass();
	static class UPushCombatMove* GetDefaultObj();

};

// 0x80 (0xA50 - 0x9D0)
// Class ReadyOrNot.Quadrotor
class AQuadrotor : public ABaseItem
{
public:
	class USkeletalMeshComponent*                ViewfinderMesh;                                    // 0x9D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneCaptureComponent2D*              SceneCapture2D;                                    // 0x9D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                RenderTarget;                                      // 0x9E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bToggleDroneControl;                               // 0x9E8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C9B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterial*                             DefaultViewfinderMaterial;                         // 0x9F0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ViewfinderScreenMaterial;                          // 0x9F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             LocalPlayerCaptureResolution;                      // 0xA00(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             SimulatedPlayerCaptureResolution;                  // 0xA08(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C9C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ViewfinderSocket_Hands;                            // 0xA18(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ViewfinderSocket_Body;                             // 0xA20(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ThrowDrone_1P;                                     // 0xA28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ThrowDrone_3P;                                     // 0xA30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AQuadrotorPawn>            DronePawnClass;                                    // 0xA38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AQuadrotorPawn*                        SpawnedDrone;                                      // 0xA40(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2C9E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AQuadrotor* GetDefaultObj();

	void Server_SpawnDrone();
};

// 0xC0 (0x340 - 0x280)
// Class ReadyOrNot.QuadrotorPawn
class AQuadrotorPawn : public APawn
{
public:
	class UBoxComponent*                         FlightBox;                                         // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                DroneMesh;                                         // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                      FirstPersonCamera;                                 // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        RPM;                                               // 0x298(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RPMThrottleMultiplier;                             // 0x29C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bApplyingInput;                                    // 0x2A0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2CA3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxRPM;                                            // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdleRPM;                                           // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RPMForceScale;                                     // 0x2AC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaximumTilt;                                       // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxVelocity;                                       // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEngineOn;                                         // 0x2B8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2CA8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RotorRotation;                                     // 0x2BC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2CA9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            DroneTransform;                                    // 0x2D0(0x30)(BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              TargetRotation;                                    // 0x300(0xC)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2CAB[0x34];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AQuadrotorPawn* GetDefaultObj();

	void Server_UpdateDroneTransform(const struct FTransform& NewTransform);
	void OnRep_DroneMovement();
};

// 0x18 (0x278 - 0x260)
// Class ReadyOrNot.RadialSectorWidget
class URadialSectorWidget : public UUserWidget
{
public:
	class UPanelWidget*                          SectorImagePanel;                                  // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                SectorImage;                                       // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SectorInnerRadius;                                 // 0x270(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SectorOuterRadius;                                 // 0x274(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class URadialSectorWidget* GetDefaultObj();

	bool SetSectorColor(struct FLinearColor& NewColor, class UImage* InSectorImage);
	bool InitializeSectorWidget(float Angle, float Percentage, float InSectorInnerRadius, float InSectorOuterRadius, class UMaterialInterface* InSectorMaterial, struct FLinearColor& UnselectedColor, class UImage* InSectorImage);
};

// 0x188 (0x400 - 0x278)
// Class ReadyOrNot.RadialWidgetBase
class URadialWidgetBase : public UBaseWidget
{
public:
	FMulticastInlineDelegateProperty_            OnRadialMenuOpened_Delegate;                       // 0x278(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnRadialMenuClosed_Delegate;                       // 0x288(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                        CurrentSelectionIndex;                             // 0x298(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PreviousSelectionIndex;                            // 0x29C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Angle;                                             // 0x2A0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AngleSpread;                                       // 0x2A4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PercentageWithoutGap;                              // 0x2A8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PercentageWithGap;                                 // 0x2AC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsWheelCreated : 1;                               // Mask: 0x1, PropSize: 0x10x2B0(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsWheelRefreshed : 1;                             // Mask: 0x2, PropSize: 0x10x2B0(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bNavigatingWithGamepad : 1;                        // Mask: 0x4, PropSize: 0x10x2B0(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_224 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CCB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             RadialCursorPosition;                              // 0x2B4(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2CCC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                Angles;                                            // 0x2C0(0x10)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class URadialSectorWidget*>           Sectors;                                           // 0x2D0(0x10)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                          RadialWheel;                                       // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                RadialWheelCursor;                                 // 0x2E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerController*                     OwningPlayer;                                      // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                 OwningPawn;                                        // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      OwningPlayerCharacter;                             // 0x300(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumOfSectors;                                      // 0x308(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        OpenDelay;                                         // 0x30C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CloseDelay;                                        // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinWheelSize;                                      // 0x314(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxWheelSize;                                      // 0x318(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MinCursorAngle;                                    // 0x31C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MaxCursorAngle;                                    // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERadialCursorBehaviour            RadialCursorBehaviour;                             // 0x324(0x1)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2CCF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class URadialSectorWidget>       RadialSectorWidgetClass;                           // 0x328(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAlwaysHideRadialWheelCursor : 1;                  // Mask: 0x1, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanMoveWhileMenuIsOpened : 1;                     // Mask: 0x2, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanPerformActionsWhileMenuIsOpened : 1;           // Mask: 0x4, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanAimWhileMenuIsOpened : 1;                      // Mask: 0x8, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bShowDebugMessages : 1;                            // Mask: 0x10, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bShowMouseCursor : 1;                              // Mask: 0x20, PropSize: 0x10x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_225 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StartingSectorIndex;                               // 0x334(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        StartingSectorAngle;                               // 0x338(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IconSize;                                          // 0x33C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        IconPadding;                                       // 0x340(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SectorInnerRadius;                                 // 0x344(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        SectorOuterRadius;                                 // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GapSize;                                           // 0x34C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WheelSize;                                         // 0x350(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        WheelCursorDistanceFromCenterWheel;                // 0x354(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHideRadialWheelCursorOnMenuOpened : 1;            // Mask: 0x1, PropSize: 0x10x358(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_226 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          SelectedColor;                                     // 0x35C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          UnselectedColor;                                   // 0x36C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          UnselectableColor;                                 // 0x37C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2CD3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 Font;                                              // 0x390(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            SelectionSound;                                    // 0x398(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            MenuOpenSound;                                     // 0x3A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            MenuCloseSound;                                    // 0x3A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            MenuCloseSound_NoSelection;                        // 0x3B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URadialWidgetThemeData*                RadialWidgetTheme;                                 // 0x3B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             MousePosition;                                     // 0x3C0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                             MouseAxisDelta;                                    // 0x3C8(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MouseWheelDelta;                                   // 0x3D0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MouseAngle;                                        // 0x3D4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GamepadXAxis;                                      // 0x3D8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GamepadYAxis;                                      // 0x3DC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GamepadAngle;                                      // 0x3E0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GlobalTimeDilation;                                // 0x3E4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2CD7[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialWidgetBase* GetDefaultObj();

	bool WasForceClosed();
	void UseMouseControl();
	void UseGamepadControl();
	void UpdateSectorColor(int32 SectorIndex, const struct FLinearColor& SectorColor);
	void UpdateMouseSelectionLogic(class UWidget* RadialCursorWidget);
	void UpdateGamepadSelectionLogic(class UWidget* RadialCursorWidget);
	bool ShowWheel();
	void ShowMouseCursor();
	void Setup(struct FRadialWidgetSpawnProperties& RadialWidgetSpawnProperties);
	void SetMouseWheelDelta(float InDelta);
	void SetMousePositionToCenterScreen();
	void SetMousePosition(struct FVector2D& NewMousePosition);
	void SetGamepadYAxis(float InGamepadYAxis);
	void SetGamepadXYAxis(float InGamepadXAxis, float InGamepadYAxis);
	void SetGamepadXAxis(float InGamepadXAxis);
	void SetCloseDelay(float NewDelay);
	bool Select(int32 Index);
	void SaveMousePosition();
	void RestoreMousePosition();
	bool RefreshWheel(int32 InStartingSectorIndex);
	bool Previous();
	void OpenWheel_Internal(bool bForceRefresh);
	bool OpenWheel(bool bForceRefresh);
	void OnSectorSelected(int32 SelectedIndex);
	void OnSectorDeselected(int32 DeselectedIndex);
	bool OnRadialSectorCreated(int32 Index, float InAngle);
	void OnRadialMenuOpened__DelegateSignature();
	void OnRadialMenuOpened();
	bool OnRadialMenuInitialized();
	void OnRadialMenuCreated();
	void OnRadialMenuClosed__DelegateSignature();
	void OnRadialMenuClosed();
	bool Next();
	bool IsWheelOpen();
	bool IsWheelCursorVisible();
	bool IsWheelClosed();
	bool IsMenuOpening();
	bool IsMenuClosing();
	bool InitializeMenuProperties();
	bool InitializeMenu(int32 Index);
	bool HideWheel();
	void HideMouseCursor();
	struct FVector2D GetViewportPositionOfWidgetCenter(class UWidget* InWidget);
	struct FVector2D GetViewportPositionOfWidget(class UWidget* InWidget, const struct FVector2D& InCoordinates);
	struct FVector2D GetPixelPositionOfWidgetCenter(class UWidget* InWidget);
	struct FVector2D GetPixelPositionOfWidget(class UWidget* InWidget, const struct FVector2D& InCoordinates);
	enum class ERadialMenuCloseReason GetLastClosedReason();
	float GetDirectionToMouse(const struct FVector2D& MidWidgetCoordinates);
	float GetDirectionToGamepadAxis();
	struct FLinearColor GetCorrectSelectionColor();
	float GetCorrectAngle();
	bool ExecuteRadial();
	bool DetermineSelectedSector(float InAngle);
	void DetermineInputDevice();
	bool DeselectAll();
	bool Deselect(int32 Index);
	bool CreateWheelSector(class UPanelWidget* PanelWidget, float InAngle, float InSectorInnerRadius, float InSectorOuterRadius, class UMaterialInterface* InSectorMaterial, bool bCreateGap);
	bool CreateWheel();
	void CloseWheel_Internal(bool bExecuteRadial, bool bRemoveFromParent, bool bHideMouseCursor, enum class ERadialMenuCloseReason CloseReason);
	bool CloseWheel(bool bExecuteRadial, bool bRemoveFromParent, bool bHideMouseCursor, enum class ERadialMenuCloseReason CloseReason);
	struct FVector2D CalculatePositionOnCircleFromWidget(class UPanelWidget* PanelWidget, const struct FVector2D& Origin, const struct FVector2D& InPadding, float InAngle);
	void BeginOpenWheel();
	void BeginCloseWheel();
};

// 0xA0 (0xD0 - 0x30)
// Class ReadyOrNot.RadialWidgetThemeData
class URadialWidgetThemeData : public UDataAsset
{
public:
	class FName                                  Name;                                              // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x38(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        StartingSectorIndex;                               // 0x50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartingSectorAngle;                               // 0x54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IconSize;                                          // 0x58(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IconPadding;                                       // 0x5C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SectorInnerRadius;                                 // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SectorOuterRadius;                                 // 0x64(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GapSize;                                           // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WheelSize;                                         // 0x6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WheelCursorDistanceFromCenterWheel;                // 0x70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideRadialWheelCursorOnMenuOpened : 1;            // Mask: 0x1, PropSize: 0x10x74(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_22A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CDF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          SelectedColor;                                     // 0x78(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          UnselectedColor;                                   // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          UnselectableColor;                                 // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 Font;                                              // 0xA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SelectionSound;                                    // 0xB0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MenuOpenSound;                                     // 0xB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MenuCloseSound;                                    // 0xC0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MenuCloseSound_NoSelection;                        // 0xC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URadialWidgetThemeData* GetDefaultObj();

};

// 0x60 (0x280 - 0x220)
// Class ReadyOrNot.RandomizedShippingContainerActor
class ARandomizedShippingContainerActor : public AActor
{
public:
	class UStaticMeshComponent*                  ContainerMeshComp;                                 // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  ContainerDecalsComp;                               // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  LeftDoorDecalsComp;                                // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  RightDoorDecalsComp;                               // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>            ContainerMaterials;                                // 0x240(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                   ContainerDecals;                                   // 0x250(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                   LeftDoorDecals;                                    // 0x260(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                   RightDoorDecals;                                   // 0x270(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ARandomizedShippingContainerActor* GetDefaultObj();

	void RandomizeContainer();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReadyOrNotAIConfig
class UReadyOrNotAIConfig : public UGameplayConfig
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotAIConfig* GetDefaultObj();

	class UReadyOrNotAIConfig* Get();
};

// 0xC8 (0x148 - 0x80)
// Class ReadyOrNot.ReadyOrNotAISense_Sight
class UReadyOrNotAISense_Sight : public UAISense
{
public:
	uint8                                        Pad_2CED[0xC8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotAISense_Sight* GetDefaultObj();

};

// 0x0 (0x70 - 0x70)
// Class ReadyOrNot.ReadyOrNotAISenseConfig_Sight
class UReadyOrNotAISenseConfig_Sight : public UAISenseConfig_Sight
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotAISenseConfig_Sight* GetDefaultObj();

};

// 0x0 (0x130 - 0x130)
// Class ReadyOrNot.ReadyOrNotAISystem
class UReadyOrNotAISystem : public UAISystem
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotAISystem* GetDefaultObj();

	bool WasRecentlyInCombat(float SinceSeconds, bool bCivilianCheck);
	bool ProjectPointToNav(const struct FVector& Point, struct FVector* OutLocation, const struct FVector& Extent);
};

// 0x1A8 (0x460 - 0x2B8)
// Class ReadyOrNot.ReadyOrNotAnimInstance
class UReadyOrNotAnimInstance : public UAnimInstance
{
public:
	uint8                                        Pad_2D01[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Velocity;                                          // 0x2BC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedHorizontal;                                   // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedVertical;                                     // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSpeed;                                          // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Direction;                                         // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewPitch;                                         // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewYaw;                                           // 0x2E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsMoving;                                         // 0x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInAir;                                          // 0x2E5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D06[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              HeadLookRotation;                                  // 0x2E8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D07[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            ActorTransform;                                    // 0x300(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               VelocityLocalNormalized;                           // 0x330(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMoveDirection                    CurrentDirection;                                  // 0x33C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D0A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                WalkSpeedDatabase;                                 // 0x340(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                JogSpeedDatabase;                                  // 0x350(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                CrouchWalkSpeedDatabase;                           // 0x360(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        DirDegreesPerSecond;                               // 0x370(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ForwardDirAngle;                                   // 0x374(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BackwardDirAngle;                                  // 0x378(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftDirAngle;                                      // 0x37C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RightDirAngle;                                     // 0x380(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ForwardDirDeg;                                     // 0x384(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BackwardDirDeg;                                    // 0x388(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftDirDeg;                                        // 0x38C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RightDirDeg;                                       // 0x390(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrafeForwardDir;                                  // 0x394(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrafeBackwardDir;                                 // 0x398(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrafeLeftDir;                                     // 0x39C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrafeRightDir;                                    // 0x3A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementAlpha;                                     // 0x3A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementJogAlpha;                                  // 0x3A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementJogThreshold;                              // 0x3AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LeftFootIKLocation;                                // 0x3B0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RightFootIKLocation;                               // 0x3BC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              LeftFootIKRotation;                                // 0x3C8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              RightFootIKRotation;                               // 0x3D4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               HipOffsetVector;                                   // 0x3E0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouching;                                        // 0x3EC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStopping;                                       // 0x3ED(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D11[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              HeadRotation;                                      // 0x3F0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D12[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCarryArrestedAnimState               CarryArrestedAnimState;                            // 0x400(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bIsCarried;                                        // 0x408(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCarrying;                                       // 0x409(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMotionBlockType                  CurMotionBlock;                                    // 0x40A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFalling;                                        // 0x40B(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasPrelanded;                                     // 0x40C(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJumpRecoveryActive;                               // 0x40D(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D14[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        JumpRecoveryAnimTime;                              // 0x410(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpRecoveryStrength;                              // 0x414(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpRecoveryTime;                                  // 0x418(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D15[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DirAngle;                                          // 0x428(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirAngleDegrees;                                   // 0x42C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMoveDirectionExt                 CurrentDirectionExt;                               // 0x430(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTeamMLO;                                        // 0x431(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D18[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LeftHandIKAlpha;                                   // 0x434(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SprintAlpha;                                       // 0x438(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDeployableEquipped;                             // 0x43C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPistol;                                         // 0x43D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsRifle;                                          // 0x43E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsItem;                                           // 0x43F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bItemOneHanded;                                    // 0x440(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsC2Charge;                                       // 0x441(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLevel1MovementTrigger;                            // 0x442(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLevel2MovementTrigger;                            // 0x443(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLevel3MovementTrigger;                            // 0x444(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouchLevel1MovementTrigger;                      // 0x445(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRotationRateReached;                              // 0x446(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D19[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DeltaRotation;                                     // 0x448(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D1A[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SprintFPAlpha;                                     // 0x458(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PelvisMovementBobAlpha;                            // 0x45C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotAnimInstance* GetDefaultObj();

	float GetWeightFromSlotInversed(class FName SlotName);
	float GetWeightFromSlot(class FName SlotName);
	enum class EMoveDirectionExt GetOppositeDirectionExt(enum class EMoveDirectionExt CurrentDir);
	struct FRotator GetLookAtRotation();
	enum class EMoveDirectionExt GetCurrentDirectionExtFromYawAngle(float YawAngle);
};

// 0x40 (0x298 - 0x258)
// Class ReadyOrNot.ReadyOrNotAudioVolume
class AReadyOrNotAudioVolume : public AVolume
{
public:
	TArray<class UFMODEvent*>                    ReverbEvents;                                      // 0x258(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bLocalEffectsPlayed;                               // 0x268(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2D23[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFMODEventInstance>            EventInstances;                                    // 0x270(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UFMODAudioComponent*>           AttachedAudioComponents;                           // 0x280(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2D24[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotAudioVolume* GetDefaultObj();

	bool IsAnotherVolumeActivatedAndPlayingEventInst(const struct FFMODEventInstance& EventInst);
	bool IsAnotherVolumeActivatedAndPlayingEvent(class UFMODEvent* Event, struct FFMODEventInstance* EventInstance);
	bool HasRanOnce();
};

// 0x10 (0x50 - 0x40)
// Class ReadyOrNot.ReadyOrNotAvoidanceManager
class UReadyOrNotAvoidanceManager : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_2D28[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotAvoidanceManager* GetDefaultObj();

};

// 0x4D8 (0x500 - 0x28)
// Class ReadyOrNot.ReadyOrNotBackend
class UReadyOrNotBackend : public UObject
{
public:
	uint8                                        Pad_2D45[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SteamId;                                           // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                SteamName;                                         // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                Ticket;                                            // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                CachedDiscordOneTimeUseCode;                       // 0x68(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2D48[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        RgchToken[0x400];                                  // 0x88(0x400)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2D49[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ELoginState                       LoginState;                                        // 0x48C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2D4C[0x1B];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnStatsStarted;                                    // 0x4A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnStatsUploadProgress;                             // 0x4B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D4D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnStatsSaved;                                      // 0x4D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bProfileInProgress;                                // 0x4E8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D4F[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotBackend* GetDefaultObj();

	void TickLoginDelay();
	void StartCapturingProfile();
	void OnStatsUploadProgress__DelegateSignature(const class FString& Filename, float Percentage);
	void OnStatsStarted__DelegateSignature();
	void OnStatsSaved__DelegateSignature(bool bWasSuccessful, const class FString& StatsName);
	void OnPlayerGameFinishedMetric(const class FString& InMap, const class FString& InGameType, float InAverageFps);
	void OnGameStartedMetric(const class FString& InMap, const class FString& InGameType, int32 InNumPlayers);
	void OnGameFinishedMetric(const class FString& InMap, const class FString& InGameType, const class FString& InGameResult);
	void OnGameCrashedMetric(const class FString& InState);
	void OnFinishedCapturingProfile();
	void OnCheckedBanStatus__DelegateSignature(const class FString& BannedSteamId, bool bIsBanned, const class FString& BanReason, bool bIsMySteamId);
	void DoLogin();
};

// 0x358 (0x388 - 0x30)
// Class ReadyOrNot.ReadyOrNotCharacterAnimData
class UReadyOrNotCharacterAnimData : public UDataAsset
{
public:
	TArray<struct FCharacterTPAnim>              Surrender;                                         // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              FakeSurrender;                                     // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Spooked_Front;                                     // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Spooked_Right;                                     // 0x60(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Spooked_Left;                                      // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Spooked_Back;                                      // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Arrested;                                          // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Decision;                                          // 0xA0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              StandRelaxedFidget;                                // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              StandAlertFidget;                                  // 0xC0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_Head;                                  // 0xD0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_UpperBody;                             // 0xE0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_LowerBody;                             // 0xF0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_LeftArm;                               // 0x100(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_RightArm;                              // 0x110(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_LeftLeg;                               // 0x120(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_RightLeg;                              // 0x130(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_LeftFoot;                              // 0x140(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_RightFoot;                             // 0x150(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              HitReaction_DropWeapon;                            // 0x160(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      FireWeapon;                                        // 0x170(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      DrawWeapon;                                        // 0x178(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      HolsterWeapon;                                     // 0x180(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      ReloadWeapon;                                      // 0x188(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Head_Front;                                  // 0x190(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Head_Back;                                   // 0x1A0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Arm_Left_Front;                              // 0x1B0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Arm_Left_Back;                               // 0x1C0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Arm_Right_Front;                             // 0x1D0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Arm_Right_Back;                              // 0x1E0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Leg_Left_Front;                              // 0x1F0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Leg_Left_Back;                               // 0x200(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Leg_Right_Front;                             // 0x210(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Leg_Right_Back;                              // 0x220(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Front;                                       // 0x230(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Back;                                        // 0x240(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Head;                               // 0x250(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Chest;                              // 0x260(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Stomach;                            // 0x270(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Left_Arm;                           // 0x280(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Right_Arm;                          // 0x290(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Left_Leg;                           // 0x2A0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Death_Bleedout_Right_Leg;                          // 0x2B0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Flashbanged;                                       // 0x2C0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Stingballed;                                       // 0x2D0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Gassed;                                            // 0x2E0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Sprayed;                                           // 0x2F0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Tasered;                                           // 0x300(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              Meleed;                                            // 0x310(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      OpenDoor;                                          // 0x320(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      CloseDoor;                                         // 0x328(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterTPAnim                      Flinches;                                          // 0x330(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Calm_Turn90Left;                                   // 0x338(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Calm_Turn90Right;                                  // 0x340(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Calm_Turn180Left;                                  // 0x348(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Calm_Turn180Right;                                 // 0x350(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Alert_Turn90Left;                                  // 0x358(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Alert_Turn90Right;                                 // 0x360(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Alert_Turn180Left;                                 // 0x368(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         Alert_Turn180Right;                                // 0x370(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCharacterTPAnim>              AllAnimsList;                                      // 0x378(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotCharacterAnimData* GetDefaultObj();

};

// 0x10 (0xB00 - 0xAF0)
// Class ReadyOrNot.ReadyOrNotCharMovementComp
class UReadyOrNotCharMovementComp : public UCharacterMovementComponent
{
public:
	bool                                         bHasReplicatedAcceleration;                        // 0xAF0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D6B[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotCharMovementComp* GetDefaultObj();

};

// 0x278 (0x2A0 - 0x28)
// Class ReadyOrNot.ReadyOrNotCommandFunctionLibrary
class UReadyOrNotCommandFunctionLibrary : public UObject
{
public:
	uint8                                        Pad_2D77[0x278];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotCommandFunctionLibrary* GetDefaultObj();

	void RespondToSWATCommand(class USWATManager* SWATManager, class UWorld* World, const struct FSwatCommand& Command, enum class ETeamType TeamType, const struct FHitResult& CommandContextualData);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReadyOrNotConsoleFunctionLibrary
class UReadyOrNotConsoleFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotConsoleFunctionLibrary* GetDefaultObj();

	enum class ERuntimeDevice GetRuntimeDeviceProfile();
	void ConsoleApplyLevelSpecificSettings(const class FString& MapName, bool QualityOverFrameRate);
};

// 0xD8 (0x108 - 0x30)
// Class ReadyOrNot.ReadyOrNotCoverData
class UReadyOrNotCoverData : public UDataAsset
{
public:
	struct FCoverDataMain                        CoverData;                                         // 0x30(0xD8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotCoverData* GetDefaultObj();

};

// 0x0 (0xF0 - 0xF0)
// Class ReadyOrNot.ReadyOrNotCrowdManager
class UReadyOrNotCrowdManager : public UCrowdManager
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotCrowdManager* GetDefaultObj();

};

// 0x28 (0x58 - 0x30)
// Class ReadyOrNot.ReadyOrNotDebugSubsystem
class UReadyOrNotDebugSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                        bDrawMeleeRange : 1;                               // Mask: 0x1, PropSize: 0x10x30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInfiniteHealth : 1;                               // Mask: 0x2, PropSize: 0x10x30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlayerGodMode : 1;                                // Mask: 0x4, PropSize: 0x10x30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInfiniteAmmo : 1;                                 // Mask: 0x8, PropSize: 0x10x30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawGrenadePath : 1;                              // Mask: 0x10, PropSize: 0x10x30(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTXOn : 1;                                        // Mask: 0x20, PropSize: 0x10x30(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTX_GlobalIlluminationOn : 1;                     // Mask: 0x40, PropSize: 0x10x30(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTX_ReflectionsOn : 1;                            // Mask: 0x80, PropSize: 0x10x30(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTX_AmbientOcclusionOn : 1;                       // Mask: 0x1, PropSize: 0x10x31(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTX_ShadowsOn : 1;                                // Mask: 0x2, PropSize: 0x10x31(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRTX_TranslucencyOn : 1;                           // Mask: 0x4, PropSize: 0x10x31(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVSyncOn : 1;                                      // Mask: 0x8, PropSize: 0x10x31(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_22D : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bOverlayOn_Fibonacci;                              // 0x32(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverlayOn_LineUp;                                 // 0x33(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverlayOn_PistolLine;                             // 0x34(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverlayOn_RifleLine;                              // 0x35(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverlayOn_RuleOfThirds;                           // 0x36(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyGlobalDamageMultiplier_Weapons : 1;          // Mask: 0x1, PropSize: 0x10x37(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyGlobalDamageMultiplier_Grenades : 1;         // Mask: 0x2, PropSize: 0x10x37(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_22E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        GlobalDamageMultiplier_Weapons;                    // 0x38(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalDamageMultiplier_Grenades;                   // 0x3C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLogWeaponDamageValuesToConsole : 1;               // Mask: 0x1, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowObjectiveMarkers : 1;                         // Mask: 0x2, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowAllEvidenceActors : 1;                        // Mask: 0x4, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowHesitationBar : 1;                            // Mask: 0x8, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLogPlayerAnimationStatus : 1;                     // Mask: 0x10, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawInteractableComponents : 1;                   // Mask: 0x20, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableInteractableComponent : 1;                 // Mask: 0x40, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDebugTraces : 1;                              // Mask: 0x80, PropSize: 0x10x40(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDoorKillStunDistances : 1;                    // Mask: 0x1, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMuteFMOD : 1;                                     // Mask: 0x2, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseFMOD : 1;                                    // Mask: 0x4, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceOpenAllDoors : 1;                            // Mask: 0x8, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceCloseAllDoors : 1;                           // Mask: 0x10, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLaserEyes : 1;                                    // Mask: 0x20, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMusic : 1;                                 // Mask: 0x40, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawCoverPoints : 1;                              // Mask: 0x80, PropSize: 0x10x41(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawCoverOctree : 1;                              // Mask: 0x1, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSWATDynamicCover : 1;                             // Mask: 0x2, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuspectDynamicCover : 1;                          // Mask: 0x4, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawSWATCoverLogic : 1;                           // Mask: 0x8, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawSuspectCoverLogic : 1;                        // Mask: 0x10, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInfiniteSWATItems : 1;                            // Mask: 0x20, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowNavigation : 1;                               // Mask: 0x40, PropSize: 0x10x42(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2DC0[0x15];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotDebugSubsystem* GetDefaultObj();

	void WeakenAllEnemiesToLowHealth();
	void ToggleVSync();
	void ToggleThreatRoomNames();
	void ToggleThreatPoints();
	void ToggleThreatOctree();
	void ToggleSWATDynamicCover();
	void ToggleSuspectDynamicCover();
	void ToggleRuleOfThirdsOverlayGuide(class UMaterialInterface* InMaterial);
	void ToggleRTXSettings();
	void ToggleRifleLineOverlayGuide(class UMaterialInterface* InMaterial);
	void TogglePistolLineOverlayGuide(class UMaterialInterface* InMaterial);
	void TogglePauseFMOD();
	void ToggleObjectiveMarkers();
	void ToggleNavigation();
	void ToggleMuteFMOD();
	void ToggleMusic(bool bMusicOn);
	void ToggleLogWeaponDamage();
	void ToggleLogPlayerAnimationStatus();
	void ToggleLineUpOverlayGuide(class UMaterialInterface* InMaterial);
	void ToggleLaserEyes();
	void ToggleInteractableComponents();
	void ToggleInfiniteSWATItems();
	void ToggleInfiniteHealth();
	void ToggleInfiniteAmmo();
	void ToggleHesitationBar();
	void ToggleGrenadeDrawDebug();
	void ToggleGodMode();
	void ToggleGlobalDamageMultiplier_Weapons();
	void ToggleGlobalDamageMultiplier_Grenades();
	void ToggleFibonacciOverlayGuide(class UMaterialInterface* InMaterial);
	void ToggleDrawSWATCoverLogic();
	void ToggleDrawSuspectCoverLogic();
	void ToggleDrawMeleeRange();
	void ToggleDrawInteractableComponents();
	void ToggleDrawDoorKillStunDistances();
	void ToggleDrawDebugTraces();
	void ToggleCoverPoints();
	void ToggleCoverOctree();
	void ToggleAllEvidenceActorMarkers();
	void SetMeleeRange(class APlayerCharacter* PlayerCharacter, float NewMeleeRange);
	void SetMeleeDamage(class APlayerCharacter* PlayerCharacter, float NewMeleeDamage);
	void SetGlobalDamageMultiplier_Weapons(float NewDamageMultiplier);
	void SetGlobalDamageMultiplier_Grenades(float NewDamageMultiplier);
	void SetDebugLinesVisibility(bool bVisible);
	void RTX_ToggleTranslucency();
	void RTX_ToggleShadows();
	void RTX_ToggleReflections();
	void RTX_ToggleGlobalIllumination();
	void RTX_ToggleAmbientOcclusion();
	void OpenAllDoors();
	void IncreaseGlobalDamageMultiplier_Weapons(float Amount);
	void IncreaseGlobalDamageMultiplier_Grenades(float Amount);
	void EnableAllDebugLines();
	void DisableAllDebugLines();
	void DecreaseGlobalDamageMultiplier_Weapons(float Amount);
	void DecreaseGlobalDamageMultiplier_Grenades(float Amount);
	void CloseAllDoors();
	void AddOrUpdatePostProcessMaterial(class UMaterialInterface* InMaterial, bool* bMaterialOn);
};

// 0x38 (0x2F0 - 0x2B8)
// Class ReadyOrNot.ReadyOrNotFaceAnimInstance
class UReadyOrNotFaceAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                BodyDriverMesh;                                    // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPoseAsset*                            DefaultFaceROMData;                                // 0x2C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              FocalTargetLookRotation;                           // 0x2C8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              HeadLookRotation;                                  // 0x2D4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        EyeTargetLookLeft;                                 // 0x2E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EyeTargetLookRight;                                // 0x2E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EyeTargetLookUp;                                   // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EyeTargetLookDown;                                 // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotFaceAnimInstance* GetDefaultObj();

	class UPoseAsset* GetFaceROM();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReadyOrNotFunctionLibrary
class UReadyOrNotFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotFunctionLibrary* GetDefaultObj();

	void UnregisterTick(class AActor* Actor);
	class FString SwatCommandToString(enum class ESwatCommand SwatCommand);
	enum class EEasingFunc StringToEasingFunc(const class FString& InEasingFunc);
	void StopPostProcessEffect(struct FPostProcessSettings* PostProcessSettings, struct FPostProcessEffect* InPostProcessEffect);
	void StartPostProcessEffect_Specific(class UObject* Context, struct FPostProcessSettings* PostProcessSettings, struct FPostProcessEffectPlayer* InPostProcessEffectPlayer, class AActor* DamageCauser);
	void StartPostProcessEffect(class UObject* Context, struct FPostProcessSettings* PostProcessSettings, struct FPostProcessEffect* InPostProcessEffect, class AActor* DamageCauser);
	class FString SimulateAnimatedText(class FString& FinalString, int32& Iterator, TArray<class FString>& Chars, float& ElapsedTime, float& CurrentDelay, float DelayBetweenLetters, float DelayBetweenWords, float DeltaTime, bool* bCompleted);
	void SetupPostProcessEffect(class UObject* Context, struct FPostProcessEffect* InPostProcessEffect);
	void SetSafeZonePadding(class USafeZoneSlot* SafeZoneSlot, const struct FMargin& Padding);
	void SetPlanarReflectionScreenPercentage(class UPlanarReflectionComponent* InPlanarReflectionComponent, float NewScreenPercentage);
	void SetFMODVolume(float Volume);
	void SetDecalSize(class UDecalComponent* InDecalComponent, const struct FVector& DecalSize);
	void ServerTravel(const class FString& URL);
	void RestartGame(class UObject* WorldContextObject);
	bool ReportBadAIAction(class ABadAIAction* InBadAIActionActor, class FText& InSummary, class FText& InDescription, bool bReportToLog, bool bDrawDebugString);
	void RemoveFromParentAndClear(TArray<class UWidget*>& InWidgets);
	bool RemoveBadAIActionReport(class ABadAIAction* InBadAIActionActor, bool bReportToLog, bool bDrawDebugString);
	void RemoveAllNullElements_BP(TArray<TSubclassOf<class UClass>>& Array);
	void RegisterTick(class AActor* Actor);
	bool ProcessPostProcessEffect(class UObject* Context, struct FPostProcessSettings* PostProcessSettings, struct FPostProcessEffect* InPostProcessEffect, float DeltaTime);
	void PlayRandomFMODEventAtLocation(class UObject* WorldContextObject, const struct FVector& Location, TArray<class UFMODEvent*>& FMODEvents);
	void PlayRandomFMODEvent_2D(class UObject* WorldContextObject, TArray<class UFMODEvent*>& FMODEvents);
	void PauseFMOD(bool bPaused);
	void MuteFMOD(bool bMuted);
	bool LoadStringArrayFromFile(TArray<class FString>* StringArray, int32* ArraySize, const class FString& FullFilePath, bool ExcludeEmptyLines);
	bool IsUsingGamepad(class AReadyOrNotPlayerController* InController);
	bool IsTableMontagePlaying(class APlayerCharacter* PlayerCharacter, const class FString& AnimationName, bool bIsCrouching);
	bool IsItemInInventory(class AReadyOrNotCharacter* PlayerCharacter, enum class EItemCategory ItemCategory);
	bool IsItemEquipped(class AReadyOrNotCharacter* PlayerCharacter, enum class EItemCategory ItemCategory);
	bool IsInLobby();
	bool IsInDefusalWarmup();
	bool IsHalloween();
	bool IsFSREnabled();
	bool IsFMODBusPaused(class UFMODBus* Bus);
	bool IsFMODBusMuted(class UFMODBus* Bus);
	bool IsDLSSEnabled();
	bool IsBuildPirated();
	bool IsAprilFools();
	bool IsActorOutsideSplineEnclosure(class ASplineTrigger* InSplineTrigger, class AActor* InActor);
	bool IsActorInsideSplineEnclosure(class ASplineTrigger* InSplineTrigger, class AActor* InActor);
	struct FVector2D GetWidgetSize_Local(class UWidget* InWidget);
	struct FVector2D GetWidgetSize_Absolute(class UWidget* InWidget);
	float GetWeaponFOVOffset();
	struct FVector2D GetViewportPositionOfWidgetCenter(class UObject* WorldContext, class UWidget* InParentWidget, class UWidget* InWidget);
	struct FVector2D GetViewportPositionOfWidget(class UObject* WorldContext, class UWidget* InParentWidget, class UWidget* InWidget, const struct FVector2D& InCoordinates);
	struct FVector GetVectorFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	struct FVector2D GetVector2DFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	bool GetUseGearListInsteadOfRadial();
	class FString GetStringFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	TArray<class FString> GetStringArrayFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	TArray<class FString> GetSingleLineArrayFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	class FString GetServerNameFromCurrentSession();
	struct FRoom GetRoomDataFromName(class FName Name);
	struct FRoom GetRoomDataForLocation(const struct FVector& Location);
	class AReadyOrNotLevelScript* GetReadyOrNotLevelScript(class UObject* Context);
	class UReadyOrNotGameUserSettings* GetReadyOrNotGameUserSettings();
	class UHumanCharacterHUD_V2* GetPlayerHUD(class UObject* WorldContext);
	class APlayerCharacter* GetPlayerCharacterMutableDefaultObject(class UClass* Class);
	struct FVector2D GetPixelPositionOfWidgetCenter(class UObject* WorldContext, class UWidget* InParentWidget, class UWidget* InWidget);
	struct FVector2D GetPixelPositionOfWidget(class UObject* WorldContext, class UWidget* InParentWidget, class UWidget* InWidget, const struct FVector2D& InCoordinates);
	struct FKey GetKeyFromInputAxisName(class FName& AxisName, bool bUsingGamepad, int32 Index);
	struct FKey GetKeyFromInputActionName(class FName& ActionName, bool bOnlyGamepadKey, int32 Index);
	float GetInterfaceFovOffset(float InFov);
	int32 GetIntegerFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	struct FSlateBrush GetIconFromInputKeyName(class FName& RonKeyName);
	float GetFMODBusVolume(class UFMODBus* Bus);
	float GetFloatFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	class FName GetCurrentLevelNameForLookupTable(class UObject* Context);
	enum class ECOOPMode GetCOOPMode();
	class UClass* GetClassFromObject(class UObject* Object);
	class UObject* GetClassDefaultObject(class UClass* Class);
	enum class ERONBuildConfiguration GetBuildConfiguration();
	bool GetBoolFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	float GetAspectRatio();
	class UAnimMontage* GetAnimationFromTable(const class FString& AnimationName, bool bIsCrouching);
	TArray<class USoundBase*> GetAllSoundsInWorld();
	TArray<class FString> GetAllSectionNamesFromINIFile(const class FString& ConfigFilePath);
	TArray<class ABaseItem*> GetAllItemsInMemory();
	TArray<class UFMODBus*> GetAllFMODBusObjects();
	TArray<class UAudioComponent*> GetAllAudioComponents();
	TArray<class UFMODEvent*> GetAll2DFMODAudioEvents();
	bool FulfillsAllPostProcessRequirements(class UObject* Context, class APlayerCharacter* OwningCharacter, class AActor* DamageCauser, TArray<TSubclassOf<class UPostProcessRequirement>>& InRequirementClasses, bool bForceSuccess);
	class FText FormatPlayerActionText(struct FKey& InKey, enum class EInputEvent& InInputEvent, class FText& InActionText, const class FString& InColorLabel);
	float FindNearestFloor_BP(class AActor* InActor, TArray<class AActor*>& InActorsToIgnore, TArray<class UPrimitiveComponent*>& InComponentsToIgnore);
	TSubclassOf<class ABaseItem> FindItemClassInItemDataTable(class FName RowName);
	bool FindConfigKeyFromINIFile(const class FString& ConfigFilePath, const class FString& Section, const class FString& Key);
	class AActor* FindClosestActorFromLocation_Blueprint(struct FVector& InTestLocation, TArray<class AActor*>& InActors);
	class FString DoorCheckResultToVoiceline(enum class EDoorCheckResult DoorBreachType);
	class FString DoorBreachTypeToVoiceline_Negative(enum class EDoorBreachType DoorBreachType);
	class FString DoorBreachTypeToVoiceline(enum class EDoorBreachType DoorBreachType);
	bool DoesWidgetOverlap(class UObject* WorldContext, class UWidget* ParentWidget, class UWidget* WidgetA, class UWidget* WidgetB);
	class FString DevMenuSettingsConfigDir();
	struct FRonKey ConvertUnrealKeyToRonKey(struct FKey& InKey);
	class FString ConvertUnrealKeyNameToRonKeyName(struct FKey& InKey);
	struct FSlateBrush ConvertKeyToIcon(struct FKey& InKey);
	struct FKey ConvertIntToFKey(int32 Integer);
	struct FVector2D CalculateOffscreenPositionFromWorldLocation_Square(class UObject* WorldContext, struct FVector& WorldLocation, float ViewportOffset, bool* bIsOffscreen, float* Angle, float* ForwardDotProduct, float* RightDotProduct);
	struct FVector2D CalculateOffscreenPositionFromWorldLocation_Ellipse(class UObject* WorldContext, struct FVector& WorldLocation, float ViewportOffset, bool* bIsOffscreen, float* Angle, float* ForwardDotProduct, float* RightDotProduct);
	class FString BadAIActionConfigDir();
	bool AnyTrue(TArray<bool>& BoolArray);
	bool AnyFalse(TArray<bool>& BoolArray);
	bool AllTrue(TArray<bool>& BoolArray);
	bool AllFalse(TArray<bool>& BoolArray);
};

// 0x10 (0x48 - 0x38)
// Class ReadyOrNot.ReadyOrNotVoipSettings
class UReadyOrNotVoipSettings : public UDeveloperSettings
{
public:
	int32                                        AudibleDistance;                                   // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConversationalDistance;                            // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeIntensityByDistance;                           // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAudioFadeModel                   FadeModel;                                         // 0x44(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2EDC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotVoipSettings* GetDefaultObj();

};

// 0xE48 (0x1070 - 0x228)
// Class ReadyOrNot.ReadyOrNotGameInstance
class UReadyOrNotGameInstance : public UAdvancedFriendsGameInstance
{
public:
	uint8                                        Pad_2F24[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LobbyLevel;                                        // 0x230(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                TrainingLevel;                                     // 0x240(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULoadoutManager>           LoadoutManagerClass;                               // 0x250(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F27[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotBackend*                    ReadyOrNotBackend;                                 // 0x260(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoadoutManager*                       LoadoutManager;                                    // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioManager*                         ModioManager;                                      // 0x270(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotAIConfig*                   AIConfig;                                          // 0x278(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F29[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialParameterCollection*          GlobalMaterialParameterCollection;                 // 0x2C0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*          WeaponFOVMaterialCollection;                       // 0x2C8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F2C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMetaGameProfile*                      MetaGameProfile;                                   // 0x2D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESessionType                      SessionType;                                       // 0x2E0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F2D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class UClass>>          LazyLoadedClasses;                                 // 0x2E8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>        LazyLoadedObjects;                                 // 0x2F8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F2E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UUserWidget>               SpawnWidgetOnLevelLoad;                            // 0x310(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F2F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, bool>                            OwnedDLCMap;                                       // 0x320(0x50)(NativeAccessSpecifierPublic)
	TArray<class AActor*>                        DecalMeshActors;                                   // 0x370(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F31[0x250];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PreviouslyJoinedGames;                             // 0x5D0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        DedicatedServerGamesPlayedWithoutReturningToLobby; // 0x5E0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DedicatedServerMapIdx;                             // 0x5E4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F33[0x158];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnConnectSteamServerByIP;                          // 0x740(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F34[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHostedGame;                                       // 0x7A0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F35[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Saved_RoundTimerGameStart;                         // 0x7A4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Saved_RoundTimerBetweenMaps;                       // 0x7A8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Saved_ReinforcementTimer;                          // 0x7AC(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Saved_Timelimit;                                   // 0x7B0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Saved_RoundsPerMap;                                // 0x7B4(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Saved_Scorelimit;                                  // 0x7B8(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         Saved_AiEnabled;                                   // 0x7BC(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSinglePlayerMode;                               // 0x7BD(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F38[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ActivePauseConditions;                             // 0x7C0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHostMigrationManager*                 HostMigrationManager;                              // 0x7D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NextLevel;                                         // 0x7D8(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MainMenuDisplayMessage;                            // 0x7E8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F39[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLevelDataLookupTable                 ModdedMapLookUpData;                               // 0x800(0x788)(Edit, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F3A[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UModLevelData*>                 ModdedLevelDataAssets;                             // 0xFE8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        BuiltMapList;                                      // 0xFF8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bShowingFPS;                                       // 0x1008(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F3B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsRecordingReplay;                                // 0x100A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPlayingReplay;                                  // 0x100B(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        bReplayBeginTime;                                  // 0x100C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ReplayNumPlayers;                                  // 0x1010(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F3C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           ReplayLoadingScreen;                               // 0x1018(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReplayEvent>                  ReplayEvents;                                      // 0x1020(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F3D[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UOnlineActivityManager*                OnlineActivityManager;                             // 0x1060(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConsoleMultiplayerManager*            ConsoleMultiplayerManager;                         // 0x1068(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotGameInstance* GetDefaultObj();

	bool SupportsDisablingMods();
	void StopRecordingReplayFromBP();
	void StopRecordingReplay();
	void StopGeneratingPSOCache();
	void StartRecordingReplay();
	void StartGeneratingPSOCache();
	void SetLastJoinState(enum class ELastMenuStateBeforeJoin LastJoiNState);
	bool SetInputAudioDevice(const class FString& DeviceName, bool bShouldSave);
	void RetryLogin();
	void RenameReplay(const class FString& ReplayName, const class FString& NewFriendlyReplayName);
	void RemoveReplayLoadingScreen();
	void RemovePauseGameCondition(const class FString& PauseCondition);
	void PlayReplayFromBP(const class FString& ReplayName);
	void OpenReplayFolder();
	bool OnWindowCloseRequested();
	void OnGameServerPinged__DelegateSignature(const class FString& ConnectionAddress);
	void OnConnectSteamServer(const class FString& URL);
	bool IsSinglePlayer();
	bool IsSafeMode();
	bool IsReplaySystemEnabled();
	bool IsPublicMissionInProgress();
	bool IsNetworkCompatible(uint32 LocalNetworkVersion, uint32 RemoteNetworkVersion);
	bool IsLoggedIntoBackend();
	bool IsHostMigrationInProgress(class FString* MigratedHostToName);
	bool IsGameModded();
	void Gratr();
	class FString GetSessionTicket();
	TArray<struct FReplayEvent> GetReplayEvents();
	uint32 GetLocalNetworkVersion();
	class FString GetFriendlyGamemodeName(const class FString& UnfriendlyName);
	class FString GetDiscordOneTimeUseCode();
	TArray<class FString> GetBuiltModdedMapList();
	TArray<class FString> GetBuiltMapList();
	class FString GetBestGuessMapName(const class FString& MapName);
	bool GetBanned();
	uint8 GetBackendState();
	bool GetAvailableAudioDevices(TArray<class FString>* OutAudioDevices);
	class FString GetAndClearMainMenuDisplayMessage();
	enum class ELastMenuStateBeforeJoin GetAndClearLastJoinState();
	TArray<class AReadyOrNotGameState*> GetAllGameStates();
	TArray<class AReadyOrNotGameMode*> GetAllGameModes();
	void GenerateURLMap();
	TMap<class FString, struct FReplayData> FindReplays();
	void DeleteReplay(const class FString& ReplayName);
	void DelegateSetLocalMutedStateCompleted__DelegateSignature();
	void CreateReplayLoadingScreen();
	void ConnectSteamServer(const class FString& ServerConnect);
	void CommanderGenerateProfile(int32 Slot);
	void CommanderDeleteProfile(int32 Slot);
	void CommanderCompleteMission(const class FString& Mission);
	void BuildMapList();
	void ApplyDecalSettings();
	void AddReplayEvent(enum class EReplayEventType EventType, const struct FVector& Location, float Timestamp, const class FString& AdditionalInformation);
	void AddPauseGameCondition(const class FString& PauseCondition);
};

// 0x208 (0x440 - 0x238)
// Class ReadyOrNot.ReadyOrNotGameSession
class AReadyOrNotGameSession : public AGameSession
{
public:
	uint8                                        Pad_2F4B[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UReadyOrNotSessionData*                SessionData;                                       // 0x370(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F4C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ServerName;                                        // 0x390(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        MapList;                                           // 0x3A0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                        ReturnToLobbyAfterXMissions;                       // 0x3B0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F4D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Password;                                          // 0x3B8(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxConnections;                                    // 0x3C8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F4E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                AdminPassword;                                     // 0x3D0(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        LoggedInAdmins;                                    // 0x3E0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        BanList;                                           // 0x3F0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                        MaxTeamKillsBeforeAutoKick;                        // 0x400(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxTeamKillsBeforeAutoBan;                         // 0x404(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SecondsUntilKickedForAFK;                          // 0x408(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SecondsUntilAutostartLobby;                        // 0x40C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinPlayersForAutostart;                            // 0x410(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoundTimerGameStart;                               // 0x414(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoundTimerBetweenMaps;                             // 0x418(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReinforcementTimer;                                // 0x41C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RespawnTimer;                                      // 0x420(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Timelimit;                                         // 0x424(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Scorelimit;                                        // 0x428(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RoundsPerMap;                                      // 0x42C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAiEnabled;                                        // 0x430(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F4F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EventId;                                           // 0x434(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientNetSpeed;                                    // 0x438(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F50[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotGameSession* GetDefaultObj();

	void WriteOutConfig();
	void UpdateServerMatchmakeQueue();
	void SetServerSettings(float NewRoundTimerGameStart, float NewRoundTimerBetweenMaps, float NewReinforcementTimer, float NewTimelimit, int32 NewRoundsPerMap, int32 NewScorelimit, bool NewAiEnabled);
	void RefreshMatchmakeServer();
	void OnMatchmakingCreateParty(struct FZeuzMatchMakingStatus& MatchmakingStatus, const class FString& Error);
	void OnGetRegions(TArray<struct FZeuzRegion>& ZeuzRegions, const class FString& Error);
	void OnGetPayloadsMatchmakingCreateParty(struct FZeuzPayloadGetOut& PayloadOut, const class FString& Error);
	void OnGetPayloadServerRefresh(struct FZeuzPayloadGetOut& PayloadOut, const class FString& Error);
	void MakeLoadingMapOnlyURL(const class FString& MapURL);
	void AddServerToMatchMakeQueue();
};

// 0x190 (0x2B0 - 0x120)
// Class ReadyOrNot.ReadyOrNotGameUserSettings
class UReadyOrNotGameUserSettings : public UGameUserSettings
{
public:
	uint8                                        Pad_2F57[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MasterSoundVolume;                                 // 0x138(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MusicSoundVolume;                                  // 0x13C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UISoundVolume;                                     // 0x140(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SFXSoundVolume;                                    // 0x144(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VOIPVolume;                                        // 0x148(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVoiceType                        DefaultVOIPChannel;                                // 0x14C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHitmarkerSfxEnabled;                              // 0x14D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F5C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MouseSensitivity;                                  // 0x150(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FreelookSensitivity;                               // 0x154(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GamepadLookSensitivity;                            // 0x158(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GamepadAimSensitivity;                             // 0x15C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                TargetLocale;                                      // 0x160(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FieldOfView;                                       // 0x170(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LadderRollSensitivity;                             // 0x174(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bToggleADS;                                        // 0x178(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHoldCrouch;                                       // 0x179(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTogglePS5Gyro;                                    // 0x17A(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsingAlternateControls;                           // 0x17B(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxShellsInWorld;                                  // 0x17C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxShellLifeTime;                                  // 0x180(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMeshPainting;                                  // 0x184(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F63[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LastConnectedServerIP;                             // 0x188(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IconScale;                                         // 0x198(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickThrowScale;                                   // 0x19C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWorldDecalsEnabled;                               // 0x1A0(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F65[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WorldDecalScreenFadeSize;                          // 0x1A4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldDecalDensity;                                 // 0x1A8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FireModeDisplayOption;                             // 0x1AC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TeamViewFPS;                                       // 0x1B0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTeamViewFPSEnabled;                               // 0x1B4(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowFPS;                                          // 0x1B5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowHUD;                                          // 0x1B6(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowCompass;                                      // 0x1B7(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowWeaponHUD;                                    // 0x1B8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowMagazineHUD;                                  // 0x1B9(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowChat;                                         // 0x1BA(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableHUDSwaying;                                 // 0x1BB(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowHotkeyHints;                                  // 0x1BC(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowHealthIcons;                                  // 0x1BD(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowCommandContextHint;                           // 0x1BE(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bZoomADS;                                          // 0x1BF(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSendMapStatistics;                                // 0x1C0(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EScoreReadoutMode                 ScoreReadoutMode;                                  // 0x1C1(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      DefaultCommand;                                    // 0x1C2(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      DefaultDoorUnknownCommand;                         // 0x1C3(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      DefaultDoorOpenCommand;                            // 0x1C4(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      DefaultDoorLockedCommand;                          // 0x1C5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      DefaultDoorUnlockedCommand;                        // 0x1C6(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F6A[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DefaultCommandOption;                              // 0x1C8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ViewDistanceQuality;                               // 0x1CC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AntiAliasingQuality;                               // 0x1D0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ShadowQuality;                                     // 0x1D4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PostProcessQuality;                                // 0x1D8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TextureQuality;                                    // 0x1DC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EffectsQuality;                                    // 0x1E0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultDoorUnknownCommandOption;                   // 0x1E4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultDoorOpenCommandOption;                      // 0x1E8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultDoorLockedCommandOption;                    // 0x1EC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultDoorUnlockedCommandOption;                  // 0x1F0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCurvedHUD;                                        // 0x1F4(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         b2DReloadIcons;                                    // 0x1F5(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowPlayerNamePlates;                             // 0x1F6(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowPlayerIcon;                                   // 0x1F7(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowTeamStatus;                                   // 0x1F8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMirrorReflectionEnabled;                          // 0x1F9(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMirrorInLobbyOnly;                                // 0x1FA(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F70[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MirrorFPS;                                         // 0x1FC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PiPFPS;                                            // 0x200(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPiPFPSEnabled;                                    // 0x204(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDepthOfField;                                     // 0x205(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMotionBlur;                                       // 0x206(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F71[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MotionBlurStrength;                                // 0x208(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PiPResolutionScale;                                // 0x20C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SafeZoneX;                                         // 0x210(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SafeZoneY;                                         // 0x214(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        GraphicsPresetIndex;                               // 0x218(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowButtonPrompts;                                // 0x21C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertMousePitch;                                 // 0x21D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertMouseYaw;                                   // 0x21E(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertGamepadHorizontal;                          // 0x21F(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertGamepadVertical;                            // 0x220(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bExperimentalFeatures;                             // 0x221(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowControlsOnScreen;                             // 0x222(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowHesitationBar;                                // 0x223(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRayTracingEnabled;                                // 0x224(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRayTracingReflectionsEnabled;                     // 0x225(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRayTracingShadowsEnabled;                         // 0x226(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRayTracingAmbientOcclusionEnabled;                // 0x227(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F76[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DlssQualitySetting;                                // 0x22C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FSRQualitySetting;                                 // 0x230(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MicInputGain;                                      // 0x234(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                InputAudioDevice;                                  // 0x238(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFrameLimitEnabled;                                // 0x248(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemSelectionInterfaceType       ItemSelectionInterface;                            // 0x249(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGrenadeThrowSettingType          GrenadeThrowType;                                  // 0x24A(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EShotgunReloadType                ShotgunLoadType;                                   // 0x24B(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEmptyMagReloadType               EmptyMagReloadType;                                // 0x24C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOptiwandViewMode                 OptiwandViewMode;                                  // 0x24D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F78[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DMOAddress;                                        // 0x250(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                DMOGameMode;                                       // 0x260(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         DMOTeamType;                                       // 0x270(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F79[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMirrorReflectionSettings             MirrorReflectionSettings;                          // 0x274(0x8)(Config, NoDestructor, NativeAccessSpecifierPublic)
	enum class ENVGStyle                         NVGStyle;                                          // 0x27C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseHighReadyStyle;                                // 0x27D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBounceLightEnabled;                               // 0x27E(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFlashlightShadowsEnabled;                         // 0x27F(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bServerSideChecksum;                               // 0x280(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ReflexMode;                                        // 0x281(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReflexGameToRenderLatencyInMSEnabled;             // 0x282(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReflexGameLatencyInMSEnabled;                     // 0x283(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReflexRenderLatencyInMSEnabled;                   // 0x284(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReflexFlashIndicatorEnabled;                      // 0x285(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EColorVisionDeficiency            ColorVisionDeficiency;                             // 0x286(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F7B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ColorVisionDeficiencyStrength;                     // 0x288(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHighlightWeapons;                                 // 0x28C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWorldSpaceActionPrompts;                          // 0x28D(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F7C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterfaceAspectRatio;                              // 0x290(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableSubtitles;                                  // 0x294(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESubtitlesSize                    SubtitlesSize;                                     // 0x295(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F7E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SubtitlesLocale;                                   // 0x298(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlesBackgroundOpacity;                        // 0x2A8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlesSpeed;                                    // 0x2AC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotGameUserSettings* GetDefaultObj();

	void ResetKeybinds();
	void ResetGamepadControlsSettings();
};

// 0x10 (0x40 - 0x30)
// Class ReadyOrNot.ReadyOrNotGauntletTestController
class UReadyOrNotGauntletTestController : public UGauntletTestController
{
public:
	uint8                                        Pad_2F81[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotGauntletTestController* GetDefaultObj();

	void StopProfiling();
	void StartTesting();
};

// 0x908 (0xB30 - 0x228)
// Class ReadyOrNot.ReadyOrNotLevelScript
class AReadyOrNotLevelScript : public ALevelScriptActor
{
public:
	enum class EGenerationType                   WorldGenerationType;                               // 0x228(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F91[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterial*                             TAASharpenFilter;                                  // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        SpawnedFromNotifyActors;                           // 0x238(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        FlashlightIntensity;                               // 0x248(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FlashlightIntensityBoost;                          // 0x24C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FlashlightBouncedIntensityBoost;                   // 0x250(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F92[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ABlockingVolume*>               BlockingVolumesInLevel;                            // 0x258(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AVisibilityBlockingVolume*>     VisibilityBlockingVolumesInLevel;                  // 0x268(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotTriggerVolume*>      TriggerVolumesInLevel;                             // 0x278(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class AConversationManager*                  ConversationManager;                               // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ELightType, class FName>     LightingScenarios;                                 // 0x290(0x50)(Edit, NativeAccessSpecifierPublic)
	enum class ELightType                        LightingType;                                      // 0x2E0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawCoverDebug;                                   // 0x2E1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F95[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLevelDataLookupTable                 LevelData;                                         // 0x2E8(0x788)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class UMusicData*                            MusicData;                                         // 0xA70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                             ItemData;                                          // 0xA78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundData*                            SoundData;                                         // 0xA80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Delegate_OnOutOfBoundsTimeLimitEnded;              // 0xA88(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        OutOfBounds_MaxTimeLimit;                          // 0xA98(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutOfBoundsTimeRemaining;                          // 0xA9C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F96[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AAmbientSound*>                 AudioSourcesInLevel;                               // 0xAA8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFMODAmbientSound*>             FMODAudioSourcesInLevel;                           // 0xAB8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F97[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotAudioVolume*>        AudioVolumes;                                      // 0xAD8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ACyberneticCharacter*>          AIRequestingCover;                                 // 0xAE8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseDarkness;                                      // 0xAF8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F98[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumLightIntensityForSource;                    // 0xAFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DarknessSightRangeMultiplier;                      // 0xB00(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIncludeWorldLightsAsSources;                      // 0xB04(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRaining;                                          // 0xB05(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSpawnOfficerAI;                                   // 0xB06(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F99[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevelSequence*                        LevelSequenceMVP;                                  // 0xB08(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                        LevelSequenceTeam;                                 // 0xB10(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequencePlayer*                  LastPlayedSequence;                                // 0xB18(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F9A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotLevelScript* GetDefaultObj();

	void StopOutOfBoundsCountdown();
	void Stop3DAudioVisualizer();
	void StartOutOfBoundsCountdown();
	void Start3DAudioVisualizer();
	void PlayMVPSequence();
	void OnTeamSequenceFinished();
	void OnPiracyCheckUpdate_Private(bool bIsPirated, const class FString& ProgramDetected);
	void OnPiracyCheckUpdate(bool bIsPirated, const class FString& ProgramDetected);
	void OnOutOfBoundsTimeLimitEnded__DelegateSignature();
	void OnOutOfBoundsTimeLimitEnded();
	void OnMVPSequenceFinished();
	bool IsVisualizingAudioSources();
	bool IsOutOfBoundsEnabled();
	bool IsCountingDownForOutOfBounds();
	class AConversationManager* GetConversationManager();
	void EnableOutOfBounds();
	void DisableOutOfBounds();
	bool AllAudioVolumesTicked();
};

// 0x2A8 (0x2D0 - 0x28)
// Class ReadyOrNot.ReadyOrNotLoadoutManager
class UReadyOrNotLoadoutManager : public UObject
{
public:
	uint8                                        Pad_2FD0[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<TSubclassOf<class ABaseWeapon>, struct FStoredWeaponAttachments> StoredAttachmentsByWeapon;                         // 0x78(0x50)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPresetApplied;                                   // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAvailablePresetsChanged;                         // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2FD1[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         ActiveLoadout;                                     // 0x138(0x188)(NativeAccessSpecifierPrivate)
	enum class EEquippingSwat                    ActiveSwatMember;                                  // 0x2C0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2FD2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULoadoutManager*                       LoadoutManager;                                    // 0x2C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UReadyOrNotLoadoutManager* GetDefaultObj();

	void SetSecondaryAttachment(TSubclassOf<class UWeaponAttachment> WeaponAttachment, enum class EWeaponAttachmentType AttachmentType);
	void SetPrimaryAttachment(TSubclassOf<class UWeaponAttachment> WeaponAttachment, enum class EWeaponAttachmentType AttachmentType);
	void SetArmorMaterial(class UArmourMaterial* ArmorMaterial);
	void SetArmorCoverage(enum class EArmourCoverage ArmorCoverage);
	void SetActiveSwatMember(enum class EEquippingSwat SwatMember);
	void SetActiveSecondarySkin(TSubclassOf<class USkinComponent> Skin);
	void SetActiveSecondary(TSubclassOf<class ABaseWeapon> Secondary);
	void SetActivePrimarySkin(TSubclassOf<class USkinComponent> Skin);
	void SetActivePrimary(TSubclassOf<class ABaseWeapon> Primary);
	void SetActiveLongTactical(TSubclassOf<class ABaseItem> LongTactical);
	void SetActiveLoadoutByName(const class FString& LoadoutName);
	void SetActiveLoadout(const struct FSavedLoadout& Loadout);
	void SetActiveHeadwear(TSubclassOf<class ABaseItem> Headwear);
	void SetActiveBodyArmor(TSubclassOf<class ABaseItem> Armor);
	void SavePreset(const class FString& Name);
	void SanitizeActiveLoadout();
	void ResetLoadoutToDefault();
	enum class EEquippingSwat PreviousActiveSwatMember();
	void OnPresetApplied__DelegateSignature(const class FString& Name, struct FSavedLoadout& Loadout);
	void OnAvailablePresetsChanged__DelegateSignature();
	enum class EEquippingSwat NextActiveSwatMember();
	bool ItemIsInActiveLoadout(TSubclassOf<class ABaseItem> Item);
	void IncrementTacticalSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	void IncrementSecondarySlotCount(class FName AmmoType);
	void IncrementPrimarySlotCount(class FName AmmoType);
	void IncrementGrenadeSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	int32 GetTacticalSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	class UWeaponAttachment* GetStoredAttachmentByWeaponAndType(TSubclassOf<class ABaseWeapon> Weapon, enum class EWeaponAttachmentType Type);
	int32 GetSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	TSoftObjectPtr<class UTexture2D> GetSecondaryWeaponImage(class ABaseItem* Item);
	int32 GetSecondarySlotCount(class FName AmmoType);
	TArray<class FName> GetSecondaryAmmoTypes();
	TSoftObjectPtr<class UTexture2D> GetPrimaryWeaponImage(class ABaseItem* Item);
	int32 GetPrimarySlotCount(class FName AmmoType);
	TArray<class FName> GetPrimaryAmmoTypes();
	int32 GetPreviewTacticalSlotCount(const struct FSavedLoadout& PreviewLoadout, TSubclassOf<class ABaseItem> SlotItem);
	int32 GetPreviewSlotCount(const struct FSavedLoadout& PreviewLoadout, TSubclassOf<class ABaseItem> SlotItem);
	int32 GetPreviewSecondarySlotCount(const struct FSavedLoadout& PreviewLoadout, class FName AmmoType);
	int32 GetPreviewPrimarySlotCount(const struct FSavedLoadout& PreviewLoadout, class FName AmmoType);
	int32 GetPreviewGrenadeSlotCount(const struct FSavedLoadout& PreviewLoadout, TSubclassOf<class ABaseItem> SlotItem);
	struct FSavedLoadout GetPreset(const class FString& Name);
	int32 GetMaximumSlotCount();
	TSoftObjectPtr<class UTexture2D> GetLongTacticalItemImage(class ABaseItem* Item);
	TArray<class ABaseItem*> GetItemsByLoadoutCategory(enum class ELoadoutCategory LoadoutCategory);
	TArray<class ABaseItem*> GetHeadwears();
	TSoftObjectPtr<class UTexture2D> GetHeadwearItemImage(class ABaseItem* Item);
	int32 GetGrenadeSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	int32 GetCurrentSlotCount();
	class FText GetCurrentPresetDisplayName();
	TArray<class ABaseItem*> GetBodyArmors();
	TSoftObjectPtr<class UTexture2D> GetBodyArmorItemImage(class ABaseItem* Item);
	TArray<enum class EWeaponAttachmentType> GetAvailableAttachmentTypesByWeapon(TSubclassOf<class ABaseWeapon> BaseWeapon);
	TArray<TSubclassOf<class UWeaponAttachment>> GetAttachmentByWeaponAndType(class ABaseWeapon* Weapon, enum class EWeaponAttachmentType Type);
	TArray<class UArmourMaterial*> GetArmorMaterials();
	class FText GetArmorCoverageText(enum class EArmourCoverage Coverage);
	enum class EArmourCoverage GetArmorCoverage();
	class FText GetAmmunitionDisplayName(class FName AmmunitionName);
	class FText GetAmmunitionDescription(class FName AmmunitionName);
	class FText GetAmmunitionCaliber(class FName AmmunitionName);
	TArray<class FString> GetAllPresetNames();
	class FString GetActiveSwatMemberLabel();
	enum class EEquippingSwat GetActiveSwatMember();
	TSubclassOf<class UWeaponAttachment> GetActiveSecondaryAttachmentByType(enum class EWeaponAttachmentType AttachmentType);
	TSubclassOf<class ABaseWeapon> GetActiveSecondary();
	TSubclassOf<class UWeaponAttachment> GetActivePrimaryAttachmentByType(enum class EWeaponAttachmentType AttachmentType);
	TSubclassOf<class ABaseWeapon> GetActivePrimary();
	TSubclassOf<class ABaseItem> GetActiveLongTactical();
	struct FSavedLoadout GetActiveLoadout();
	TSubclassOf<class ABaseItem> GetActiveHeadwear();
	TSubclassOf<class ABaseItem> GetActiveBodyArmor();
	class UArmourMaterial* GetActiveArmorMaterial();
	enum class EEquippingSwat FStringToEquippingSwat(const class FString& Name);
	void DoSaveLoadout(enum class EEquippingSwat SwatMember, const struct FSavedLoadout& Loadout);
	void DoSaveActiveLoadout();
	void DeletePreset(const class FString& Name);
	void DecrementTacticalSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	void DecrementSecondarySlotCount(class FName AmmoType);
	void DecrementPrimarySlotCount(class FName AmmoType);
	void DecrementGrenadeSlotCount(TSubclassOf<class ABaseItem> SlotItem);
	bool AttachmentIsEquipped(TSubclassOf<class UWeaponAttachment> WeaponAttachment, enum class EWeaponAttachmentType AttachmentType);
	void ApplyPreset(const class FString& Name);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReadyOrNotMathLibrary
class UReadyOrNotMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotMathLibrary* GetDefaultObj();

	float WrapAngleIfOutOfBounds(float Angle, float MinBounds, float MaxBounds);
	float KeepAngleBelow360(float Angle);
	float KeepAngleAbove0(float Angle);
	float GetLastKeyTime_FloatCurve(struct FRuntimeFloatCurve& InCurve);
	struct FVector GenerateRandomLocationOnSphere(const struct FVector& Origin, float Radius);
	struct FVector2D CalculatePositionOnEllipse(const struct FVector2D& Origin, float RadiusX, float RadiusY, float Angle);
	struct FVector2D CalculatePositionOnCircle(const struct FVector2D& Origin, float Radius, float Angle);
	struct FVector CalculateLocationOnSphere(const struct FVector& Origin, float Radius, float Angle, float Phi);
};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_NoSuspects
class UNavArea_NoSuspects : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_NoSuspects* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_FlankingAvoidanceArea
class UNavArea_FlankingAvoidanceArea : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_FlankingAvoidanceArea* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_LockedDoor
class UNavArea_LockedDoor : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_LockedDoor* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_LockedDoorSuspect
class UNavArea_LockedDoorSuspect : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_LockedDoorSuspect* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_ClosedDoor
class UNavArea_ClosedDoor : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_ClosedDoor* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_TrappedDoor
class UNavArea_TrappedDoor : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_TrappedDoor* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_HasBeenOpenedDoor
class UNavArea_HasBeenOpenedDoor : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_HasBeenOpenedDoor* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_WallTraversalHole
class UNavArea_WallTraversalHole : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_WallTraversalHole* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_Player
class UNavArea_Player : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_Player* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SwatAlpha
class UNavArea_SwatAlpha : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SwatAlpha* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SwatBeta
class UNavArea_SwatBeta : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SwatBeta* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SwatCharlie
class UNavArea_SwatCharlie : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SwatCharlie* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SwatDelta
class UNavArea_SwatDelta : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SwatDelta* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CivilianA
class UNavArea_CivilianA : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CivilianA* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CivilianB
class UNavArea_CivilianB : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CivilianB* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CivilianC
class UNavArea_CivilianC : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CivilianC* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CivilianD
class UNavArea_CivilianD : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CivilianD* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CivilianE
class UNavArea_CivilianE : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CivilianE* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SuspectA
class UNavArea_SuspectA : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SuspectA* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SuspectB
class UNavArea_SuspectB : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SuspectB* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SuspectC
class UNavArea_SuspectC : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SuspectC* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SuspectD
class UNavArea_SuspectD : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SuspectD* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_SuspectE
class UNavArea_SuspectE : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_SuspectE* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavArea_CSGas
class UNavArea_CSGas : public UNavArea
{
public:

	static class UClass* StaticClass();
	static class UNavArea_CSGas* GetDefaultObj();

};

// 0x0 (0x15E0 - 0x15E0)
// Class ReadyOrNot.ReadyOrNotNavigationSystem
class UReadyOrNotNavigationSystem : public UNavigationSystemV1
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotNavigationSystem* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_DoorTest
class UNavQuery_DoorTest : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_DoorTest* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_Swat
class UNavQuery_Swat : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_Swat* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatFallIn
class UNavQuery_SwatFallIn : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatFallIn* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatBreachAndClear
class UNavQuery_SwatBreachAndClear : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatBreachAndClear* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatAlpha
class UNavQuery_SwatAlpha : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatAlpha* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatBeta
class UNavQuery_SwatBeta : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatBeta* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatCharlie
class UNavQuery_SwatCharlie : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatCharlie* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_SwatDelta
class UNavQuery_SwatDelta : public UNavQuery_Swat
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_SwatDelta* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_Civilian
class UNavQuery_Civilian : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_Civilian* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_Suspect
class UNavQuery_Suspect : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_Suspect* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_FlankingSuspect
class UNavQuery_FlankingSuspect : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_FlankingSuspect* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_GasFleeingSuspect
class UNavQuery_GasFleeingSuspect : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_GasFleeingSuspect* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_NoiseCheck
class UNavQuery_NoiseCheck : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_NoiseCheck* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_CSGas
class UNavQuery_CSGas : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_CSGas* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ReadyOrNot.NavQuery_Awareness
class UNavQuery_Awareness : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass();
	static class UNavQuery_Awareness* GetDefaultObj();

};

// 0x38 (0x288 - 0x250)
// Class ReadyOrNot.ReadyOrNotPathFollowingComp
class UReadyOrNotPathFollowingComp : public UPathFollowingComponent
{
public:
	float                                        HoleTraversalCooldown;                             // 0x250(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2FD9[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 LastUsedDoorLink;                                  // 0x268(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AWallHoleTraversal*                    LastUsedWallHole;                                  // 0x270(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavLinkCustomComponent*               LastUsedDoorLinkComp;                              // 0x278(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2FDA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotPathFollowingComp* GetDefaultObj();

	void OnHoleTraversalFinished(class UBaseActivity* Activity, class ACyberneticController* Controller);
};

// 0x0 (0x2810 - 0x2810)
// Class ReadyOrNot.ReadyOrNotPlayerCameraManager
class AReadyOrNotPlayerCameraManager : public APlayerCameraManager
{
public:

	static class UClass* StaticClass();
	static class AReadyOrNotPlayerCameraManager* GetDefaultObj();

};

// 0x4C8 (0xA48 - 0x580)
// Class ReadyOrNot.ReadyOrNotPlayerController
class AReadyOrNotPlayerController : public APlayerController
{
public:
	uint8                                        Pad_2FFF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UProgressionComponent*                 ProgressionComp;                                   // 0x588(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3000[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ServerSideChecksum;                                // 0x594(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3001[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldShowMouseCursor;                            // 0x5A4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3002[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPawnPossessed;                                   // 0x5A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnExitSettingsMenu;                                // 0x5B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnOutOfBoundsChanged;                              // 0x5C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPreClientTravel;                                 // 0x5D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_3003[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RespawnTimeLeft;                                   // 0x5F8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3004[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           TabMenuWidget;                                     // 0x600(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               TabMenuWidgetClass;                                // 0x608(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                           SubtitlesWidget;                                   // 0x610(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3005[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACameraActor*                          SpectateCamera;                                    // 0x620(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULevelStreaming*>               StreamingLevels;                                   // 0x628(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UJoinSessionCallbackProxyAdvanced*     JoinSession;                                       // 0x638(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                StreamingLevel;                                    // 0x640(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                StreamingOptions;                                  // 0x650(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3006[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ReplicatedMapList;                                 // 0x680(0x10)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMapListReplicated;                               // 0x690(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        VoteAntiSpamDebouncer;                             // 0x6A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3007[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVoteData                             MyVoteData;                                        // 0x6A8(0x30)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	bool                                         bStatsProfiledQueued;                              // 0x6D8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3008[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class UUserWidget>>       ProtectedWidgetClasses;                            // 0x6E0(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_3009[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCanOpenOptionsMenu;                               // 0x708(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_300A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, class UUserWidget*>      CreatedWidgetMap;                                  // 0x710(0x50)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_300B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FZeuzMatchMakingServerInfo            Rep_MatchmakingServerInfo;                         // 0x770(0x78)(Net, NativeAccessSpecifierPublic)
	struct FZeuzMatchMakingPartyInit             Rep_MatchmakingPartyInit;                          // 0x7E8(0xB0)(Net, NativeAccessSpecifierPublic)
	class ASwatAutomationManager*                SwatAutomationManager;                             // 0x898(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, float>                   DebugActorList;                                    // 0x8A0(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_300C[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnHudWidgetsClearedComplete;                       // 0x920(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         TestCube;                                          // 0x930(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    TestMaterial;                                      // 0x938(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_300D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bStartedCoopAsSpectator;                           // 0x948(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_300E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            LastKilledCharacter;                               // 0x950(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_300F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsReplaySpectator;                                // 0x960(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3010[0x27];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnRTXDMOChanged;                                   // 0x988(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FRChatMessage>                 ChatMessages;                                      // 0x998(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3011[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, struct FProjectileData>          ActiveProjectiles;                                 // 0x9C0(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_3012[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPlayerReadyChange;                               // 0xA18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_3013[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPauseMenu_Wrapper*                    PauseMenu;                                         // 0xA40(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AReadyOrNotPlayerController* GetDefaultObj();

	void WinCoop();
	void Vote(bool VoteYes);
	void UpdateMouseCursorVisibility();
	void UpdateAchievementProgress(const class FString& ID, float Percent);
	void UnhideAllWeaponAttachments();
	void UnhideAllSmallItemMeshes();
	void UnhideAllItemMeshes();
	void ToggleRTXDMO();
	void ToggleGodModeOnEveryone();
	void ToggleDeployMenu();
	void TestSendCrash();
	void TestMatchmakingServerRefresh();
	void TestMatchmakingServerCreateParty();
	void TeleportUp();
	void TeleportToNextRemainingAI();
	void TakeDamageExec(float DamageAmount);
	void SwapAllItemSkeletalMeshesToCubes();
	bool StreamInSession(const struct FBlueprintSessionResult& SessionResult, class ULevelStreaming** OutStreamedLevel, bool bShouldCreateLoadingScreen);
	bool StreamInLevel(const class FString& NewLevel, const class FString& Options, class ULevelStreaming** OutStreamedLevel, const struct FLevelStreamOptions& LevelStreamOptions);
	void StopVoteInput();
	void StopSwatAutomation();
	void StopSpeaking();
	void StartSwatAutomation();
	void StartSpeaking();
	void StartMatchmaking();
	void StartBleeding();
	void SpawnRandomAI(int32 Count);
	void SpawnBotsForGame(int32 BotCount);
	void SpawnAIAtLocation(const class FString& TableName, const struct FVector& Location, const struct FVector& MoveLocation);
	void SpawnAI(const class FString& TableName, int32 Count);
	void SoftWinCoop();
	void SkipTutorial();
	void ShowCoopScoreChangeWidget(float ScoreChangeValue);
	void SetTimelimit(float Time);
	void SetShouldShowMouseCursor(bool bShow);
	void SetServerPasswordOnConnection(const class FString& Password);
	void SetScorelimit(int32 Score);
	void SetRosterStressValue(float Stress);
	void SetPreferredTeamUniqueNetIdOnConnection(const class FString& UniqueId);
	void SetMousePosition(float LocationX, float LocationY);
	void SetHostMigrationComplete();
	void SetClubMusicMasterVolume(float Volume);
	void SetAllComponentsUseParentsBounds();
	void ServerStatFileStop();
	void ServerStatFileStart();
	void Server_SwapPlayersTeam(class APlayerState* Ps);
	void Server_StatFile(bool bStartStatFile);
	void Server_StartSpectating();
	void Server_StartReferendum(TSubclassOf<class AReferendum> ReferendumClass);
	void Server_StartPlayerReferendum(TSubclassOf<class APlayerReferendum> ReferendumClass, class AReadyOrNotPlayerState* TargetPlayer);
	void Server_StartMapReferendum(TSubclassOf<class AMapReferendum> ReferendumClass, const class FString& MapURL);
	void Server_SetTeamType(enum class ETeamType NewTeam);
	void Server_SetSpawn(enum class ETeamType SpawnTeam, enum class ESelectedSpawn NewSpawnPoint);
	void Server_SetReadyState(bool bReady);
	void Server_SetHasFinishedLoading();
	void Server_SetDeployableDepot(int32 NewDepot);
	void Server_SetChecksum(int32 Checksum);
	void Server_SendChatMessage(const struct FRChatMessage& ChatMessage);
	void Server_RespawnAsLobby(TSubclassOf<class ASpectatorPawn> Class, const struct FTransform& SpawnTransform);
	void Server_RequestWorldTime(float ClientTime);
	void Server_RequestLoadoutChange(const struct FSavedLoadout& Loadout);
	void Server_RemoveMarker(int32 ID);
	void Server_RemoveLine(int32 ID);
	void Server_ReleaseVIP();
	void Server_ReferendumVoteYes();
	void Server_ReferendumVoteNo();
	void Server_LoginAsAdmin(const class FString& Password);
	void Server_Equip(const class FString& ItemName);
	void Server_EnablePersonnel(int32 PersonnelNum, int32 MapPointNum);
	void Server_EnableDeployable(int32 DeployableNum);
	void Server_DisablePersonnel(int32 PersonnelNum);
	void Server_DisableDeployable(int32 DeployableNum);
	void Server_BecomeVIP();
	void Server_AdminRestartServer();
	void Server_AdminRemoveMapFromRotationByIndex(int32 Idx);
	void Server_AdminRemoveMapFromRotation(const class FString& MapURL);
	void Server_AdminNextMap();
	void Server_AdminKickPlayer(class APlayerState* KickingPlayerState, class FText& ReasonOveride);
	void Server_AdminBanPlayer(class APlayerState* BanningPlayerState);
	void Server_AdminAddMapToRotationAtIndex(const class FString& MapURL, int32 Idx);
	void Server_AdminAddMapToRotation(const class FString& MapURL);
	void Server_AddMarker(struct FPlanningMarker& Marker);
	void Server_AddLine(struct FPlanningLine& Line);
	void SendChatMessage(const struct FRChatMessage& ChatMessage);
	void SavePerformanceStats();
	bool SaveFileToUserCloud(const class FString& FullPath);
	void SaveChatMessage(const struct FRChatMessage& Message);
	void RosterInstantFinishStatus();
	void RetrieveChatLog(TArray<struct FRChatMessage>* OutMessages);
	void ResetKeybinds();
	void ResetDoorLockStateKnowledge();
	void ResetAI(float Range);
	void RequestVoteInput(const struct FVoteData& CurrentVoteData);
	void ReportAllInstancedStaticMeshes();
	void ReplicateMapListIfAdmin();
	bool RemoveWidgetFromStack(const class FString& WidgetName);
	void RemoveWeaponSkin();
	void RemoveHUD();
	void RemoveCharacterSkin();
	void ReleaseVIP();
	void ReadyUp_Failsafe();
	void ReadyUp();
	void PrintGPUBrand();
	void PrintAllSceneComponentWhoseOriginIsZero();
	void PlayDeadAllEnemies();
	void PlayAnimationFromLookupTable(const class FString& AnimationRowName);
	void PassMouseControlToValidWidget();
	void OptimizeWorld();
	void OnStreamedLevelLoadedRemovingLoadingScreen();
	void OnStreamedLevelLoadedExecuteOpen();
	void OnStreamedLevelLoadedComplete();
	void OnSessionJoinSuccess();
	void OnSessionJoinFailed();
	void OnSaveLoadout();
	void OnRTXDMOChanged__DelegateSignature(bool bRTXOn);
	void OnRep_Maplist();
	void OnPreClientTravel__DelegateSignature();
	void OnPlayerReadyChange__DelegateSignature(class AReadyOrNotPlayerController* PlayerController, bool bReady);
	void OnPawnPossessed__DelegateSignature(class APawn* PossessedPawn);
	void OnOutOfBoundsChanged__DelegateSignature(bool bIsOutOfBounds);
	void OnMapListReplicated__DelegateSignature(TArray<class FString>& MapList);
	void OnlyCastLocalPlayerDynamicShadow();
	void OnLocallyFiredProjectile(class ABulletProjectile* Projectile, int32 ProjectileIdentifier);
	void OnLevelOpen();
	void OnHudWidgetsCleared__DelegateSignature();
	void OnExitSettingsMenu__DelegateSignature();
	void NotifyRespawnTime(float RespawnTime);
	void Multicast_SetPersonnelAtPoint(int32 PersonnelNum, int32 MapPointNum);
	void Multicast_RemovePersonnelAtPoint(int32 PersonnelNum);
	void Multicast_ForcePlanningRefresh();
	void MakeCrash();
	void KnockoutAllEnemies();
	void KillSWATTeam();
	void KillAllSuspects();
	void KillAllCivilians();
	void KillAll(enum class ETeamType TargetTeam);
	void Kill(float Time);
	bool IsOverlayHudVisible();
	bool IsConsoleTarget();
	bool IsCameraFading();
	void InternalSaveStats();
	void HideAllWeaponAttachments();
	void HideAllSmallItemMeshes();
	void HideAllItemMeshes();
	void GiveSWATRam();
	void GibAllComponents();
	enum class EVoteState GetVote();
	enum class ETeamType GetTeamType();
	float GetRespawnTimeRemaining();
	TArray<class FString> GetReplicatedMapRotation();
	class FString GetPrefferredTeamUniqueNetIdOnConnection();
	class FString GetPasswordOnConnection();
	void GetNetworkConnectionStatus(float* AvgLag, int32* OutLostPackets, int32* InLostPackets, int32* OutLostPacketPrcnt, int32* InLostPacketPrcnt);
	void FreeVIP();
	void FlushDeadBodies();
	void ExecuteSweepTraceSinglePerfTest();
	void ExecuteSweepTraceMultiPerfTest();
	void ExecuteLineTracePerfTest();
	void EscapeMenu();
	void EquipAndDropEvidence();
	void Equip(const class FString& ItemName);
	void EndVote();
	void EnableWeaponFovShader();
	void EnableScopeAlignmentTool();
	void EnablePlayerInput();
	void DropAllSuspectWeapons();
	void DownloadBlacklistHashes();
	void DisplayAllPlayingFMODEvents();
	void DisableWeaponFovShader();
	void DisableSkeletalMeshShadowCasting();
	void DisableForceShowMouseCursor();
	void DisableAllMaterials();
	void DisableAllItemTicks();
	void DisableAllItemMaterials();
	void DestroySwatTeam();
	void DestroySwatInventoryItems();
	void DestroySwatControllers();
	void DestroySwatAnimation();
	void DestroyEverything();
	void DestroyAllWorldDynamicItems();
	void DestroyAllWidgets();
	void DestroyAllSuspects();
	void DestroyAllLights();
	void DestroyAllItems();
	void DestroyAllItemMeshes();
	void DestroyAllExceptClosestDoor();
	void DestroyAllExceptClosestCharacter();
	void DestroyAllDynamicLights();
	void DestroyAllDecals();
	void DestroyAllAI();
	void DestroyAllActorsOfName(const class FString& Name);
	void DeleteAnyNonMeshComponents();
	void DebugMigrateHost();
	void DebugClientStartHostMigration();
	class UUserWidget* CreateWidgetForPlayer(const class FString& WidgetName, bool bForceAddToWidgetStack, bool bIsEscapeKey);
	void ClientStartOnlineGame();
	void ClientSpawned();
	void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void ClientSetNetSpeed(int32 NewNetSpeed);
	void ClientJoinVoice(const class FString& OnlineSessionId, int32& TeamNum);
	void ClientEndOnlineGame();
	void Client_UpdateWorldTime(float ServerTime, float SentClientTime);
	void Client_SetViewTargetWithBlend(class APawn* NewViewTarget);
	void Client_SetControlRotation(const struct FRotator& NewControlRotation);
	void Client_RemoveWidget(TSubclassOf<class UUserWidget> Widget);
	void Client_PostLogin();
	void Client_OnProjectileValidation(int32 ProjectileSeed, enum class EServerValidationState Validation);
	void Client_LocalReadyStateChanged(bool bReady);
	void Client_HideHUDWidgets();
	void Client_GetStats();
	void Client_DisableUIMouse();
	void Client_CreateWidget(const class FString& WidgetName, bool bForceAddToWidgetStack, bool bIsEscapeKey);
	void Client_CreateMessageDisplay(const class FString& MessageTxt, const class FString& ButtonTxt);
	void Client_CreateLoadingScreen(const class FString& Map, const class FString& Mode, const class FString& SessionName, bool bIsSeamlessTravel);
	void Client_ClearHUDWidgets();
	void ChangeInputMode(bool bGameMode, bool bMouseCursorEnabled, class UWidget* Widget);
	bool CanSetSpawn(enum class ETeamType Team, enum class ESelectedSpawn NewSpawnPoint, bool bSameSpawn);
	bool CanSetDepotTo(int32 NewDepot, bool bSameDepot);
	bool CanEnablePersonnel(int32 PersonnelNum, int32 MapPointNum);
	bool CanEnableDeployable(int32 DeployableNum);
	bool CanDisablePersonnel(int32 PersonnelNum);
	bool CanDisableDeployable(int32 DeployableNum);
	void BP_ReturnToMenu(class FText& ReturnReason);
	void BP_HandleMessage(const struct FRChatMessage& ChatMessage);
	void BP_ClientWasKicked(class FText& KickReason);
	void BeginVote(const class FString& Reason, const class FString& Question, bool bCanVoteNo);
	void ArrestOne();
	void ArrestAllSuspects();
	void ArrestAllCivilians();
	void ArrestAll(enum class ETeamType TargetTeam);
	void ApplyWeaponSkin(const class FString& SkinName);
	void ApplyCharacterSkin(const class FString& SkinName);
	void AIStopHide();
	void AIHide();
	void AIEquipSecondary();
	void AIEquipPrimary();
	void AcknowledgeVote(const struct FVoteData& CurrentVoteData);
	void AbortCover();
};

// 0x700 (0xA20 - 0x320)
// Class ReadyOrNot.ReadyOrNotPlayerState
class AReadyOrNotPlayerState : public APlayerState
{
public:
	uint8                                        Pad_3019[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasFinishedLoading;                               // 0x338(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_301A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Kills;                                             // 0x33C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        KillsThisLife;                                     // 0x340(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TeamKills;                                         // 0x344(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Arrests;                                           // 0x348(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TimesArrested;                                     // 0x34C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ArrestsThisLife;                                   // 0x350(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Objectives;                                        // 0x354(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Reports;                                           // 0x358(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Evidence;                                          // 0x35C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEvidenceActor*>                EvidenceActorsInPossession;                        // 0x360(0x10)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_301B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      LastCharacter;                                     // 0x378(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DeathDamageType;                                   // 0x380(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseMagazineWeapon*                   DeathWeapon;                                       // 0x388(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFireMode                         LastFireMode;                                      // 0x390(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeadToPointDamage;                                // 0x391(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_301C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHitResult                            DeathTraceHit;                                     // 0x394(0x88)(BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_301D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      DeathKiller;                                       // 0x420(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Deaths;                                            // 0x428(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Incapacitations;                                   // 0x42C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageDealt;                                       // 0x430(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageReceived;                                    // 0x434(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                PlayerSpawnTag;                                    // 0x438(0x10)(BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_301E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BulletsFired;                                      // 0x44C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BulletsFiredThisLife;                              // 0x450(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         Team;                                              // 0x454(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_301F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         ServerSavedLoadout;                                // 0x458(0x188)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlayerLoadoutChanged;                            // 0x5E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_3020[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bReady;                                            // 0x5F1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSquadLeader;                                      // 0x5F2(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3021[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSavedLoadout                         LastLoadout;                                       // 0x5F8(0x188)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	float                                        PointsFromKills;                                   // 0x780(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PointsFromDamage;                                  // 0x784(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PointsFromArrests;                                 // 0x788(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PointsFromObjective;                               // 0x78C(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PointsFromReportingKills;                          // 0x790(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PointsFromReportingArrests;                        // 0x794(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInGame;                                         // 0x798(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJoinInProgress;                                   // 0x799(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsVIP;                                            // 0x79A(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWasVIP;                                           // 0x79B(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        GrenadesThrown;                                    // 0x79C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalYells;                                        // 0x7A0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumberOrdersGiven;                                 // 0x7A4(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BulletsHit;                                        // 0x7A8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BulletsHitThisLife;                                // 0x7AC(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Headshots;                                         // 0x7B0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeAlive;                                         // 0x7B4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3022[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EVoiceType                        VoiceType;                                         // 0x7C0(0x1)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsTalking;                                        // 0x7C1(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3023[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnVoiceChannelChanged;                             // 0x7C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3024[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bTorsoInjured;                                     // 0x7E0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeftArmInjured;                                   // 0x7E1(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRightArmInjured;                                  // 0x7E2(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeftLegInjured;                                   // 0x7E3(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRightLegInjured;                                  // 0x7E4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHeadInjured;                                      // 0x7E5(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3025[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BulletsBlocked;                                    // 0x7E8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HitsReceived;                                      // 0x7EC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3026[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsReplaySpectator;                                // 0x800(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3027[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PlanningPlayerNumber;                              // 0x804(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlanningDrawingArray                 DrawingArray;                                      // 0x808(0x118)(Net, NativeAccessSpecifierPublic)
	struct FPlanningDrawing                      CurrentDrawing;                                    // 0x920(0x28)(Net, NativeAccessSpecifierPublic)
	struct FSavedCustomization                   Customization;                                     // 0x948(0xD0)(Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                        Pad_3028[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotPlayerState* GetDefaultObj();

	void UpdateScore();
	void SetTeam(enum class ETeamType NewTeam);
	void SetReady(bool bIsReady, const struct FSavedLoadout& NewLoadout);
	void SetIsTalking(bool bNewTalking);
	void ServerSetJoinedOnSquadLeader();
	void Server_UpdatePlayerSpawnTag(const class FString& NewTag);
	void Server_UpdateDrawing(const struct FVector2D& NewPoint);
	void Server_StartDrawing(int32 Floor, const struct FVector2D& StartingPoint);
	void Server_SetVoiceType(enum class EVoiceType NewVoiceType);
	void Server_SetTeam(enum class ETeamType NewTeam);
	void Server_SetReady(bool bIsReady, const struct FSavedLoadout& NewLoadout);
	void Server_SetPlayerName(class FName NewPlayerName);
	void Server_SetLoadout(const struct FSavedLoadout& NewLoadout);
	void Server_SetIsInGame(bool bNewIsInGame);
	void Server_SetCustomization(const struct FSavedCustomization& InCustomization);
	void Server_SendUnlockedDLC(enum class EGameVersionRestriction Dlc);
	void Server_FinishDrawing();
	void ResetBulletsFired();
	void OnVoiceChannelChanged__DelegateSignature();
	void OnRep_VoiceType();
	void OnRep_UpdateServerSavedLoadout();
	void OnRep_Customization();
	void OnPlayerLoadoutChanged__DelegateSignature(const struct FSavedLoadout& NewLoadout);
	void Notify_PendingChangeTeam(enum class ETeamType NewTeamType);
	bool IsVipPlayerState();
	bool IsTalking();
	bool IsSquadLeader();
	bool IsOwnerOfPlayerState();
	void IncrementBulletsFired(class ABaseWeapon* Weapon);
	bool HasEveryoneFinishedLoading(int32* OutTotal, int32* OutLoading, int32* OutLoaded);
	enum class EVoiceType GetVoiceType();
	enum class ETeamType GetTeam();
	int32 GetPlanningPlayerNumber();
	enum class ETeamType GetPendingTeam();
	void GetNetworkStatus(float* AvgLag);
	int32 GetKillCount();
	int32 GetDeathCount();
};

// 0x8 (0x5B0 - 0x5A8)
// Class ReadyOrNot.ReadyOrNotRecastNavMesh
class AReadyOrNotRecastNavMesh : public ANotifyingRecastNavMesh
{
public:
	bool                                         bDrawStairPoints;                                  // 0x5A8(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3029[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReadyOrNotRecastNavMesh* GetDefaultObj();

};

// 0x210 (0x250 - 0x40)
// Class ReadyOrNot.ReadyOrNotSignificanceManager
class UReadyOrNotSignificanceManager : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_302A[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        ActorsMadeIrrelevantThisFrame;                     // 0x58(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        ActorsMadeRelevantThisFrame;                       // 0x68(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        ActorsMadeIrrelevant;                              // 0x78(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_302B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        ActorsRelevantToSignificance;                      // 0x90(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AReadyOrNotCharacter*>          CharactersRelevantToSignificance;                  // 0xA0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class USkeletalMeshComponent*, class USkeletalMesh*> SkeletalMeshLookupMap;                             // 0xB0(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class USceneComponent*, struct FOptimizationAttachmentData> SceneCompAttachmentData;                           // 0x100(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class UStaticMeshComponent*, class UStaticMesh*> StaticMeshLookupMap;                               // 0x150(0x50)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class AReadyOrNotCharacter*>          IrrelevantPlayerCharacters;                        // 0x1A0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_302C[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTransform>                    RelevantViewpoints;                                // 0x220(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                        PlayerViewTargets;                                 // 0x230(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_302D[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotSignificanceManager* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class ReadyOrNot.ReadyOrNotSpinTestController
class UReadyOrNotSpinTestController : public UGauntletTestController
{
public:
	uint8                                        Pad_302E[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotSpinTestController* GetDefaultObj();

	void StopProfiling();
	void StartTesting();
	void On60FPSTick();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReadyOrNotStatics
class UReadyOrNotStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UReadyOrNotStatics* GetDefaultObj();

	class AReadyOrNotPlayerController* GetReadyOrNotPlayerController();
	class AReadyOrNotLevelScript* GetReadyOrNotLevelScript();
	class AReadyOrNotGameState* GetReadyOrNotGameState();
	class AReadyOrNotGameMode* GetReadyOrNotGameMode();
	class UReadyOrNotGameInstance* GetReadyOrNotGameInstance();
	class AConversationManager* GetConversationManager();
	bool DoesMapExist(const class FString& Map);
};

// 0xB0 (0xD8 - 0x28)
// Class ReadyOrNot.ReadyOrNotVoiceConfig
class UReadyOrNotVoiceConfig : public UGameplayConfig
{
public:
	TMap<class FString, struct FSequencedVOLookup> SequencedLookup;                                   // 0x28(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3030[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReadyOrNotVoiceConfig* GetDefaultObj();

	class UReadyOrNotVoiceConfig* Get();
};

// 0x1048 (0x1078 - 0x30)
// Class ReadyOrNot.ReadyOrNotWeaponAnimData
class UReadyOrNotWeaponAnimData : public UDataAsset
{
public:
	class UAnimSequenceBase*                     IdlePose_FP;                                       // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_FP;                                           // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Run_FP;                                            // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Walk_FP;                                           // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Run_Limp_FP;                                       // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Walk_Limp_FP;                                      // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                       Look_BS_FP;                                        // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Lowered_Up_Pose_FP;                                // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Lowered_Down_Pose_FP;                              // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     ADS_Run_FP;                                        // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     ADS_Walk_FP;                                       // 0x80(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     ADS_Run_Limp_FP;                                   // 0x88(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     ADS_Walk_Limp_FP;                                  // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_AFG_FP;                                   // 0x98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_VFG_FP;                                   // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_HSTOP_FP;                                 // 0xA8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Low_TP;                                   // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Up_TP;                                    // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Shld_TP;                                  // 0xC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Sights_TP;                                // 0xC8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Ret_TP;                                   // 0xD0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_Ovr_TP;                                   // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Low_TP;                            // 0xE0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Up_TP;                             // 0xE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Shld_TP;                           // 0xF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Sights_TP;                         // 0xF8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Ret_TP;                            // 0x100(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_IdlePose_Ovr_TP;                            // 0x108(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload;                                            // 0x110(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReloadEmpty;                                       // 0x130(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload;                                     // 0x150(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_ReloadEmpty;                                // 0x170(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Tactical_Reload;                                   // 0x190(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Tactical_ReloadEmpty;                              // 0x1B0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   ShellRack_Reload;                                  // 0x1D0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   ShellRack_ReloadEmpty;                             // 0x1E0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   ShellRack_ReloadRack;                              // 0x1F0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Tactical_Crouch_Reload;                            // 0x200(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Tactical_Crouch_ReloadEmpty;                       // 0x220(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           MeleeHit;                                          // 0x240(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           MeleeMiss;                                         // 0x260(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSelect_Auto;                                   // 0x280(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSelect_Burst;                                  // 0x2A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSelect_Semi;                                   // 0x2C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSelect_Safe;                                   // 0x2E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSelect_Auto;                            // 0x300(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSelect_Burst;                           // 0x320(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSelect_Semi;                            // 0x340(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSelect_Safe;                            // 0x360(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Start;                                      // 0x380(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Loop;                                       // 0x3A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_End;                                        // 0x3C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Start_Empty;                                // 0x3E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Loop_Empty;                                 // 0x400(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_End_Empty;                                  // 0x420(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_Start;                               // 0x440(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_Loop;                                // 0x460(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_End;                                 // 0x480(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_Start_Empty;                         // 0x4A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_Loop_Empty;                          // 0x4C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Reload_End_Empty;                           // 0x4E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           MagazineCheck;                                     // 0x500(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_MagazineCheck;                              // 0x520(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           MagazineCheckSights;                               // 0x540(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_MagazineCheckSights;                        // 0x560(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   FireSingle;                                        // 0x580(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   FireSingleSights;                                  // 0x590(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSingleLast;                                    // 0x5A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireSingleSightsLast;                              // 0x5C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           DryFire;                                           // 0x5E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   Crouch_FireSingle;                                 // 0x600(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeaponAnim>                   Crouch_FireSingleSights;                           // 0x610(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSingleLast;                             // 0x620(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireSingleSightsLast;                       // 0x640(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Dryfire;                                    // 0x660(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireLoop;                                          // 0x680(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireLoopEnd;                                       // 0x6A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireLoopSights;                                    // 0x6C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           FireLoopSightsEnd;                                 // 0x6E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireLoop;                                   // 0x700(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireLoopEnd;                                // 0x720(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireLoopSights;                             // 0x740(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_FireLoopSightsEnd;                          // 0x760(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Draw;                                              // 0x780(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           DrawFirst;                                         // 0x7A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Draw;                                       // 0x7C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_DrawFirst;                                  // 0x7E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Holster;                                           // 0x800(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Holster;                                    // 0x820(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           PullPin;                                           // 0x840(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Throw;                                             // 0x860(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           PullPinUnderarm;                                   // 0x880(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ThrowUnderarm;                                     // 0x8A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_PullPin;                                    // 0x8C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_Throw;                                      // 0x8E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_PullPinUnderarm;                            // 0x900(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_ThrowUnderarm;                              // 0x920(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           QuickThrow_PinPull;                                // 0x940(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Quickthrow_Throw;                                  // 0x960(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_QuickThrow_PinPull;                         // 0x980(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_QuickThrow_Throw;                           // 0x9A0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           QuickThrow_Fast;                                   // 0x9C0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_QuickThrow_Fast;                            // 0x9E0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Use;                                     // 0xA00(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Use_End;                                 // 0xA20(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Cutters_To_Lockpick;                     // 0xA40(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Cutters_To_Knife;                        // 0xA60(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Lockpick_To_Cutters;                     // 0xA80(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Lockpick_To_Knife;                       // 0xAA0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Knife_To_Lockpick;                       // 0xAC0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Multitool_Knife_To_Cutters;                        // 0xAE0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Optiwand_Start_Screening;                          // 0xB00(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Optiwand_End_Screening;                            // 0xB20(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Charge_Valid_Plant_Start;                          // 0xB40(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Charge_Valid_Plant_End;                            // 0xB60(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           PlantCharge;                                       // 0xB80(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           DetonateCharge;                                    // 0xBA0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           EnableNVG;                                         // 0xBC0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           DisableNVG;                                        // 0xBE0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ShieldDownToUp;                                    // 0xC00(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ShieldUpToDown;                                    // 0xC20(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_ShieldDownToUp;                             // 0xC40(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Crouch_ShieldUpToDown;                             // 0xC60(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ShieldHit;                                         // 0xC80(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           TabletDownToUp;                                    // 0xCA0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           TabletUpToDown;                                    // 0xCC0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           TabletSwitchCameraDown;                            // 0xCE0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           TabletSwitchCameraUp;                              // 0xD00(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           EvidencePickup;                                    // 0xD20(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Yell;                                              // 0xD40(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           RadioSelect;                                       // 0xD60(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bRadioUsesNotifies;                                // 0xD80(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3031[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWeaponAnim                           DoorPush;                                          // 0xD88(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ButtonPush;                                        // 0xDA8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           WeaponClearing;                                    // 0xDC8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToSting;                                      // 0xDE8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToFlash;                                      // 0xE08(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToTaser;                                      // 0xE28(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToGas;                                        // 0xE48(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToPepperSpray;                                // 0xE68(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToSting_End;                                  // 0xE88(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToFlash_End;                                  // 0xEA8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToTaser_End;                                  // 0xEC8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToGas_End;                                    // 0xEE8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           ReactToPepperSpray_End;                            // 0xF08(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Level_01;                                   // 0xF28(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Level_02;                                   // 0xF48(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Reload_Level_03;                                   // 0xF68(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Recoil_Level_01;                                   // 0xF88(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Recoil_Level_02;                                   // 0xFA8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnim                           Recoil_Level_03;                                   // 0xFC8(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_VFG_Body_FP_Fire;                             // 0xFE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_VFG_Body_FP_Fire_Last;                        // 0xFF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_VFG_Body_FP_Fire_Aim;                         // 0xFF8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_VFG_Body_FP_Fire_Aim_Last;                    // 0x1000(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_AFG_Body_FP_Fire;                             // 0x1008(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_AFG_Body_FP_Fire_Last;                        // 0x1010(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_AFG_Body_FP_Fire_Aim;                         // 0x1018(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Grip_AFG_Body_FP_Fire_Aim_Last;                    // 0x1020(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Reload_FP_Ads;                                     // 0x1028(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ReloadEmpty_FP_Ads;                                // 0x1030(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Tactical_Reload_FP_Ads;                            // 0x1038(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          Tactical_ReloadEmpty_FP_Ads;                       // 0x1040(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEmptyReload;                                      // 0x1048(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasRetentionAdditives;                            // 0x1049(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasLoweredAdditives;                              // 0x104A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasSightAdditives;                                // 0x104B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideFireAnimForGrip;                          // 0x104C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3032[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequenceBase*                     IdlePose_AFG_TP;                                   // 0x1050(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_VFG_TP;                                   // 0x1058(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_HSTOP_TP;                                 // 0x1060(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_AI_Calm;                                  // 0x1068(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     IdlePose_AI_Aiming;                                // 0x1070(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReadyOrNotWeaponAnimData* GetDefaultObj();

};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.RealtimeWidget
class URealtimeWidget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class URealtimeWidget* GetDefaultObj();

	void OnSynchronizeProperties();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ReceiveAISenseUpdates
class IReceiveAISenseUpdates : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IReceiveAISenseUpdates* GetDefaultObj();

	void OnAIPerceptionSense(class ACyberneticController* InSenseController, const struct FAIStimulus& Stimulus, class AActor** OutOverrideSensedActor);
	void OnAIHearingSense(class ACyberneticController* InSenseController, const struct FAIStimulus& Stimulus, class AActor** OutOverrideSensedActor);
	void OnAIDamageSense(class ACyberneticController* InSenseController, const struct FAIStimulus& Stimulus, class AActor** OutOverrideSensedActor);
};

// 0x10 (0x1A8 - 0x198)
// Class ReadyOrNot.ReloadSafelyActivity
class UReloadSafelyActivity : public UBaseActivity
{
public:
	class UAnimMontage*                          ReloadMontage;                                     // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3038[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReloadSafelyActivity* GetDefaultObj();

	void ReloadFinished();
};

// 0xB18 (0xDC0 - 0x2A8)
// Class ReadyOrNot.ReplayCameraPawn
class AReplayCameraPawn : public ASpectatorPawn
{
public:
	class UCameraComponent*                      PawnCamera;                                        // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplaySpringArm*                      SpringArm;                                         // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFloatingPawnMovement*                 FloatingPawnMovement;                              // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x2C0(0x560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                  DefaultPostProcessSettings;                        // 0x820(0x560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                        Sensitivity;                                       // 0xD80(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RollAmount;                                        // 0xD84(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_303B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InitialMaxSpeed;                                   // 0xD8C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialAcceleration;                               // 0xD90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialDeceleration;                               // 0xD94(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_303C[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReplayCameraPawn* GetDefaultObj();

};

// 0xD8 (0xB20 - 0xA48)
// Class ReadyOrNot.ReplayController
class AReplayController : public AReadyOrNotPlayerController
{
public:
	TArray<class AActor*>                        SelectableActors;                                  // 0xA48(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                SelectedActor;                                     // 0xA58(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SelectedActorIndex;                                // 0xA60(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsReplayMenuOpen;                                 // 0xA64(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_303F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReplaySplineActor*                    ReplaySplineActor;                                 // 0xA68(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TotalSplineTime;                                   // 0xA70(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFollowingSpline;                                // 0xA74(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3040[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DeltaSplineTime;                                   // 0xA78(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESplineRotation                   SplineRotationType;                                // 0xA7C(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3041[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UReplayControls*                       ReplayControls;                                    // 0xA80(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECameraState                      CurrentCameraState;                                // 0xA88(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3043[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AdjustableVerticalOffset;                          // 0xA8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMountedTransformLock;                             // 0xA90(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3044[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                MountedMesh;                                       // 0xA98(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MountedBoneName;                                   // 0xAA0(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReplaySubMesh>                MountedSubMeshes;                                  // 0xAB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                               MountedLocationOffset;                             // 0xAC0(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              MountedRotationOffset;                             // 0xACC(0xC)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3045[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUserWidget*                           EscapeWidgetInstance;                              // 0xAF0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3046[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AReplayController* GetDefaultObj();

	void ToggleHUD();
	void StopFollowingSpline();
	void SkipReplayForward();
	void SkipReplayBackward();
	void SetViewOverride();
	bool SetPausedState(bool bDoPause, bool bMuteAudio);
	bool SetPaused(bool bDoPause);
	void SetCurrentReplayTimeToSeconds(float Seconds);
	void SetCurrentReplayPlayRate(float PlayRate);
	void RevertPreviousCameraState();
	void RemoveSplinePoint(int32 Index);
	void RefreshSelectableActors();
	void PreviousSelectableActor();
	void PreviousActor();
	void PauseReplay();
	void OnScrubInitiated();
	void OnPostDynamicLoad();
	void OnPlayerChangeCameraState(enum class ECameraState NewState);
	void OnPauseMenuClosed();
	void OnFirstDynamicLoad();
	void OnDynamicLoad();
	void OnChangeSelectedActor();
	void NextSelectableActor();
	void NextActor();
	TArray<struct FSplinePoint> GetSplinePoints();
	float GetCurrentReplayTotalTimeInSeconds();
	float GetCurrentReplayCurrentTimeInSeconds();
	TArray<class ASWATCharacter*> GetAllSwatAI();
	TArray<class ASuspectCharacter*> GetAllSuspectAI();
	TArray<class APlayerCharacter*> GetAllPlayers();
	TArray<class ACivilianCharacter*> GetAllCivilianAI();
	class FString GetActorName(class AActor* Actor);
	void CreateMountData();
	void ClearSplinePoints();
	void BeginFollowingSpline();
	void ApplyNewCameraState();
	void ApplyCameraState();
	void AddSplinePoint(const struct FVector& Location, const struct FRotator& Rotation);
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.ReplayControls
class UReplayControls : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UReplayControls* GetDefaultObj();

	void UpdateMountedSocketSelections();
	void ToggleHUD();
	void SkipReplayForward();
	void SkipReplayBackward();
	void SetMinimumReplayBarTime(float Percent);
	void PreviousActor();
	void PauseReplay();
	void NextActor();
	void CustomTick();
};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.ReplaySplineActor
class AReplaySplineActor : public AActor
{
public:
	class USplineComponent*                      SplineComponent;                                   // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                      SplinePointRotations;                              // 0x228(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AReplaySplineActor* GetDefaultObj();

};

// 0x0 (0x280 - 0x280)
// Class ReadyOrNot.ReplaySpringArm
class UReplaySpringArm : public USpringArmComponent
{
public:

	static class UClass* StaticClass();
	static class UReplaySpringArm* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.Reportable
class IReportable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IReportable* GetDefaultObj();

	void ReportToTOC(class AReadyOrNotCharacter* Reporter, bool bPlayAnimation);
	class FString GetSpeechTypeForReport();
	bool CanReportNow();
};

// 0x98 (0x2B8 - 0x220)
// Class ReadyOrNot.ReportableActor
class AReportableActor : public AActor
{
public:
	uint8                                        Pad_3048[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bReportableEnabled;                                // 0x240(0x1)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasBeenReported;                                  // 0x241(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableOnNoMatchingObjective;                     // 0x242(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableWhileMatchingObjectiveHidden;              // 0x243(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3049[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ReportableName;                                    // 0x248(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ReportVoiceLine;                                   // 0x258(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTocResponseOnReport;                              // 0x268(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_304A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnReported;                                        // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UShapeComponent*                       ShapeComponent;                                    // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVolumeShape                      Shape;                                             // 0x288(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_304B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoxExtents;                                        // 0x28C(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x298(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ZHeight;                                           // 0x29C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                InteractableComponent;                             // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScoringComponent*                     ScoringComponent;                                  // 0x2B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AReportableActor* GetDefaultObj();

	void SetReportableEnabled(bool bEnable);
	void OnReported__DelegateSignature(class AReportableActor* ReportableActor);
	void OnRep_bReportableEnabled();
	void DisableReportableIfNoMatchingObjective();
};

// 0x10 (0x2B8 - 0x2A8)
// Class ReadyOrNot.ReportReportableByTag
class AReportReportableByTag : public AObjective
{
public:
	uint32                                       NumReportsToComplete;                              // 0x2A8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                       CurrentReportCount;                                // 0x2AC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  ReportTag;                                         // 0x2B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AReportReportableByTag* GetDefaultObj();

	void OnReportableReported(class AReportableActor* Reportable);
	bool HasReportedReportableByTag(class FName& Tag);
};

// 0x10 (0x1A8 - 0x198)
// Class ReadyOrNot.ReportTargetActivity
class UReportTargetActivity : public UBaseActivity
{
public:
	TScriptInterface<class IReportable>          ReportTarget;                                      // 0x198(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UReportTargetActivity* GetDefaultObj();

};

// 0x8 (0x1D0 - 0x1C8)
// Class ReadyOrNot.RepositionCombatMove
class URepositionCombatMove : public UBaseCombatMoveActivity
{
public:
	class ADoor*                                 TheDoor;                                           // 0x1C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class URepositionCombatMove* GetDefaultObj();

};

// 0x10 (0x2B8 - 0x2A8)
// Class ReadyOrNot.RescueAllOfTheCivilians
class ARescueAllOfTheCivilians : public AObjective
{
public:
	uint8                                        Pad_3055[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ARescueAllOfTheCivilians* GetDefaultObj();

	void OnCivilianKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnAISpawned();
};

// 0x28 (0x2D0 - 0x2A8)
// Class ReadyOrNot.RescueCivilianByTag
class ARescueCivilianByTag : public AObjective
{
public:
	uint8                                        Pad_3056[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CivilianTag;                                       // 0x2B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  Civilian;                                          // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowIncapacitation;                              // 0x2C8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3057[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ARescueCivilianByTag* GetDefaultObj();

	void OnCivilianKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnAISpawned();
	bool HasNeutralizedCivilianByTag(bool* bArrested);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.RespondToPlayerGaze
class IRespondToPlayerGaze : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRespondToPlayerGaze* GetDefaultObj();

	void OnPlayerGazeStarted(class APlayerCharacter* Gazer);
	void OnPlayerGazeEnded(class APlayerCharacter* Gazer);
};

// 0x14B8 (0x1770 - 0x2B8)
// Class ReadyOrNot.RoNAnimInstance_HumanBase
class URoNAnimInstance_HumanBase : public UAnimInstance
{
public:
	class URoNMoveStyleComponent*                MoveStyleComponent;                                // 0x2B8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3058[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsStrafing;                                       // 0x2CC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3059[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRoNStyleSlotData                     Slot0;                                             // 0x2D0(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot1;                                             // 0x520(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot2;                                             // 0x770(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot3;                                             // 0x9C0(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot4;                                             // 0xC10(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot5;                                             // 0xE60(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleSlotData                     Slot6;                                             // 0x10B0(0x250)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRoNStyleIdleData                     IdleData_Default;                                  // 0x1300(0x10)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRoNStyleTurnData                     TurnData_Default;                                  // 0x1310(0x48)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRoNGaitTransitionData                TransitionData_Default;                            // 0x1358(0x120)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRoNGaitLocomotionData                LocomotionData_Default;                            // 0x1478(0xC0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                           StrafeBS_Default;                                  // 0x1538(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                           NonStrafeBS_Default;                               // 0x1540(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SlotBlendTime;                                     // 0x1548(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultSlotBlendTime;                              // 0x154C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimOffsetAlpha;                                    // 0x1550(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrafeBlendTime;                                   // 0x1554(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SlopeWarpingAlpha;                                 // 0x1558(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsMoveStyleSlotBActive;                           // 0x155C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_305A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SlotIdx;                                           // 0x1560(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              HeadLookRotation;                                  // 0x1564(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_305C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Lean;                                              // 0x1580(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanClamped;                                       // 0x1584(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanFactor;                                        // 0x1588(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanInterpSpeed;                                   // 0x158C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustedPlayrate;                                  // 0x1590(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedScaling;                                      // 0x1594(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayrateClampMax;                                  // 0x1598(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentIdleIndex;                                  // 0x159C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStrafeDirection                  CurrentStrafeDirection;                            // 0x15A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_305D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StrafeDirectionAngle;                              // 0x15A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             AimOffsetInterpolated;                             // 0x15AC(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInRagdoll;                                        // 0x15B4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRecoveringFromRagdoll;                            // 0x15B5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDead;                                           // 0x15B6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPlayingDeathAnim;                               // 0x15B7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldBuildingAnimState               WorldBuildingAnimState;                            // 0x15B8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCarryArrestedAnimState               CarryArrestAnimState;                              // 0x15C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FTakeHostageAnimState                 TakeHostageAnimState;                              // 0x15D0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	enum class EAnimWeaponType                   CurWeaponType;                                     // 0x15E8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3060[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         IncapacitationLoopAnim;                            // 0x15F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsArrested;                                       // 0x15F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsArrestedAsRagdoll;                              // 0x15F9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBeingArrested;                                  // 0x15FA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBeingArrestedAsRagdoll;                         // 0x15FB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSurrendered;                                      // 0x15FC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCarried;                                        // 0x15FD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsGetUpPlaying;                                   // 0x15FE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3062[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIncapacitated;                                    // 0x1600(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableIKProcess;                                  // 0x1601(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFemale;                                         // 0x1602(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsUnarmed;                                        // 0x1603(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSWAT;                                           // 0x1604(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCrouching;                                      // 0x1605(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsArrestedAndDead;                                // 0x1606(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3063[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCoverAnimStateMachineData            CoverAnimStateMachineData;                         // 0x1608(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHidingAnimStateMachineData           HidingAnimStateMachineData;                        // 0x1620(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FHoleTraversalAnimStateMachineData    HoleTraversalAnimStateMachineData;                 // 0x1630(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                        LeftArmIKAlpha;                                    // 0x1640(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RightArmIKAlpha;                                   // 0x1644(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArmsOnlySlotAlpha;                                 // 0x1648(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftArmOnlySlotAlpha;                              // 0x164C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HandAdditiveLockOverride;                          // 0x1650(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWeaponDown;                                       // 0x1654(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPistolAndWeaponDown;                            // 0x1655(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPistol;                                         // 0x1656(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3064[0x9];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequenceBase*                     Calm_Override_Pose;                                // 0x1660(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Aiming_Override_Pose;                              // 0x1668(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Default_Calm_Override_Pose;                        // 0x1670(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Default_Aiming_Override_Pose;                      // 0x1678(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsReloading;                                      // 0x1680(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3065[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FinalAimOffsetAlpha;                               // 0x1684(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAnyMontageIsActive;                               // 0x1688(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFullBodyMontagePlaying;                           // 0x1689(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUpperBodyMontagePlaying;                          // 0x168A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInteractionMontagePlaying;                        // 0x168B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFullOrInteractionMontagePlaying;                  // 0x168C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EItemOverrideRule                 CurOverrideRule;                                   // 0x168D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLoweredSet;                                     // 0x168E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowTurnInPlace;                                 // 0x168F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnInPlaceSpeedMultiplier;                        // 0x1690(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        YawOffsetLimit;                                    // 0x1694(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceAnimSet               TurnInPlaceAnimSet;                                // 0x1698(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceState                 TurnInPlaceState;                                  // 0x16B0(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bExitTurnRecoveryIfMoving;                         // 0x1708(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3066[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCachedAnimStateData                  TurnAnimStateData;                                 // 0x170C(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bIsTurnInPlaceStateRelevant;                       // 0x1728(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3067[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VelocityInterpTime;                                // 0x172C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               VelocitySmoothed;                                  // 0x1730(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableAdditiveOverrides;                         // 0x173C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3068[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        AdditiveDisableTagList;                            // 0x1740(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        Move_x;                                            // 0x1750(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Move_y;                                            // 0x1754(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsHostageTaker;                                   // 0x1758(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsHostage;                                        // 0x1759(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsHostageOrHostageTaker;                          // 0x175A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3069[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoveStyleBlendCoolDown;                            // 0x175C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_306A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bMoveStyleChanging;                                // 0x1764(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_306B[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNAnimInstance_HumanBase* GetDefaultObj();

	void UpdateMoveStyleDataFromComp(class URoNMoveStyleComponent* MoveStyleComp);
	void UpdateGaitDataFromComp(class URoNMoveStyleComponent* MoveStyleComp);
	void SetMoveStyleDataFromComp(class URoNMoveStyleComponent* MoveStyleComp);
};

// 0x90 (0x4F0 - 0x460)
// Class ReadyOrNot.RoNAnimInstance_PlayerFP
class URoNAnimInstance_PlayerFP : public UReadyOrNotAnimInstance
{
public:
	class UReadyOrNotWeaponAnimData*             LastWeaponAnimData;                                // 0x460(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             EditorWeaponAnimData;                              // 0x468(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleY;                                        // 0x470(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleZ;                                        // 0x474(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              MeshControlRotation;                               // 0x478(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               MeshPostureLeanOffset;                             // 0x484(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MeshWeaponOffset;                                  // 0x490(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              MeshWeaponRotation;                                // 0x49C(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              MeshWeaponFreeAimRotation;                         // 0x4A8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               MeshWeaponLeanOffset;                              // 0x4B4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              MeshWeaponLeanRotation;                            // 0x4C0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_306E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                TPMeshReference;                                   // 0x4D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LazySpringStrength;                                // 0x4D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ADS_Movement_Weight;                               // 0x4DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InteractionSlotAlpha;                              // 0x4E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultSlotAlpha;                                  // 0x4E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RollMoveInput;                                     // 0x4E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_306F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNAnimInstance_PlayerFP* GetDefaultObj();

	void OnReloadComplete();
	void OnHolsterComplete();
	void OnC2Detonation();
	class UBlendSpaceBase* GetPlayerBlendspace_FP(enum class EBaseBlendspaces_FP BlendspaceName);
	class UAnimSequenceBase* GetPlayerAnimation_FP(enum class EBaseAnimType_FP AnimName);
};

// 0xBB0 (0x1010 - 0x460)
// Class ReadyOrNot.RoNAnimInstance_PlayerTP
class URoNAnimInstance_PlayerTP : public UReadyOrNotAnimInstance
{
public:
	struct FReadyOrNotAnimInstanceProxyTP        Proxy;                                             // 0x460(0x770)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             LastAnimWeaponData;                                // 0xBD0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             EditorWeaponAnimData;                              // 0xBD8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowTurnInPlace;                                 // 0xBE0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTurnInPlaceStateRelevant;                       // 0xBE1(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3071[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        YawOffsetLimit;                                    // 0xBE4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnInPlaceSpeedMultiplier;                        // 0xBE8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3072[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimTurnInPlaceAnimSet               TurnInPlaceAnimSet;                                // 0xBF0(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceState                 TurnInPlaceState;                                  // 0xC08(0x58)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceAnimSet               StandRifAnimSet;                                   // 0xC60(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceAnimSet               CrouchRifAnimSet;                                  // 0xC78(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bWeaponDown;                                       // 0xC90(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAiming;                                         // 0xC91(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsShieldEquipped;                                 // 0xC92(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3073[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimingAlpha;                                       // 0xC94(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeanLeft;                                         // 0xC98(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeanRight;                                        // 0xC99(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3074[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        QuickLeanLeftAmount;                               // 0xC9C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanRightAmount;                              // 0xCA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanLeftAlpha;                                // 0xCA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanRightAlpha;                               // 0xCA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanIntensity;                                // 0xCAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanInterpSpeed;                              // 0xCB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootIKValue;                                       // 0xCB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootIKAlpha;                                       // 0xCB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRagdoll;                                          // 0xCBC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPlayingDeathAnim;                               // 0xCBD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrested;                                         // 0xCBE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDead;                                           // 0xCBF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeathAnimEnd;                                     // 0xCC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStunned;                                          // 0xCC1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTased;                                            // 0xCC2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnLadder;                                         // 0xCC3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LadderUpDownMovement;                              // 0xCC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleY;                                        // 0xCC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleZ;                                        // 0xCCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverLeft;                                        // 0xCD0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverRight;                                       // 0xCD1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverMiddle;                                      // 0xCD2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverLeftLow;                                     // 0xCD3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverRightLow;                                    // 0xCD4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverPeek;                                        // 0xCD5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3075[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimOffsetAlpha;                                    // 0xCD8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             AimOffsets;                                        // 0xCDC(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJumpStartTrigger;                                 // 0xCE4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3076[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothMappedLeanToAnimStandLeft;                   // 0xCE8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimStandRight;                  // 0xCEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimCrouchLeft;                  // 0xCF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimCrouchRight;                 // 0xCF4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed_tp_rifle_stand_sprint_f;                     // 0xCF8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3077[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Low_TP;                           // 0xD00(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Up_TP;                            // 0xD08(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Shld_TP;                          // 0xD10(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Sights_TP;                        // 0xD18(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Ret_TP;                           // 0xD20(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Ovr_TP;                           // 0xD28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Low_TP;                                  // 0xD30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Up_TP;                                   // 0xD38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Shld_TP;                                 // 0xD40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Sights_TP;                               // 0xD48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Ret_TP;                                  // 0xD50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Ovr_TP;                                  // 0xD58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_VFG_TP;                                  // 0xD60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_AFG_TP;                                  // 0xD68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_HSTOP_TP;                                // 0xD70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningLeftNotCrouching;                          // 0xD78(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningLeftOrCrouching;                        // 0xD79(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningLeftOrNotCrouching;                     // 0xD7A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningRightNotCrouching;                         // 0xD7B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningRightOrCrouching;                       // 0xD7C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningRightOrNotCrouching;                    // 0xD7D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouchingAndMoving;                               // 0xD7E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotCrouchingAndMoving;                            // 0xD7F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAimingAndNotDeployable;                           // 0xD80(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3078[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WalkSpeedForward;                                  // 0xD84(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedLeft;                                     // 0xD88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedRight;                                    // 0xD8C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedBackward;                                 // 0xD90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedForward;                            // 0xD94(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedLeft;                               // 0xD98(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedRight;                              // 0xD9C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedBackward;                           // 0xDA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedForward;                                   // 0xDA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedLeft;                                      // 0xDA8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedRight;                                     // 0xDAC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedBackward;                                  // 0xDB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLessThanPointOneSecondOnRelevantAnim;             // 0xDB4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInCombatOrAlerted;                              // 0xDB5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMoving;                                           // 0xDB6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAlerted;                                        // 0xDB7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlertAlpha;                                        // 0xDB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInCombat;                                       // 0xDBC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSurrendering;                                   // 0xDBD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSprayed;                                          // 0xDBE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStung;                                            // 0xDBF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPseudoSpeedType                  CurPseudoSpeed;                                    // 0xDC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFemale;                                           // 0xDC1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bChild;                                            // 0xDC2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasInjury;                                        // 0xDC3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedFwdPlayrateSync;                          // 0xDC4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedSidePlayrateSync;                         // 0xDC8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedPlayrateSync;                             // 0xDCC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RetentionAlpha;                                    // 0xDD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoweredAlpha;                                      // 0xDD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3079[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SightAlpha;                                        // 0xDE0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoweredCooldownTime;                               // 0xDE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsLoweredUp;                                       // 0xDE8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_307A[0x13];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ArmsOnlySlotAlpha;                                 // 0xDFC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftArmOnlySlotAlpha;                              // 0xE00(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityInterpTime;                                // 0xE04(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               VelocitySmoothed;                                  // 0xE08(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedScaling;                                      // 0xE14(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayrateClampMax;                                  // 0xE18(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimCharacterMovementSnapshot        CharMovementSnapshot;                              // 0xE1C(0x94)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                        PostPivotTriggerThreshold;                         // 0xEB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCardinalDirectionSnapshot            PivotingCardinalDirSnapShot;                       // 0xEB4(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_307B[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      CharacterRef;                                      // 0xED8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  CharacterAiRef;                                    // 0xEE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDistanceMatching;                              // 0xEE8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistanceMatchingType             DistanceMatchingCurrentState;                      // 0xEE9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_307C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPredictionResult                     StartMarker;                                       // 0xEEC(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     StopMarker;                                        // 0xF0C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     PivotMarker;                                       // 0xF2C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     PostPivotMarker;                                   // 0xF4C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     TakeOffMarker;                                     // 0xF6C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     ApexMarker;                                        // 0xF8C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     LandingMarker;                                     // 0xFAC(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	enum class EMoveDirectionExt                 CurrentPivotDirectionExt;                          // 0xFCC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPivotDirectionBroken;                             // 0xFCD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanPivotInCurDirection;                           // 0xFCE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMPrePivotRuleset;                                // 0xFCF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartDirectionBroken;                             // 0xFD0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_307D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedMaxSpeed;                                // 0xFD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMStartRuleset;                                   // 0xFD8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMStopRuleset;                                    // 0xFD9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_307E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PelvisDefaultWorldPos;                             // 0xFDC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisDefaultWorldPos;                     // 0xFE8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisMovingWorldPos;                      // 0xFF4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisCurrentWorldPos;                     // 0x1000(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_307F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNAnimInstance_PlayerTP* GetDefaultObj();

	class UAnimSequenceBase* GetPlayerAnimation_TP(enum class EBaseAnimType_TP AnimName);
};

// 0x790 (0xBF0 - 0x460)
// Class ReadyOrNot.RoNAnimInstance_PlayerTP_V2
class URoNAnimInstance_PlayerTP_V2 : public UReadyOrNotAnimInstance
{
public:
	class UReadyOrNotWeaponAnimData*             LastAnimWeaponData;                                // 0x460(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReadyOrNotWeaponAnimData*             EditorWeaponAnimData;                              // 0x468(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowTurnInPlace;                                 // 0x470(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3081[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        YawOffsetLimit;                                    // 0x474(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurnInPlaceSpeedMultiplier;                        // 0x478(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3082[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimTurnInPlaceAnimSet               TurnInPlaceAnimSet;                                // 0x480(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceState                 TurnInPlaceState;                                  // 0x498(0x58)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceAnimSet               StandRifAnimSet;                                   // 0x4F0(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAnimTurnInPlaceAnimSet               CrouchRifAnimSet;                                  // 0x508(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bIsAIControlled;                                   // 0x520(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWeaponDown;                                       // 0x521(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAiming;                                         // 0x522(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsShieldEquipped;                                 // 0x523(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AimingAlpha;                                       // 0x524(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeanLeft;                                         // 0x528(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeanRight;                                        // 0x529(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3083[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        QuickLeanLeftAmount;                               // 0x52C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanRightAmount;                              // 0x530(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanLeftAlpha;                                // 0x534(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanRightAlpha;                               // 0x538(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanIntensity;                                // 0x53C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QuickLeanInterpSpeed;                              // 0x540(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootIKValue;                                       // 0x544(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FootIKAlpha;                                       // 0x548(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRagdoll;                                          // 0x54C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPlayingDeathAnim;                               // 0x54D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArrested;                                         // 0x54E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDead;                                           // 0x54F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeathAnimEnd;                                     // 0x550(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStunned;                                          // 0x551(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTased;                                            // 0x552(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnLadder;                                         // 0x553(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LadderUpDownMovement;                              // 0x554(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleY;                                        // 0x558(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeanAngleZ;                                        // 0x55C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverLeft;                                        // 0x560(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverRight;                                       // 0x561(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverMiddle;                                      // 0x562(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverLeftLow;                                     // 0x563(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverRightLow;                                    // 0x564(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCoverPeek;                                        // 0x565(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3084[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimOffsetAlpha;                                    // 0x568(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             AimOffsets;                                        // 0x56C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJumpStartTrigger;                                 // 0x574(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3085[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothMappedLeanToAnimStandLeft;                   // 0x578(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimStandRight;                  // 0x57C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimCrouchLeft;                  // 0x580(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SmoothMappedLeanToAnimCrouchRight;                 // 0x584(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed_tp_rifle_stand_sprint_f;                     // 0x588(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3086[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Low_TP;                           // 0x590(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Up_TP;                            // 0x598(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Shld_TP;                          // 0x5A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Sights_TP;                        // 0x5A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Ret_TP;                           // 0x5B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Crouch_Idle_Pose_Ovr_TP;                           // 0x5B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Low_TP;                                  // 0x5C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Up_TP;                                   // 0x5C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Shld_TP;                                 // 0x5D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Sights_TP;                               // 0x5D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Ret_TP;                                  // 0x5E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_Ovr_TP;                                  // 0x5E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_VFG_TP;                                  // 0x5F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_AFG_TP;                                  // 0x5F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                     Idle_Pose_HSTOP_TP;                                // 0x600(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningLeftNotCrouching;                          // 0x608(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningLeftOrCrouching;                        // 0x609(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningLeftOrNotCrouching;                     // 0x60A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLeaningRightNotCrouching;                         // 0x60B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningRightOrCrouching;                       // 0x60C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotLeaningRightOrNotCrouching;                    // 0x60D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouchingAndMoving;                               // 0x60E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNotCrouchingAndMoving;                            // 0x60F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAimingAndNotDeployable;                           // 0x610(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3087[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WalkSpeedForward;                                  // 0x614(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedLeft;                                     // 0x618(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedRight;                                    // 0x61C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkSpeedBackward;                                 // 0x620(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedForward;                            // 0x624(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedLeft;                               // 0x628(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedRight;                              // 0x62C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchWalkSpeedBackward;                           // 0x630(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedForward;                                   // 0x634(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedLeft;                                      // 0x638(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedRight;                                     // 0x63C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RunSpeedBackward;                                  // 0x640(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLessThanPointOneSecondOnRelevantAnim;             // 0x644(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInCombatOrAlerted;                              // 0x645(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMoving;                                           // 0x646(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsAlerted;                                        // 0x647(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlertAlpha;                                        // 0x648(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsInCombat;                                       // 0x64C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsSurrendering;                                   // 0x64D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSprayed;                                          // 0x64E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStung;                                            // 0x64F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPseudoSpeedType                  CurPseudoSpeed;                                    // 0x650(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFemale;                                           // 0x651(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bChild;                                            // 0x652(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasInjury;                                        // 0x653(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedFwdPlayrateSync;                          // 0x654(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedSidePlayrateSync;                         // 0x658(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimSpeedPlayrateSync;                             // 0x65C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RetentionAlpha;                                    // 0x660(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoweredAlpha;                                      // 0x664(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3088[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SightAlpha;                                        // 0x670(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoweredCooldownTime;                               // 0x674(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         IsLoweredUp;                                       // 0x678(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3089[0x13];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ArmsOnlySlotAlpha;                                 // 0x68C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftArmOnlySlotAlpha;                              // 0x690(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VelocityInterpTime;                                // 0x694(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               VelocitySmoothed;                                  // 0x698(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimCharacterMovementSnapshot        CharMovementSnapshot;                              // 0x6A4(0x94)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                        PostPivotTriggerThreshold;                         // 0x738(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCardinalDirectionSnapshot            PivotingCardinalDirSnapShot;                       // 0x73C(0x18)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_308A[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  BaseCharacterRef;                                  // 0x760(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      CharacterRef;                                      // 0x768(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticCharacter*                  CharacterAiRef;                                    // 0x770(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDistanceMatching;                              // 0x778(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistanceMatchingType             DistanceMatchingCurrentState;                      // 0x779(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_308B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPredictionResult                     StartMarker;                                       // 0x77C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     StopMarker;                                        // 0x79C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     PivotMarker;                                       // 0x7BC(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     PostPivotMarker;                                   // 0x7DC(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     TakeOffMarker;                                     // 0x7FC(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     ApexMarker;                                        // 0x81C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionResult                     LandingMarker;                                     // 0x83C(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	enum class EMoveDirectionExt                 CurrentPivotDirectionExt;                          // 0x85C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPivotDirectionBroken;                             // 0x85D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanPivotInCurDirection;                           // 0x85E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMPrePivotRuleset;                                // 0x85F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartDirectionBroken;                             // 0x860(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_308C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedMaxSpeed;                                // 0x864(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMStartRuleset;                                   // 0x868(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSMStopRuleset;                                    // 0x869(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDistanceMatchToTarget;                            // 0x86A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_308D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DistanceCurveName;                                 // 0x86C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PelvisDefaultWorldPos;                             // 0x874(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisDefaultWorldPos;                     // 0x880(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisMovingWorldPos;                      // 0x88C(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CrouchedPelvisCurrentWorldPos;                     // 0x898(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  IdleStateData;                                     // 0x8A4(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  StartStateData;                                    // 0x8C0(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  MoveStateData;                                     // 0x8DC(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  StopStateData;                                     // 0x8F8(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  PrePivotStateData;                                 // 0x914(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  PostPivotStateData;                                // 0x930(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  TurnInPlaceStateData;                              // 0x94C(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimStateData                  LocalTurnInPlaceStateData;                         // 0x968(0x1C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_308E[0x4A];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bStartToCycleRuleSet;                              // 0x9CE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTriggerPivotARuleSet;                             // 0x9CF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTriggerPivotBRuleSet;                             // 0x9D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPrePivotToPostPivotRuleSet;                       // 0x9D1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPostPivotToPrePivotRuleSet;                       // 0x9D2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPivotToCycleRuleSet;                              // 0x9D3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStopToIdleRuleSet;                                // 0x9D4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanEnterPrePivotRuleSet;                          // 0x9D5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_308F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimSequence*>                 StandFastStartAnimations;                          // 0x9D8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 StandFastStopAnimations;                           // 0x9E8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 StandFastPivotAnimations;                          // 0x9F8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 StandSlowStartAnimations;                          // 0xA08(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 StandSlowStopAnimations;                           // 0xA18(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 StandSlowPivotAnimations;                          // 0xA28(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchFastStartAnimations;                         // 0xA38(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchFastStopAnimations;                          // 0xA48(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchFastPivotAnimations;                         // 0xA58(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchSlowStartAnimations;                         // 0xA68(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchSlowStopAnimations;                          // 0xA78(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                 CrouchSlowPivotAnimations;                         // 0xA88(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimSequence*                         ActiveStopAnim;                                    // 0xA98(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActiveStopAnimTime;                                // 0xAA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3090[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         ActiveStartAnim;                                   // 0xAA8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActiveStartAnimTime;                               // 0xAB0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3091[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         ActivePrePivotAnim;                                // 0xAB8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivePrePivotAnimTime;                            // 0xAC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3092[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         ActivePostPivotAnim;                               // 0xAC8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivePostPivotAnimTime;                           // 0xAD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsIdleStateRelevant;                              // 0xAD4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStartStateRelevant;                             // 0xAD5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStopStateRelevant;                              // 0xAD6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPrePivotStateRelevant;                          // 0xAD7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPostPivotStateRelevant;                         // 0xAD8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsMoveStateRelevant;                              // 0xAD9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTurnInPlaceStateRelevant;                       // 0xADA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStartStateFullWeight;                           // 0xADB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPrePivotStateFullWeight;                        // 0xADC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPostPivotStateFullWeight;                       // 0xADD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3093[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeInStartState;                                  // 0xAE0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeInPostPivotState;                              // 0xAE4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReadDisableSpeedCurve;                            // 0xAE8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3094[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DisableSpeedWarping;                               // 0xAEC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedScaling;                                      // 0xAF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayrateClampMax;                                  // 0xAF4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             PlayRateClamp;                                     // 0xAF8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             PlayRateClampCycle;                                // 0xB00(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             PlayRateClampStartsPivots;                         // 0xB08(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrideWarpingBlendInStartOffset;                   // 0xB10(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrideWarpingBlendInDurationScaled;                // 0xB14(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrideWarpingStartAlpha;                           // 0xB18(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StrideWarpingPivotAlpha;                           // 0xB1C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirectionBlendTime;                                // 0xB20(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3095[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPoseSnapshot                         DeathPose;                                         // 0xB28(0x38)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	float                                        SlopeWarpingAlpha;                                 // 0xB60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsItemOrPistolMotionBlock;                        // 0xB64(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsRifleMotionBlock;                               // 0xB65(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsCrouchingWithShield;                            // 0xB66(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3096[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrouchHighPoseAdditiveAlpha;                       // 0xB68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StandHighPoseAdditiveAlpha;                        // 0xB6C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftHandIKAlpha_ItemBased;                         // 0xB70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ZHeightLeanAdjustment;                             // 0xB74(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IsCrouchingWithShield_AsFloat;                     // 0xB80(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HandAdditiveLockOverride;                          // 0xB84(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftHandAdditiveOvrBlend;                          // 0xB88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftHandTempFinIK;                                 // 0xB8C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFastWalkSwitchRule;                               // 0xB90(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCrouchFastWalkSwitchRule;                         // 0xB91(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartWalkSwitchTransitionRule;                    // 0xB92(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3097[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultCrouchSpeed;                                // 0xB94(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultStandSpeed;                                 // 0xB98(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStopWalkSwitchTransitionRule;                     // 0xB9C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPivotWalkSwitchTransitionRule;                    // 0xB9D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasUnderbarrelAttachment;                         // 0xB9E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EWeaponUnderbarrelAnimationType   UnderbarrelType;                                   // 0xB9F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LeftHandGripAlpha;                                 // 0xBA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpperbodySlotNoWeight;                             // 0xBA4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFastWalking;                                    // 0xBA8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFastStop;                                       // 0xBA9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFastStart;                                      // 0xBAA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFastPivot;                                      // 0xBAB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLocallyFirstPerson;                             // 0xBAC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFStartPhase;                                     // 0xBAD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFStoppingPhase;                                  // 0xBAE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFHasReachedStoppingPhase;                        // 0xBAF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PFStartDistanceThreshold;                          // 0xBB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PFStopDistanceThreshold;                           // 0xBB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PFLastStopLocation;                                // 0xBB8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PFCurrentStopLocation;                             // 0xBC4(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PFStopDistance;                                    // 0xBD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PFCurrentAcceptanceRadius;                         // 0xBD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFPathTooShort;                                   // 0xBD8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFPathIsValid;                                    // 0xBD9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPFRequestedNewPath;                               // 0xBDA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3098[0x15];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNAnimInstance_PlayerTP_V2* GetDefaultObj();

	class UAnimSequenceBase* GetPlayerAnimation_TP(enum class EBaseAnimType_TP AnimName);
};

// 0x0 (0xB0 - 0xB0)
// Class ReadyOrNot.RONCameraModifier_CameraShake
class URONCameraModifier_CameraShake : public UCameraModifier_CameraShake
{
public:

	static class UClass* StaticClass();
	static class URONCameraModifier_CameraShake* GetDefaultObj();

};

// 0x28 (0x4E0 - 0x4B8)
// Class ReadyOrNot.RoNMoveStyleCharacter
class ARoNMoveStyleCharacter : public ACharacter
{
public:
	class USpringArmComponent*                   CameraBoom;                                        // 0x4B8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                      FollowCamera;                                      // 0x4C0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URoNMoveStyleComponent*                MoveStyle;                                         // 0x4C8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseTurnRate;                                      // 0x4D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseLookUpRate;                                    // 0x4D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3099[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ARoNMoveStyleCharacter* GetDefaultObj();

};

// 0xF8 (0x1A8 - 0xB0)
// Class ReadyOrNot.RoNMoveStyleComponent
class URoNMoveStyleComponent : public UActorComponent
{
public:
	class UDataTable*                            MoveStyleDatabase;                                 // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DefaultMoveStyleName;                              // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  DefaulGaitName;                                    // 0xC0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MoveStyleCharacterName;                            // 0xC8(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PreviousMoveStyleName;                             // 0xD0(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsOverriding;                                     // 0xD8(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_309B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRoNMovementStyle                     ActiveMoveStyle;                                   // 0xE0(0x88)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                  Rep_MoveStyleName;                                 // 0x168(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ActiveGaitIndex;                                   // 0x170(0x4)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ActiveGaitName;                                    // 0x174(0x8)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GaitTimeOut;                                       // 0x17C(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PendingGaitName;                                   // 0x180(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsStrafing;                                       // 0x188(0x1)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_309C[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNMoveStyleComponent* GetDefaultObj();

	void SetOverrideMoveStyleByName(class FName Name);
	void SetMovementStyleByName(class FName Name);
	bool SetMovementGaitByName(class FName Name, bool bForce);
	void SetCharacterSpeedMultiplier(float Multiplier);
	void SetCharacterSpeed(float Speed);
	void SetCharacterAccelerationMultiplier(float Multiplier);
	void SetCharacterAcceleration(float Acceleration);
	void OnRep_MoveStyle();
	void OnRep_IsStrafing();
	void ClearOverrideMoveStyle();
};

// 0x188 (0x1B8 - 0x30)
// Class ReadyOrNot.WeaponSound
class UWeaponSound : public UDataAsset
{
public:
	bool                                         bPlayFMODFiringAudio;                              // 0x30(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_309D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            FMODGunShot1P;                                     // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODGunShot3P;                                     // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagCheck_FullSeq;                                  // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            QuickReload_FullSeq;                               // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            QuickReloadEmpty_FullSeq;                          // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Reload_FullSeq;                                    // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            ReloadEmpty_FullSeq;                               // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagIn;                                             // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagOut;                                            // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagInQuick;                                        // 0x80(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagOutQuick;                                       // 0x88(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagDrop;                                           // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MagDropQuick;                                      // 0x98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            WeaponDrop;                                        // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BoltClose;                                         // 0xA8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BoltCloseQuick;                                    // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BoltOpen;                                          // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BoltOpenQuick;                                     // 0xC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            OnADSSound;                                        // 0xC8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            OnEndADSSound;                                     // 0xD0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            NightvisionOn;                                     // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            NightvisionOff;                                    // 0xE0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Holster;                                           // 0xE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Draw;                                              // 0xF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DrawFirst;                                         // 0xF8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SelectSemi;                                        // 0x100(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SelectBurst;                                       // 0x108(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SelectAuto;                                        // 0x110(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SelectSafe;                                        // 0x118(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponSoundData                      Firing_Inside;                                     // 0x120(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponSoundData                      Firing_Outside;                                    // 0x140(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DryFire;                                           // 0x160(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FireLast;                                          // 0x168(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayBulletWhizz;                                  // 0x170(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_309E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            BulletWhizzFar;                                    // 0x178(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HitMarker;                                         // 0x180(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            HeadshotMarker;                                    // 0x188(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            KillMarker;                                        // 0x190(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PhysicsImpact;                                     // 0x198(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PlayerImpact;                                      // 0x1A0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PhysicsImpactMinimumVelocity;                      // 0x1A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_309F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            MovementLayer;                                     // 0x1B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWeaponSound* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class ReadyOrNot.DoorSound
class UDoorSound : public UDataAsset
{
public:
	class UFMODEvent*                            DoorClosed;                                        // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DoorOpened;                                        // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DoorStartManipulation;                             // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DoorStopManipulation;                              // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BrokenByC2;                                        // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BrokenByRam;                                       // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BrokenByShotgun;                                   // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            KickedDown;                                        // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            KickedDownFailed;                                  // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            KickedDownBreak;                                   // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UDoorSound* GetDefaultObj();

};

// 0x18 (0x2D0 - 0x2B8)
// Class ReadyOrNot.RoNWeaponAnimInstance
class URoNWeaponAnimInstance : public UAnimInstance
{
public:
	float                                        AmmoRemaining;                                     // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              OptiwandBoneModify;                                // 0x2BC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsEquipped;                                       // 0x2CC(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A1[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoNWeaponAnimInstance* GetDefaultObj();

	void OnSpeedReloadMagazineEjected();
	void OnDisassembleMagazineEjected();
};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.RoomVisualizer
class ARoomVisualizer : public AActor
{
public:
	class USceneComponent*                       DefaultScene;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  OwningRoom;                                        // 0x228(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         Doors;                                             // 0x230(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AThreatAwarenessActor*>         Threats;                                           // 0x240(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class ARoomVisualizer*>               ConnectingRooms;                                   // 0x250(0x10)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	enum class ERoomSize                         Size;                                              // 0x260(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_30A2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ARoomVisualizer* GetDefaultObj();

};

// 0x28 (0x280 - 0x258)
// Class ReadyOrNot.RoomVolume
class ARoomVolume : public AVolume
{
public:
	int32                                        RoomGroupID;                                       // 0x258(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A3[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        OverlappingActors;                                 // 0x270(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ARoomVolume* GetDefaultObj();

};

// 0xD0 (0x100 - 0x30)
// Class ReadyOrNot.RosterTrait
class URosterTrait : public UDataAsset
{
public:
	class FText                                  Name;                                              // 0x30(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0x48(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Format;                                            // 0x60(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    TraitCurve;                                        // 0x78(0x88)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URosterTrait* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class ReadyOrNot.RosterStoryline
class URosterStoryline : public UDataAsset
{
public:
	TArray<class FText>                          DeathEvents;                                       // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          UnfitForDutyEvents;                                // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          ReturnFromIncapacitationEvents;                    // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          ReturnFromTherapyEvents;                           // 0x60(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          StressQuitEvents;                                  // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          TherapistEvents;                                   // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          TherapistAssessmentEvents;                         // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URosterStoryline* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class ReadyOrNot.RosterEventData
class URosterEventData : public UDataAsset
{
public:
	TArray<class URosterStoryline*>              Storylines;                                        // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTherapistReminderEvent>       TherapistReminderEvents;                           // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URosterEventData* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class ReadyOrNot.RosterCharacterArchetype
class URosterCharacterArchetype : public UPrimaryDataAsset
{
public:
	TArray<class UCustomizationCharacter*>       CharacterPool;                                     // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCustomizationVoice*>           VoicePool;                                         // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          BackgroundTextPool;                                // 0x50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          FirstNamePool;                                     // 0x60(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                          LastNamePool;                                      // 0x70(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URosterCharacterArchetype* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class ReadyOrNot.RosterCharacter
class URosterCharacter : public UObject
{
public:
	enum class ERosterCharacterState             State;                                             // 0x28(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERosterSquadPosition              Position;                                          // 0x29(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERosterRemovalReason              RemovalReason;                                     // 0x2A(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A4[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MissionsPlayed;                                    // 0x2C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressLevel;                                       // 0x30(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MissionsUntilReturn;                               // 0x34(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsNew;                                            // 0x38(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERosterCharacterState             PreviousState;                                     // 0x39(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A5[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PreviousStressLevel;                               // 0x3C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTherapistIntervened;                              // 0x40(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URosterTrait*                          Trait;                                             // 0x48(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTraitUnlocked;                                    // 0x50(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bJustUnlockedTrait;                                // 0x51(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  MostRecentEventText;                               // 0x58(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class URosterCharacterArchetype*             Archetype;                                         // 0x70(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationCharacter*               Character;                                         // 0x78(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationVoice*                   Voice;                                             // 0x80(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  FirstName;                                         // 0x88(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  LastName;                                          // 0xA0(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        SerialNumber;                                      // 0xB8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        YearsInSWAT;                                       // 0xBC(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0xC0(0x18)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class URosterStoryline*                      Storyline;                                         // 0xD8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class URosterCharacter* GetDefaultObj();

};

// 0xC0 (0xF8 - 0x38)
// Class ReadyOrNot.RosterManagerSettings
class URosterManagerSettings : public UDeveloperSettings
{
public:
	int32                                        RosterSize;                                        // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumRecruitableCharacters;                          // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                AdditionalRosterSlots;                             // 0x40(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                        MaximumStartingStress;                             // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FRosterTraitEntry>             AvailableTraits;                                   // 0x58(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                        MissionsUntilTraitUnlockable;                      // 0x68(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30A9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class URosterEventData>       EventData;                                         // 0x70(0x28)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeathChance;                                       // 0x98(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxIncapacitationTime;                             // 0x9C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxStressWhenIncapacitated;                        // 0xA0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxOfficersFiredAtOnce;                            // 0xA4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForOfficerFired;                         // 0xA8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxStressForOfficerFired;                          // 0xAC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForOfficerKilled;                        // 0xB0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForPlayerKilled;                         // 0xB4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForExfil;                                // 0xB8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForActiveShooterExfil;                   // 0xBC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForOfficerNotExfil;                      // 0xC0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForFriendlyKilledByPlayer;               // 0xC4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressGainForFriendlyKilledByPlayerBase;           // 0xC8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinBaseStressGainForKill;                          // 0xCC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxBaseStressGainForKill;                          // 0xD0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressMultiplierForKillInstigator;                 // 0xD4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressMultiplierForCivilianKill;                   // 0xD8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressLossForCivilianArrest;                       // 0xDC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StressLossForSuspectArrest;                        // 0xE0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PassiveStressLoss;                                 // 0xE4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxCharactersInTherapy;                            // 0xE8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinimumStressForTherapy;                           // 0xEC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TherapistTimeScale;                                // 0xF0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30AA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URosterManagerSettings* GetDefaultObj();

};

// 0x170 (0x198 - 0x28)
// Class ReadyOrNot.RosterManager
class URosterManager : public UObject
{
public:
	class URosterManagerSettings*                Settings;                                          // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommanderProfile*                     CommanderProfile;                                  // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URosterCharacter*>              Characters;                                        // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class URosterCharacter*>              PreviousCharacters;                                // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class URosterCharacter*>              RecruitableCharacters;                             // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<enum class ERosterSquadPosition, class URosterCharacter*> SquadCharacters;                                   // 0x68(0x50)(NativeAccessSpecifierPrivate)
	TArray<class URosterCharacterArchetype*>     PossibleCharacters;                                // 0xB8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, class URosterTrait*>       PossibleTraits;                                    // 0xC8(0x50)(NativeAccessSpecifierPrivate)
	class URosterEventData*                      EventData;                                         // 0x118(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URosterCharacterArchetype*             LastArchetype;                                     // 0x120(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_30AD[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URosterManager* GetDefaultObj();

};

// 0x18 (0x238 - 0x220)
// Class ReadyOrNot.RosterPortal
class ARosterPortal : public AActor
{
public:
	uint8                                        Pad_30AE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ERosterPortalType                 PortalType;                                        // 0x228(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30B0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                InteractableComponent;                             // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ARosterPortal* GetDefaultObj();

};

// 0x8 (0x328 - 0x320)
// Class ReadyOrNot.RosterReviewWidget
class URosterReviewWidget : public UCommonActivatableWidget
{
public:
	class URosterManager*                        RosterManager;                                     // 0x320(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URosterReviewWidget* GetDefaultObj();

	void OpenRoster();
	class FText GetTherapistReminderPrompt();
	TArray<class URosterCharacter*> GetCharactersSortedByReviewScore();
	TArray<class URosterCharacter*> GetAllCharacters();
	void AddSquadCharacters(TMap<enum class ERosterSquadPosition, class URosterCharacter*>& Characters);
	void AddReturningCharacters(TArray<class URosterCharacter*>& Characters);
	void AddRemovedCharacters(TArray<class URosterCharacter*>& Characters);
	void AddIncapacitatedCharacters(TArray<class URosterCharacter*>& Characters);
};

// 0x30 (0x250 - 0x220)
// Class ReadyOrNot.RosterScenarioSpawner
class ARosterScenarioSpawner : public AInfo
{
public:
	TArray<struct FObjectiveSpawn>               Objectives;                                        // 0x220(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         UsedTrapDoors;                                     // 0x230(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_30B8[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ARosterScenarioSpawner* GetDefaultObj();

};

// 0x10 (0x330 - 0x320)
// Class ReadyOrNot.RosterSelectionWidget
class URosterSelectionWidget : public UCommonActivatableWidget
{
public:
	class UCommanderProfile*                     CommanderProfile;                                  // 0x320(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URosterManager*                        RosterManager;                                     // 0x328(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class URosterSelectionWidget* GetDefaultObj();

	void SetSquadCharacter(class URosterCharacter* Character, enum class ERosterSquadPosition Position);
	void SendCharacterToTherapist(class URosterCharacter* Character);
	void RefreshRosterEvent();
	void RefreshRoster();
	void RecruitCharacter(class URosterCharacter* Character);
	void OnCharactersUpdated();
	void InitializeRoster();
	TArray<int32> GetUnlockableSlotMissionsRemaining();
	TMap<enum class ERosterSquadPosition, class URosterCharacter*> GetSquadCharacters();
	TArray<class URosterCharacter*> GetRecruitableCharacters();
	int32 GetNumCharactersInTherapy();
	int32 GetMaximumRosterSize();
	int32 GetMaxCharactersInTherapy();
	int32 GetCurrentRosterSize();
	struct FRosterLoadout GetCharacterLoadout(class URosterCharacter* Character);
	TArray<class URosterCharacter*> GetAllCharacters();
	TArray<struct FRosterActiveTraitInfo> GetActiveTraits();
	void FireCharacter(class URosterCharacter* Character);
	bool CanUseTherapist(class URosterCharacter* Character);
	bool CanFireCharacter(class URosterCharacter* Character);
};

// 0x8 (0x280 - 0x278)
// Class ReadyOrNot.RoundEndWidget_PVP
class URoundEndWidget_PVP : public UBaseWidget
{
public:
	class UWidgetAnimation*                      Anim_FadeIn;                                       // 0x278(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class URoundEndWidget_PVP* GetDefaultObj();

	void OnGameModeRoundEnded();
};

// 0x50 (0x370 - 0x320)
// Class ReadyOrNot.RoundupWidget
class URoundupWidget : public UCommonActivatableWidget
{
public:
	bool                                         bIsCollapsed;                                      // 0x320(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30C5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FText>                          Unlocks;                                           // 0x328(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                          Actions;                                           // 0x338(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bUsingGamepad;                                     // 0x348(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_30C6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMetaGameProfile*                      MetaGameProfile;                                   // 0x350(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommanderProfile*                     CommanderProfile;                                  // 0x358(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URosterManager*                        RosterManager;                                     // 0x360(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_30C7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URoundupWidget* GetDefaultObj();

	void ToggleContent();
	void ShowWidget();
	void RefreshWidget();
	void OnInputMethodChanged(enum class ECommonInputType InputMethod);
	bool IsNewCommanderModeSave();
	void HideWidget();
	void HideRoundupUnlocks();
	void HideRoundupActions();
	void ExpandContent();
	void CollapseContent();
	void AddRoundupUnlock(class FText& Unlock);
	void AddRoundupAction(class FText& Action);
};

// 0x38 (0x290 - 0x258)
// Class ReadyOrNot.SafeZoneVolume
class ASafeZoneVolume : public AVolume
{
public:
	TArray<class ASafeZoneVolume*>               NextSafeZones;                                     // 0x258(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AAISpawn*>                      AIBlacklist;                                       // 0x268(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AAISpawn*>                      AIWhitelist;                                       // 0x278(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bIsFirstSafeZone;                                  // 0x288(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30C8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASafeZoneVolume* GetDefaultObj();

};

// 0x78 (0x210 - 0x198)
// Class ReadyOrNot.ScanDoorActivity
class UScanDoorActivity : public UBaseActivity
{
public:
	class ADoor*                                 Door;                                              // 0x198(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30C9[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ACyberneticCharacter*>          SpottedCharacters;                                 // 0x1C0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ATrapActorAttachedToDoor*              SpottedTrap;                                       // 0x1D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_30CA[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UScanDoorActivity* GetDefaultObj();

	void TickScanStage(float DeltaTime, float Uptime);
	void TickMoveToStage(float DeltaTime, float Uptime);
	void TickCompleteStage(float DeltaTime, float Uptime);
	bool IsScanComplete();
	void EnterScanStage();
	void EnterMoveToStage();
	void EnterCompleteStage();
	bool CanStartScanning();
};

// 0x5F8 (0x15F0 - 0xFF8)
// Class ReadyOrNot.ScopedWeaponAttachment
class UScopedWeaponAttachment : public UWeaponAttachment
{
public:
	TArray<struct FScopeModifications>           ScopeMods;                                         // 0xFF8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ZoomFOVAddition;                                   // 0x1008(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ZoomInSpeed;                                       // 0x100C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ZoomOutSpeed;                                      // 0x1010(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSupportsCowitness;                                // 0x1014(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseScopeEffect;                                   // 0x1015(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30CE[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UTexture2D>             ScopeReticle;                                      // 0x1018(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUsePipRendering;                                  // 0x1040(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x1041(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverridePostProcessSettings;                      // 0x1042(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNeedInventoryUpdate;                              // 0x1043(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30CF[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  OverridePostProcessSettings;                       // 0x1050(0x560)(Edit, NativeAccessSpecifierPublic)
	int32                                        PipMaterialIdx;                                    // 0x15B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PipFOV;                                            // 0x15B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayerCameraFOVMultiplier;                         // 0x15B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30D0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              PipRenderDynamicMaterial;                          // 0x15C0(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*              PipSceneCapture;                                   // 0x15C8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                PipRenderTarget;                                   // 0x15D0(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             PipResolution;                                     // 0x15D8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30D1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UScopedWeaponAttachment* GetDefaultObj();

	struct FScopeModifications GetScopeMods(class ABaseWeapon* Weapon);
	float GetMeshspaceOffsetVertical(class ABaseWeapon* Weapon);
	float GetMeshspaceOffsetHorizontal(class ABaseWeapon* Weapon);
	float GetMeshspaceOffsetDistance(class ABaseWeapon* Weapon);
};

// 0xA0 (0x150 - 0xB0)
// Class ReadyOrNot.ScoringComponent
class UScoringComponent : public UActorComponent
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_26B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_30D4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FScoreData                            ScoringData;                                       // 0xB8(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                   ScoreGroup;                                        // 0xE8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                ScoreGroupName;                                    // 0xF8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EObjectiveLevel                   ObjectiveLevel;                                    // 0x108(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoAddToScorePool : 1;                           // Mask: 0x1, PropSize: 0x10x109(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_26C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bShowPopupOnTakeAllScoresWithNoChange;             // 0x10A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30D5[0x3D];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataTable*                            ScoreGroupDataTable;                               // 0x148(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UScoringComponent* GetDefaultObj();

	int32 GetTotalScore(bool bOnlyEnabled, bool bOnlyGiven);
	int32 GetScore(const class FString& ScoreName);
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ScoringInterface
class IScoringInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IScoringInterface* GetDefaultObj();

	class UScoringComponent* GetScoringComponent();
};

// 0x50 (0x270 - 0x220)
// Class ReadyOrNot.ScoringManager
class AScoringManager : public AInfo
{
public:
	uint8                                        Pad_30F5[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TotalScorePool;                                    // 0x238(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_30F6[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FScoreGroup>                   ObjectiveScoreGroups;                              // 0x248(0x10)(Net, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FScorePenaltyData>             PenaltyScoreGroups;                                // 0x258(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_30F7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsOfficialScoring;                                // 0x26C(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30F8[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AScoringManager* GetDefaultObj();

	void TakeScores(class UScoringComponent* InScoringComponent, TArray<class FString>& ScoreNames, const class FString& TakeReason, bool bDisplayScoreOnHUD, bool bDisableScores);
	void TakeScore(class UScoringComponent* InScoringComponent, const class FString& ScoreName, const class FString& TakeReason, bool bDisplayScoreOnHUD, bool bDisableScore);
	void TakeAllScoresExcept(class UScoringComponent* InScoringComponent, TArray<class FString>& ScoreNames, const class FString& TakeReason, bool bDisplayScoreOnHUD, bool bDisableScores);
	void TakeAllScores(class UScoringComponent* InScoringComponent, const class FString& TakeReason, bool bDisplayScoreOnHUD, bool bDisableScores);
	void RevokePenalty(class UScoringComponent* InScoringComponent, const class FString& PenaltyGroupName);
	void RevokeAllPenalties(class UScoringComponent* InScoringComponent);
	void Multicast_DisplayScore(class FText& ScoreText, int32 Score, bool bGive);
	bool IsOfficialScoring();
	void HasClearedMission(bool* bHasClearedMission, bool* bSoftClearedMission, bool* bMissionFailed);
	void GiveScores(class UScoringComponent* InScoringComponent, TArray<class FString>& ScoreNames, bool bDisplayScoreOnHUD, const class FString& ScoreText, float DisplayOnHUDDelay, int32 CustomScoreOnHUD);
	void GiveScore(class UScoringComponent* InScoringComponent, const class FString& ScoreName, bool bDisplayScoreOnHUD, const class FString& ScoreText, float DisplayOnHUDDelay, int32 CustomScoreOnHUD);
	void GivePenalty(class UScoringComponent* InScoringComponent, const class FString& PenaltyGroupName, bool bDisplayScoreOnHUD, const class FString& ScoreText, float DisplayOnHUDDelay, int32 CustomScoreOnHUD);
	void GiveFakeScore(class UScoringComponent* InScoringComponent, const class FString& ScoreName, bool bDisplayScoreOnHUD, const class FString& ScoreText, float DisplayOnHUDDelay, int32 CustomScoreOnHUD);
	void GiveCustomPenalty(const class FString& PenaltyGroupName, int32 PenaltyScore, bool bDisplayScoreOnHUD, float DisplayOnHUDDelay);
	void GiveAllScores(class UScoringComponent* InScoringComponent, bool bOnlyEnabledScore, bool bDisplayScoreOnHUD, const class FString& ScoreText, float DisplayOnHUDDelay, int32 CustomScoreOnHUD);
	void GetTotalScorePool(int32* MaxScore);
	int32 GetTotalScoreFromArray(TArray<struct FScoreData>& InScoreDataArray);
	int32 GetTotalScoreCountFromArray(TArray<struct FScoreData>& InScoreDataArray, bool bIncludeHiddenScores);
	void GetTotalScore(int32* TotalScore, bool bIncludePrimaryScores);
	int32 GetTotalNonGivenScoresFromArray(TArray<struct FScoreData>& InScoreDataArray);
	int32 GetTotalGivenScoresFromArray(TArray<struct FScoreData>& InScoreDataArray, bool bIncludeHiddenScores);
	int32 GetTotalActorsTrackingScore();
	void GetSuspectCount(int32* OutReported, int32* OutArrested, int32* OutKilled, int32* OutTotal);
	TArray<struct FScoreGroup> GetScoreGroups();
	void GetScoreCountFromGroup(const class FString& InGroupName, int32* OutScoresGiven, int32* OutTotalScores, bool bRequiredOnly);
	void GetReportCount(int32* ReportedCount, int32* TotalReports);
	TArray<struct FScorePenaltyData> GetPenaltyScoreGroups();
	void GetObjectiveCompletionStatus(int32* ObjectivesComplete, int32* ObjectivesFailed, int32* TotalObjectives);
	int32 GetNonGivenScoreCountFromGroup(TArray<struct FScoreGroup>& InScoreGroupArray);
	int32 GetNonGivenScoreCountFromArray(TArray<struct FScoreData>& InScoreDataArray, bool bOnlyEnabled);
	int32 GetGivenScoreCountFromGroup(TArray<struct FScoreGroup>& InScoreGroupArray);
	int32 GetGivenScoreCountFromArray(TArray<struct FScoreData>& InScoreDataArray, bool bIncludeHiddenScores);
	void GetEvidenceCount(int32* EvidenceCollected, int32* TotalEvidence);
	float GetCurrentScoreAsPercentage();
	void GetCivilianCount(int32* OutReported, int32* OutInjured, int32* OutKilled, int32* OutArrested, int32* OutTotal);
	class AScoringManager* Get();
	void DisplayPenalties(class UScoringComponent* InScoringComponent, bool bCondensed, const class FString& ScoreTextOverride);
	void DisplayBonusesAndPenalties(class UScoringComponent* InScoringComponent, bool bCondensed, const class FString& ScoreTextOverride);
	void DisplayBonuses(class UScoringComponent* InScoringComponent, bool bCondensed, const class FString& ScoreTextOverride);
	void ChangeScoreGroup(class UScoringComponent* InScoringComponent, const class FString& NewGroupName);
	class FString CalculateGradeLetterFromScore(int32 Score);
	class FString CalculateGradeLetterFromPlayerScore();
	class FString CalculateGradeLetterFromPercentage(float ScorePercentage);
	bool AnyScoresGiven(TArray<struct FScoreBonus>& InScoreBonusArray);
	bool AllScoresGiven(TArray<struct FScoreBonus>& InScoreBonusArray);
	bool AllRequiredScoresGiven(TArray<struct FScoreBonus>& InScoreBonusArray);
};

// 0x0 (0x288 - 0x288)
// Class ReadyOrNot.ScreenspaceMarkerWidget
class UScreenspaceMarkerWidget : public UCommonUserWidget
{
public:

	static class UClass* StaticClass();
	static class UScreenspaceMarkerWidget* GetDefaultObj();

	void ShowWidget();
	void HideWidget();
};

// 0x60 (0x90 - 0x30)
// Class ReadyOrNot.ScriptedDialogue
class UScriptedDialogue : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            DialogueFinished;                                  // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                               WorldContextObject;                                // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AReadyOrNotCharacter*                  Character;                                         // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundSource*                          VoiceSoundSource;                                  // 0x50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_30F9[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UScriptedDialogue* GetDefaultObj();

	class UScriptedDialogue* StartCharacterScriptedDialogue(class AReadyOrNotCharacter* Character, const class FString& VoiceLine);
	class UScriptedDialogue* Start2DScriptedDialogue(class UObject* WorldContextObject, class UFMODEvent* Event, const class FString& Speaker, const class FString& VoiceLine, class FName SpeakerTag);
	void HandleDialogueFinished();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.ScriptedLevelEvents
class UScriptedLevelEvents : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UScriptedLevelEvents* GetDefaultObj();

	void GiveWorldBuildingActivityByTag(class ACyberneticController* Controller, class FName Tag, float TimeDoingActivity);
	class ACyberneticController* GetCyberneticsControllerByTag(class FName Tag);
	class ACyberneticCharacter* GetCyberneticsCharacterByTag(class FName Tag);
};

// 0x10 (0x7E0 - 0x7D0)
// Class ReadyOrNot.SearchAndDestroyGM
class ASearchAndDestroyGM : public AReadyOrNotGameMode_PVP
{
public:
	bool                                         bBombPlanted;                                      // 0x7D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30FC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumRedSpawned;                                     // 0x7D4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumBlueSpawned;                                    // 0x7D8(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30FD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASearchAndDestroyGM* GetDefaultObj();

	int32 GetNumberOfActivePlayersOnTeam(enum class ETeamType Team);
};

// 0x10 (0x7F0 - 0x7E0)
// Class ReadyOrNot.SearchAndDestroyGS
class ASearchAndDestroyGS : public AReadyOrNotGameState
{
public:
	float                                        BombCountActive;                                   // 0x7E0(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBombPlanted;                                      // 0x7E4(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBombDetonate;                                     // 0x7E5(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBombDefused;                                      // 0x7E6(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_30FE[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      bHasBomb;                                          // 0x7E8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASearchAndDestroyGS* GetDefaultObj();

};

// 0x60 (0x1F8 - 0x198)
// Class ReadyOrNot.SearchAndSecureActivity
class USearchAndSecureActivity : public UBaseActivity
{
public:
	FMulticastInlineDelegateProperty_            OnSearchComplete;                                  // 0x198(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_30FF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 BreachDoor;                                        // 0x1B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3100[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        AllSecurables;                                     // 0x1E0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AActor*                                ClosestSecurable;                                  // 0x1F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USearchAndSecureActivity* GetDefaultObj();

};

// 0x20 (0x1B8 - 0x198)
// Class ReadyOrNot.SearchLandmarkActivity
class USearchLandmarkActivity : public UBaseActivity
{
public:
	class ACoverLandmark*                        CoverLandmark;                                     // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3101[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USearchLandmarkActivity* GetDefaultObj();

	void TickSearchStage(float DeltaTime, float Uptime);
	void Notify_SearchLandmark();
	bool IsSearchFinished();
	void EnterSearchStage();
	void EnterMoveToStage();
	void EnterCompleteStage();
	bool CanSearchNow();
	bool CanAbortSearch();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.Securable
class ISecurable : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISecurable* GetDefaultObj();

	void Secure(class AReadyOrNotCharacter* Instigator);
	bool IsSecured();
	struct FVector GetLocation();
	bool CanBeSecuredByTrailers();
	bool CanBeSecured();
};

// 0xF0 (0x410 - 0x320)
// Class ReadyOrNot.SettingsMenuGamepad
class USettingsMenuGamepad : public UMenuWidget
{
public:
	TArray<struct FKeyBinding>                   CharacterControls;                                 // 0x320(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKeyBinding>                   DroneControls;                                     // 0x330(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKeyBinding>                   SharedControls;                                    // 0x340(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UControlsBind*, struct FAxisMappingStruct> AxesControlBinds;                                  // 0x350(0x50)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class UControlsBind*, struct FActionMappingStruct> ActionsControlBinds;                               // 0x3A0(0x50)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FKeyBinding>                   UnbindableControls;                                // 0x3F0(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UIllegalUnbindModal*                   IllegalKeyConflictDetectedPopUp;                   // 0x400(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidgetStack*         WidgetStack;                                       // 0x408(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USettingsMenuGamepad* GetDefaultObj();

	void SelectNewTab(const TArray<class UCommonButtonBase*>& TabButtonsArray, int32 WidgetIndex, bool GoingToPreviousWidget);
	void EndButtonsDisabledForBinding();
};

// 0x10 (0x4F0 - 0x4E0)
// Class ReadyOrNot.ShellRackShellComponent
class UShellRackShellComponent : public UStaticMeshComponent
{
public:
	int32                                        ShellNumber;                                       // 0x4E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3103[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShellRackShellComponent* GetDefaultObj();

};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.ShotDetectionVolume
class AShotDetectionVolume : public AActor
{
public:
	class UBoxComponent*                         Bounds;                                            // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AShotDetectionVolume* GetDefaultObj();

	void OnShotFired(class ABaseWeapon* FiringWeapon, class APlayerCharacter* FiringPlayer);
};

// 0x1B8 (0x268 - 0xB0)
// Class ReadyOrNot.SkinComponent
class USkinComponent : public UActorComponent
{
public:
	uint8                                        Pad_3104[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  Name;                                              // 0xB8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  Description;                                       // 0xD0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             Icon;                                              // 0xE8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequiresDLC;                                      // 0x110(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGameVersionRestriction           Dlc;                                               // 0x111(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bResetsToFactorySkin;                              // 0x112(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         LockedToTeam;                                      // 0x113(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3105[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class AActor>>            LockedToBlueprint;                                 // 0x118(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class USkeletalMesh*, class USkeletalMesh*> SkeletalMeshSkinMap;                               // 0x128(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<class USkeletalMeshComponent*, class USkeletalMesh*> PreAppliedSkeletalMeshMap;                         // 0x178(0x50)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class UStaticMesh*, class UStaticMesh*> StaticMeshSkinMap;                                 // 0x1C8(0x50)(Edit, NativeAccessSpecifierPublic)
	TMap<class UStaticMeshComponent*, class UStaticMesh*> PreAppliedStaticMeshMap;                           // 0x218(0x50)(ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USkinComponent* GetDefaultObj();

	void ResetSkin();
	bool IsFactorySkin();
	bool HasDLCUnlocked();
	class UTexture2D* GetClassDefaultIcon(TSubclassOf<class USkinComponent> SkinComponent);
};

// 0x8 (0x230 - 0x228)
// Class ReadyOrNot.SlowDownVolume
class ASlowDownVolume : public ATriggerBox
{
public:
	float                                        SlowDownMultiplier;                                // 0x228(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3108[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASlowDownVolume* GetDefaultObj();

	void OnOverlapEndComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapBeginComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
};

// 0x10 (0x298 - 0x288)
// Class ReadyOrNot.SmallSlot_V2
class USmallSlot_V2 : public UCommonUserWidget
{
public:
	class UTextBlock*                            ItemName;                                          // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         Equipped;                                          // 0x290(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3109[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USmallSlot_V2* GetDefaultObj();

	void SetText(class FText Text);
	void SetEquipped(bool IsEquipped);
	void OnEquipped();
	bool GetEquipped();
};

// 0x40 (0x2550 - 0x2510)
// Class ReadyOrNot.SniperCharacter
class ASniperCharacter : public APlayerCharacter
{
public:
	int32                                        Designation;                                       // 0x2510(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bADSLocked;                                        // 0x2514(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_310A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimerHandle                          ExitControlHandle;                                 // 0x2518(0x8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UScopedWeaponAttachment>   PrimaryScopeAttachment;                            // 0x2520(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         PrimaryMuzzleAttachment;                           // 0x2528(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         PrimaryUnderbarrelAttachment;                      // 0x2530(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UScopedWeaponAttachment>   SecondaryScopeAttachment;                          // 0x2538(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         SecondaryMuzzleAttachment;                         // 0x2540(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponAttachment>         SecondaryUnderbarrelAttachment;                    // 0x2548(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASniperCharacter* GetDefaultObj();

	void ExitControl();
};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.SniperSpawn
class ASniperSpawn : public AActor
{
public:
	class FName                                  SpawnLabel;                                        // 0x220(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementLocked;                                   // 0x228(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartInADS;                                       // 0x229(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLockADS;                                          // 0x22A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_310C[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ASniperCharacter>          SniperClass;                                       // 0x230(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASniperCharacter>          SpotterClass;                                      // 0x238(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASniperCharacter>          MarksmanClass;                                     // 0x240(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                       SpawnDirection;                                    // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       RootSceneComponent;                                // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasSniperSpawned;                                 // 0x258(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_310D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASniperCharacter*                      SpawnedSniper;                                     // 0x260(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASniperSpawn* GetDefaultObj();

	void SpawnSpotterHere(int32 Designation);
	void SpawnSniperHere(int32 Designation);
	void SpawnPersonnelOfClass(TSubclassOf<class ASniperCharacter> CharacterClass, int32 Designation);
	void SpawnMarksmanHere(int32 Designation);
};

// 0x8 (0x1D0 - 0x1C8)
// Class ReadyOrNot.SoftCoverCombatMove
class USoftCoverCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_310E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoftCoverCombatMove* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class ReadyOrNot.SoundData
class USoundData : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class USoundData* GetDefaultObj();

};

// 0x80 (0xC0 - 0x40)
// Class ReadyOrNot.SoundManager
class USoundManager : public UTickableWorldSubsystem
{
public:
	bool                                         bForceLegacySound;                                 // 0x40(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasFinishedSetup;                                 // 0x41(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_310F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APortalVolume*>                 PortalVolumes;                                     // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ARoomVolume*>                   RoomVolumes;                                       // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundSource*>                  ActiveSoundSources;                                // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundSource*>                  InactiveSoundSources;                              // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UBVHNode*                              RootBVHNode;                                       // 0x88(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3110[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundManager* GetDefaultObj();

	class USoundManager* Get(class UWorld* World);
};

// 0x48 (0x70 - 0x28)
// Class ReadyOrNot.BVHNode
class UBVHNode : public UObject
{
public:
	uint8                                        Pad_3111[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UBVHNode*>                      Children;                                          // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ARoomVolume*>                   Rooms;                                             // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UWorld*                                World;                                             // 0x68(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UBVHNode* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class ReadyOrNot.SoundNodeVolume
class USoundNodeVolume : public USoundNodeAssetReferencer
{
public:
	float                                        VolumeAdjust;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3112[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeVolume* GetDefaultObj();

};

// 0x78 (0x298 - 0x220)
// Class ReadyOrNot.SoundPropagator
class ASoundPropagator : public AActor
{
public:
	TMap<class APropagationPoint*, float>        PropagationPoints;                                 // 0x220(0x50)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	uint8                                        bStopPropagationIfClosestToSound : 1;              // Mask: 0x1, PropSize: 0x10x270(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_26D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3115[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PathTracerRefreshRate;                             // 0x274(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavCheckRefreshRate;                               // 0x278(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableDebugSpheres : 1;                           // Mask: 0x1, PropSize: 0x10x27C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableDebugPathPoints : 1;                        // Mask: 0x2, PropSize: 0x10x27C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_26E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3116[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         PropagationSwitchEnter;                            // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                         PropagationSwitchExit;                             // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ASoundPropagator* GetDefaultObj();

	void OnPropagationExitOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnPropagationEnterOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
};

// 0x248 (0x270 - 0x28)
// Class ReadyOrNot.SoundSource
class USoundSource : public UObject
{
public:
	uint8                                        Pad_311B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsRunning;                                        // 0x30(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsActive;                                         // 0x31(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPaused;                                         // 0x32(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_311C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSincePrimaryUpdate;                            // 0x34(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeSincePropagationUpdate;                        // 0x38(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrimaryUpdateInterval;                             // 0x3C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PropagationUpdateInterval;                         // 0x40(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOcclusionType                    OcclusionType;                                     // 0x44(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPropagationType                  PropagationType;                                   // 0x45(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESoundSourceType                  SoundSourceType;                                   // 0x46(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EHierarchyType                    HierarchyType;                                     // 0x47(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundSource*>                  ChildrenSoundSources;                              // 0x48(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundSource*                          ParentSoundSource;                                 // 0x58(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 InstanceGuid;                                      // 0x60(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Event;                                             // 0x70(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_311D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            Transform;                                         // 0x80(0x30)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USceneComponent*                       AttachToComponent;                                 // 0xB0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AttachPointName;                                   // 0xB8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDebugMode;                                        // 0xC0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsDoorAttachedSound;                              // 0xC1(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_311E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0xC8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRegisterLater;                                    // 0xD0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPlayLater;                                        // 0xD1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_311F[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSoundStopped;                                    // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_3120[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ProgrammerSoundName;                               // 0x128(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3121[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnEventStopped;                                    // 0x188(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSoundFinished;                                   // 0x198(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTimelineMarker;                                  // 0x1A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTimelineBeat;                                    // 0x1B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FName, float>                     ParameterCache;                                    // 0x1C8(0x50)(Edit, BlueprintVisible, SimpleDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_3122[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundSource* GetDefaultObj();

	void Stop();
	void SetPropagationType(enum class EPropagationType InPropagationType);
	void SetPropagationTickInterval(float Interval);
	void SetProgrammerSoundName(const class FString& Value);
	void SetPrimaryTickInterval(float Interval);
	void SetPaused(bool Paused);
	void SetParameter(class FName Name, float Value);
	void SetOcclusionType(enum class EOcclusionType InOcclusionType);
	void SetDebugMode(bool InbDebugMode);
	void ResetSoundSource();
	void ReplaceAnimNotifies(class UAnimSequenceBase* AnimationSequence);
	void Play();
	void Initialize(class UFMODEvent* InEvent, const struct FTransform& InTransform, const TArray<struct FMODParam>& Params, enum class EOcclusionType InOcclusionType, enum class EPropagationType InPropagationType, bool InbDebugMode);
	void Detach();
	class USoundSource* CreateThirdPersonSound(class UWorld* InWorld, class UFMODEvent* InEvent, const struct FTransform& InTransform, const TArray<struct FMODParam>& Params, enum class EOcclusionType InOcclusionType, enum class EPropagationType InPropagationType, bool InbDebugMode);
	class USoundSource* CreateFirstPersonSound(class UWorld* InWorld, class UFMODEvent* InEvent, const struct FTransform& InTransform, const TArray<struct FMODParam>& Params, bool InbDebugMode);
	void Attach(class USceneComponent* InAttachToComponent, class FName InAttachPointName);
	void AddChild(class USoundSource* Child);
};

// 0x20 (0x58 - 0x38)
// Class ReadyOrNot.SoundSourceAnimNotify
class USoundSourceAnimNotify : public UAnimNotify
{
public:
	uint8                                        bFollow : 1;                                       // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_26F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3123[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                AttachName;                                        // 0x40(0x10)(Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            Event;                                             // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USoundSourceAnimNotify* GetDefaultObj();

};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.SpawnGenerator
class ASpawnGenerator : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBillboardComponent*                   BillboardComponent;                                // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         SpawnTeam;                                         // 0x230(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3124[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint16                                       Rows;                                              // 0x232(0x2)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint16                                       Columns;                                           // 0x234(0x2)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3125[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RowSpacing;                                        // 0x238(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ColumnSpacing;                                     // 0x23C(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bShowNodes : 1;                                    // Mask: 0x1, PropSize: 0x10x240(0x1)(Edit, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_270 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3126[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerStart*>                  PlayerStarts;                                      // 0x258(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3127[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASpawnGenerator* GetDefaultObj();

	void UpdatePlayerStartTags();
	void SelectAll();
	void RefreshSpawns();
	enum class ETeamType GetSpawnTeam();
	TArray<struct FVector> GetNodes();
	TArray<class APlayerStart*> GetAllPlayerStarts();
};

// 0x80 (0xB0 - 0x30)
// Class ReadyOrNot.SpawnSkeletalMeshAnimNotifyState
class USpawnSkeletalMeshAnimNotifyState : public UAnimNotifyState
{
public:
	class USkeletalMesh*                         SkeletalMeshToSpawn;                               // 0x30(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                       PlayAnimation;                                     // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                            MeshTransform;                                     // 0x40(0x30)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bEnableWeaponFOVShader;                            // 0x70(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnlyOwnerSee;                                     // 0x71(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOwnerNoSee;                                       // 0x72(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3128[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  BoneToSpawnOn;                                     // 0x74(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3129[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDestroyAtEnd;                                     // 0x8C(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSimulatePhysicsAtEnd;                             // 0x8D(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ForceVector;                                       // 0x90(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASkeletalMeshActor*                    SkeletalMeshActor;                                 // 0xA0(0x8)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpawnSkeletalMeshAnimNotifyState* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class ReadyOrNot.SpawnStaticMeshAnimNotifyState
class USpawnStaticMeshAnimNotifyState : public UAnimNotifyState
{
public:
	class UStaticMesh*                           StaticMeshToSpawn;                                 // 0x30(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BoneToSpawnOn;                                     // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCastShadow;                                       // 0x50(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnlyOwnerSee;                                     // 0x51(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOwnerNoSee;                                       // 0x52(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDestroyAtEnd;                                     // 0x53(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSimulatePhysicsAtEnd;                             // 0x54(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ForceVector;                                       // 0x58(0xC)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_312F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpawnStaticMeshAnimNotifyState* GetDefaultObj();

};

// 0x0 (0x310 - 0x310)
// Class ReadyOrNot.SpectateHUD
class ASpectateHUD : public AHUD
{
public:

	static class UClass* StaticClass();
	static class ASpectateHUD* GetDefaultObj();

};

// 0x68 (0x310 - 0x2A8)
// Class ReadyOrNot.SpectatePawn
class ASpectatePawn : public ASpectatorPawn
{
public:
	class UCameraComponent*                      PawnCamera;                                        // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeadSpectatePawn;                                 // 0x2B0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3131[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bBlendWithViewTarget;                              // 0x2B2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPendingCenterprint;                               // 0x2B3(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PendingCenterprintDuration;                        // 0x2B4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  PendingCenterprintType;                            // 0x2B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      PendingCenterprintOther;                           // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             HeadcamMaterial;                                   // 0x2C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              HeadcamMaterialInstance;                           // 0x2D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               SpectateWidget;                                    // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpectatorCharacterHUD*                SpectatorHUD;                                      // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldShowViewTargetHUD;                          // 0x2E8(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3132[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                CurrentViewTarget;                                 // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHideWidgets;                                      // 0x2F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3133[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      Killer;                                            // 0x300(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      KilledCharacter;                                   // 0x308(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASpectatePawn* GetDefaultObj();

	void SpectatePreviousPlayer();
	void SpectateNextPlayer();
	void SetViewTarget(class AReadyOrNotCharacter* InCharacter);
	void SetSpectatorCharacterWidget(class USpectatorCharacterHUD* NewHud);
	void OnTeamChatPressed();
	void OnChatPressed();
	enum class ETeamType GetTeam();
	void EscapeMenu();
	void CleanUpOldPlayer();
	void CenterPrint(class FName Type, float Duration, class APlayerCharacter* Other);
};

// 0x0 (0x258 - 0x258)
// Class ReadyOrNot.SpinTestHeatmapVolume
class ASpinTestHeatmapVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ASpinTestHeatmapVolume* GetDefaultObj();

	void VisualizeHeatMapIfExists();
	void FlushVisualization();
};

// 0x58 (0x278 - 0x220)
// Class ReadyOrNot.SplineTrigger
class ASplineTrigger : public AActor
{
public:
	FMulticastInlineDelegateProperty_            Delegate_OnSplineEnclosureEntered;                 // 0x220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            Delegate_OnSplineEnclosureExited;                  // 0x230(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bInvertBounds;                                     // 0x240(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3136[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastValidPlayerLocation;                           // 0x244(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x250(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDrawDebugElements : 1;                            // Mask: 0x2, PropSize: 0x10x250(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_271 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3137[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               AverageSplinePointLocation;                        // 0x254(0xC)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsOutsideSplineEnclosure : 1;                     // Mask: 0x1, PropSize: 0x10x260(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_272 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3138[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USplineComponent*                      SplineComponent;                                   // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3139[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASplineTrigger* GetDefaultObj();

	void ToggleDrawDebug();
	void OnSplineEnclosureExited__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnSplineEnclosureExited(class APlayerCharacter* PlayerCharacter);
	void OnSplineEnclosureEntered__DelegateSignature(class APlayerCharacter* PlayerCharacter);
	void OnSplineEnclosureEntered(class APlayerCharacter* PlayerCharacter);
	bool IsOutsideSplineEnclosure();
	bool IsInsideSplineEnclosure();
	bool IsActorOutsideSplineEnclosure(class AActor* InActor);
	bool IsActorInsideSplineEnclosure(class AActor* InActor);
	void EnableTrigger();
	void DisableTrigger();
};

// 0x0 (0x278 - 0x278)
// Class ReadyOrNot.SplineTrigger_Incrimination
class ASplineTrigger_Incrimination : public ASplineTrigger
{
public:

	static class UClass* StaticClass();
	static class ASplineTrigger_Incrimination* GetDefaultObj();

};

// 0x28 (0x248 - 0x220)
// Class ReadyOrNot.StackUpActor
class AStackUpActor : public AActor
{
public:
	class USceneComponent*                       DefaultScene;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Depth;                                             // 0x228(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_313A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           OccupiedBy;                                        // 0x230(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESquadPosition                    StackUpPosition;                                   // 0x238(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_313B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 LinkedDoor;                                        // 0x240(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AStackUpActor* GetDefaultObj();

};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.StationSubLevelController
class AStationSubLevelController : public AActor
{
public:
	class FName                                  LevelToLoad;                                       // 0x220(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  EnableAfterCompleting;                             // 0x228(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  DisableAfterCompleting;                            // 0x230(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsMultiplayerOnly;                                // 0x238(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_313C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStationSubLevelController* GetDefaultObj();

	TArray<class FString> GetStreamingLevelOptions();
	TArray<class FString> GetCampaignLevelOptions();
};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.SteamworksIntegration
class USteamworksIntegration : public UObject
{
public:

	static class UClass* StaticClass();
	static class USteamworksIntegration* GetDefaultObj();

	bool IsSteamEnabled();
	bool IsDLCInstalledEnum(enum class EGameVersionRestriction GameFeature);
	bool IsDLCInstalled(int32 AppId);
	int32 GetDLCNumber(enum class EGameVersionRestriction InDLC);
	enum class EGameVersionRestriction GetDLCENum(int32 InDLC);
};

// 0x0 (0x620 - 0x620)
// Class ReadyOrNot.StingerDamageType
class UStingerDamageType : public UStunDamage
{
public:

	static class UClass* StaticClass();
	static class UStingerDamageType* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.StrideWarpingLibrary
class UStrideWarpingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStrideWarpingLibrary* GetDefaultObj();

	void UpdateStrideWarping(float DeltaTime, struct FVector& Velocity, float& VelocityInterpTime, float& CurrentAnimationSpeed, float& PlayrateMaxAdjustment, float& StrideScaling, float& PlayRate, struct FVector& VelocitySmoothed);
};

// 0xB0 (0xE8 - 0x38)
// Class ReadyOrNot.SubtitlesSettings
class USubtitlesSettings : public UDeveloperSettings
{
public:
	class FString                                FallbackLocale;                                    // 0x38(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>             AvailableLocales;                                  // 0x48(0x50)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<class FString, float>                   VoiceLineCooldowns;                                // 0x98(0x50)(Edit, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USubtitlesSettings* GetDefaultObj();

};

// 0x168 (0x198 - 0x30)
// Class ReadyOrNot.SubtitlesSubsystem
class USubtitlesSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                        Pad_3142[0x168];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USubtitlesSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.SubtitlesStatics
class USubtitlesStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USubtitlesStatics* GetDefaultObj();

	void PlaySubtitles(class UObject* WorldContextObject, const class FString& Speaker, const class FString& VoiceLine, float Length, class FName SpeakerTag);
	TMap<class FString, class FText> GetAvailableLocales();
};

// 0x10 (0x270 - 0x260)
// Class ReadyOrNot.SubtitleBlock
class USubtitleBlock : public UUserWidget
{
public:
	float                                        CurrentTime;                                       // 0x260(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TotalTime;                                         // 0x264(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBoxSlot*                      VerticalBoxSlot;                                   // 0x268(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class USubtitleBlock* GetDefaultObj();

	void SetText(class FText& Text);
	void SetBackgroundColor(const struct FLinearColor& Color);
};

// 0x50 (0x2B0 - 0x260)
// Class ReadyOrNot.SubtitlesWidget
class USubtitlesWidget : public UUserWidget
{
public:
	TSubclassOf<class USubtitleBlock>            SubtitleBlockClass;                                // 0x260(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSubtitles;                                      // 0x268(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LingerTime;                                        // 0x26C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInTime;                                        // 0x270(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeOutTime;                                       // 0x274(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PadInTime;                                         // 0x278(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3144[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVerticalBox*                          SubtitlesVerticalBox;                              // 0x280(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USubtitleBlock*>                SubtitleBlocks;                                    // 0x288(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USubtitleBlock*                        PreviousSubtitle;                                  // 0x298(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3145[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USubtitlesWidget* GetDefaultObj();

	void SetSubtitlesSize(enum class ESubtitlesSize Size);
};

// 0x18 (0x1E0 - 0x1C8)
// Class ReadyOrNot.SuppressionCombatMove
class USuppressionCombatMove : public UBaseCombatMoveActivity
{
public:
	uint8                                        Pad_3146[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USuppressionCombatMove* GetDefaultObj();

};

// 0x10 (0x1FA0 - 0x1F90)
// Class ReadyOrNot.SuspectCharacter
class ASuspectCharacter : public ACyberneticCharacter
{
public:
	uint8                                        Pad_3147[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASuspectCharacter* GetDefaultObj();

};

// 0x20 (0x430 - 0x410)
// Class ReadyOrNot.SuspectCombatActivity
class USuspectCombatActivity : public UBaseCombatActivity
{
public:
	uint8                                        Pad_3148[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USuspectCombatActivity* GetDefaultObj();

};

// 0x0 (0x8D8 - 0x8D8)
// Class ReadyOrNot.SuspectController
class ASuspectController : public ACyberneticController
{
public:

	static class UClass* StaticClass();
	static class ASuspectController* GetDefaultObj();

};

// 0x90 (0xD0 - 0x40)
// Class ReadyOrNot.SuspectsAndCivilianManager
class USuspectsAndCivilianManager : public UTickableWorldSubsystem
{
public:
	TArray<class ATrapActor*>                    InvestigatedTrap;                                  // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class ACyberneticCharacter*>          Suspects;                                          // 0x50(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ACyberneticCharacter*>          Civilians;                                         // 0x60(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        TimeSinceLastInvestigation;                        // 0x70(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_314A[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, float>                   SpeechCooldownMap;                                 // 0x80(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USuspectsAndCivilianManager* GetDefaultObj();

	void Server_PlaySharedBarkOrStartConversation(const class FString& SpeechRow, class ACyberneticCharacter* Speaker, float Cooldown);
	TArray<class ACyberneticCharacter*> GetAllSuspectsAndCivilians();
};

// 0x98 (0xC8 - 0x30)
// Class ReadyOrNot.ArmourMaterial
class UArmourMaterial : public UPrimaryDataAsset
{
public:
	float                                        DamageReduction;                                   // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDamageReduction;                                // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDurabilityEnabled;                                // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_314B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Durability;                                        // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ArmourLevel;                                       // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpallingChance;                                    // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementSpeedModifier;                             // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementAccelerationModifier;                      // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       HitParticle;                                       // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DisplayName;                                       // 0x58(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                        Priority;                                          // 0x70(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_314C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  Description;                                       // 0x78(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>             LoadoutIcon;                                       // 0x90(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class EGameVersionRestriction>   LockedToDLC;                                       // 0xB8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UArmourMaterial* GetDefaultObj();

};

// 0x40 (0xA80 - 0xA40)
// Class ReadyOrNot.SWATArmour
class ASWATArmour : public ABaseArmour
{
public:
	enum class EArmourCoverage                   MaxArmourCoverage;                                 // 0xA40(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_314D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UArmourMaterial*                       CarrierMaterial;                                   // 0xA48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalSlots;                                        // 0xA50(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultPrimaryAmmoSlots;                           // 0xA54(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultSecondaryAmmoSlots;                         // 0xA58(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultGrenadeSlots;                               // 0xA5C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DefaultTacticalDeviceSlots;                        // 0xA60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EArmourCoverage                   ArmourCoverage;                                    // 0xA64(0x1)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_314E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UArmourMaterial*                       ArmourMaterial;                                    // 0xA68(0x8)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                Durabilities;                                      // 0xA70(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class ASWATArmour* GetDefaultObj();

};

// 0x30 (0x250 - 0x220)
// Class ReadyOrNot.SwatAutomationManager
class ASwatAutomationManager : public AInfo
{
public:
	uint8                                        Pad_314F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ADoor*>                         Doors;                                             // 0x228(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         BreachedDoors;                                     // 0x238(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ADoor*                                 CurrentDoor;                                       // 0x248(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ASwatAutomationManager* GetDefaultObj();

};

// 0x50 (0x1FE0 - 0x1F90)
// Class ReadyOrNot.SWATCharacter
class ASWATCharacter : public ACyberneticCharacter
{
public:
	uint8                                        Pad_3150[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class URosterCharacter*                      RosterCharacter;                                   // 0x1FD0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3151[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASWATCharacter* GetDefaultObj();

	void PlayOnShotDialogue(bool bIsFriendly);
};

// 0x10 (0x420 - 0x410)
// Class ReadyOrNot.SwatCombatActivity
class USwatCombatActivity : public UBaseCombatActivity
{
public:
	uint8                                        Pad_3152[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USwatCombatActivity* GetDefaultObj();

};

// 0xC8 (0x328 - 0x260)
// Class ReadyOrNot.SwatCommandEntryWidget
class USwatCommandEntryWidget : public UUserWidget
{
public:
	struct FSwatCommand                          SwatCommand;                                       // 0x260(0x60)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)
	enum class ETeamType                         ActiveTeamType;                                    // 0x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3153[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          RedTeamColor;                                      // 0x2C4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          BlueTeamColor;                                     // 0x2D4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GoldTeamColor;                                     // 0x2E4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLast;                                             // 0x2F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBack;                                             // 0x2F5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bExtended;                                         // 0x2F6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3154[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextWidget*                           CommandText;                                       // 0x2F8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           KeybindText;                                       // 0x300(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                               EntryBorder;                                       // 0x308(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                ExtendedImage;                                     // 0x310(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            BackIcon;                                          // 0x318(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Flash;                                             // 0x320(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USwatCommandEntryWidget* GetDefaultObj();

};

// 0x120 (0x380 - 0x260)
// Class ReadyOrNot.SwatCommandStatusWidget
class USwatCommandStatusWidget : public UUserWidget
{
public:
	bool                                         bIsLead;                                           // 0x260(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESquadPosition                    SquadPosition;                                     // 0x261(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPlayerHealthStatus               PlayerHealthStatus;                                // 0x262(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3155[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinHeight;                                         // 0x264(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxHeight;                                         // 0x268(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3156[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UHorizontalBox*                        CurrentCommand_Box;                                // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                          CommandStatus_Box;                                 // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextWidget*                           CurrentCommand_Text;                               // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextWidget*                           CurrentCommand_Pulse_Text;                         // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextWidget*                           CurrentCommand_Status_Text;                        // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                              SizeBox;                                           // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          SwatInfo_Box;                                      // 0x2A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                        SwatStats_Box;                                     // 0x2A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           SwatName_Text;                                     // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              TeamIndicator_Box;                                 // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                TeamIndicator_Image;                               // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                              HealthStatus_SizeBox;                              // 0x2C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           PlayerHealth_Text;                                 // 0x2D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                        IssueCommand_Hotkey_RichText;                      // 0x2D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                IssueCommand_Hotkey_Icon;                          // 0x2E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_CommandCompleted;                             // 0x2E8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_CommandIssued;                                // 0x2F0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                      Anim_CommandCompletedWhileAnotherQueued;           // 0x2F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsProgress;                                       // 0x300(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3157[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          RedTeamColor;                                      // 0x304(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          BlueTeamColor;                                     // 0x314(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          ElementTeamColor;                                  // 0x324(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          NormalColor;                                       // 0x334(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          InjuredColor;                                      // 0x344(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          DeadColor;                                         // 0x354(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3158[0x1C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USwatCommandStatusWidget* GetDefaultObj();

};

// 0x410 (0x670 - 0x260)
// Class ReadyOrNot.SwatCommandWidget
class USwatCommandWidget : public UUserWidget
{
public:
	uint8                                        Pad_3163[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DirectoryStringOverride;                           // 0x270(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                DirectoryString;                                   // 0x280(0x10)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                LastActorBeforeGoingIntoSubPage;                   // 0x290(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3164[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastSubCommandPageIndex;                           // 0x29C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSwatCommand>                  ParentCommands;                                    // 0x2A0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSwatCommand>                  ActiveCommandPage;                                 // 0x2B0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSwatCommand>                  PreviousActiveCommandPage;                         // 0x2C0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                          CommandCombo;                                      // 0x2D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	enum class ETeamType                         ActiveTeamType;                                    // 0x2E0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         PreviousActiveTeamType;                            // 0x2E1(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETeamType                         OverrideActiveTeamType;                            // 0x2E2(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bOverrideActiveTeamType : 1;                       // Mask: 0x1, PropSize: 0x10x2E3(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_273 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETeamType                         ExecutionTeamType;                                 // 0x2E4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESwatCommand                      DefaultDoorOpenCommand;                            // 0x2E5(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESwatCommand                      DefaultDoorUnknownCommand;                         // 0x2E6(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESwatCommand                      DefaultCheckDoorCommand;                           // 0x2E7(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESwatCommand                      DefaultDoorLockedCommand;                          // 0x2E8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESwatCommand                      DefaultDoorUnlockedCommand;                        // 0x2E9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3165[0x8E];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                LastContextActor;                                  // 0x378(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                            ContextualData;                                    // 0x380(0x88)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3166[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHitResult                            LastExecutedCommandContextualData;                 // 0x490(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFMODEvent*                            OpenMenuEvent;                                     // 0x518(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            OpenSubCommandMenuEvent;                           // 0x520(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            ExecuteCommandEvent;                               // 0x528(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseGrenade>              Flashbang;                                         // 0x530(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseGrenade>              Stinger;                                           // 0x538(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ABaseGrenade>              CSGas;                                             // 0x540(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHoldingQueueCommandKey : 1;                       // Mask: 0x1, PropSize: 0x10x548(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_274 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3167[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USizeBox*                              SizeBox;                                           // 0x550(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          VB_Commands;                                       // 0x558(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          VB_Queue;                                          // 0x560(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                          VB_SwatCommand;                                    // 0x568(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_1;                                // 0x570(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_2;                                // 0x578(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_3;                                // 0x580(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_4;                                // 0x588(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_5;                                // 0x590(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_6;                                // 0x598(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_7;                                // 0x5A0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_8;                                // 0x5A8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_9;                                // 0x5B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandEntry_10;                               // 0x5B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               SwatCommandIssued;                                 // 0x5C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandEntryWidget*               Back;                                              // 0x5C8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           Txt_QueueBinding;                                  // 0x5D0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           Txt_QueueStatus;                                   // 0x5D8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextWidget*                           CommandDirectoryText;                              // 0x5E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                DivTop;                                            // 0x5E8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                DivBottom;                                         // 0x5F0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          RedTeamColor;                                      // 0x5F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          BlueTeamColor;                                     // 0x608(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                          GoldTeamColor;                                     // 0x618(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3168[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USwatCommandWidget* GetDefaultObj();

	void OnSwatElementChanged__DelegateSignature(enum class ETeamType TeamType);
	void OnSwatCommandQueued__DelegateSignature(const struct FQueuedSwatCommand& QueuedSwatCommand, enum class ETeamType TeamType);
	void OnSwatCommandIssued__DelegateSignature(enum class ESwatCommand SwatCommand, enum class ETeamType TeamType, class AActor* ContextActor);
	void OnPostUpdateSwatCommands__DelegateSignature(class USwatCommandWidget* Widget, TArray<struct FSwatCommand>* SwatCommands);
	void OnPageViewUpdateBP();
	void OnOpen();
	void OnInputKey();
	void OnCommandIssued(int32 Index, struct FSwatCommand& Command, bool bFromDefault);
	void OnClose();
	void InitEntryWidget(class USwatCommandEntryWidget* Entry, struct FSwatCommand& InSwatCommand, enum class ETeamType Team, bool bLast);
	class USwatCommandEntryWidget* IndexToEntryWidget(uint8 Index);
	bool HasQueuedCommandForTeam(enum class ETeamType TeamType);
	bool HasQueuedCommandForActiveTeam();
	bool GetSubCommands(const struct FSwatCommand& Command, TArray<struct FSwatCommand>* OutSubCommands);
	struct FKey GetInputTwo();
	struct FKey GetInputThree();
	struct FKey GetInputSix();
	struct FKey GetInputSeven();
	struct FKey GetInputOne();
	struct FKey GetInputNine();
	struct FKey GetInputFour();
	struct FKey GetInputFive();
	struct FKey GetInputEight();
	struct FKey GetInputBack();
	struct FKey GetCommandInput(class FName InName);
	enum class ETeamType GetActiveTeam();
	void DoCommand(const struct FSwatCommand& Command, bool bFromQueue, enum class ETeamType ActiveTeamOverride, const struct FHitResult& ContextualDataOverride, bool bOverrideContextualData);
	struct FKey ConvertIntToInputKey(int32 Int);
};

// 0xE0 (0x9B8 - 0x8D8)
// Class ReadyOrNot.SWATController
class ASWATController : public ACyberneticController
{
public:
	class UTeamFallinActivity*                   FallinActivity;                                    // 0x8D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArrestTargetActivity*                 ArrestTargetActivity;                              // 0x8E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamStackUpActivity*                  StackUpActivity;                                   // 0x8E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamBreachAndClearActivity*           BreachAndClearActivity;                            // 0x8F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDeployChemlightActivity*              DeployChemlightActivity;                           // 0x8F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHoldActivity*                         HoldActivity;                                      // 0x900(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReportTargetActivity*                 ReportTargetActivity;                              // 0x908(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCollectEvidenceActivity*              CollectEvidenceActivity;                           // 0x910(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDisarmStandaloneTrapActivity*         DisarmStandaloneTrapActivity;                      // 0x918(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDeployGrenadeAtLocationActivity*      DeployGrenadeAtLocationActivity;                   // 0x920(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UKickDoorActivity*                     KickDoorActivity;                                  // 0x928(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UC2DoorActivity*                       C2DoorActivity;                                    // 0x930(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URamDoorActivity*                      RamDoorActivity;                                   // 0x938(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UShotgunDoorActivity*                  ShotgunDoorActivity;                               // 0x940(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UThrowGrenadeThroughDoorActivity*      ThrowGrenadeThroughDoorActivity;                   // 0x948(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULaunchGrenadeThroughDoorActivity*     LaunchGrenadeThroughDoorActivity;                  // 0x950(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USearchAndSecureActivity*              SearchAndSecureActivity;                           // 0x958(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMirrorUnderDoorActivity*              MirrorUnderDoorActivity;                           // 0x960(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDisarmDoorTrapActivity*               DisarmDoorTrapActivity;                            // 0x968(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDeployWedgeActivity*                  DeployWedgeActivity;                               // 0x970(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULockPickDoorActivity*                 LockPickDoorActivity;                              // 0x978(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UToggleDoorActivity*                   ToggleDoorActivity;                                // 0x980(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScanDoorActivity*                     ScanDoorActivity;                                  // 0x988(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamCoverAreaActivity*                CoverAreaActivity;                                 // 0x990(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USearchLandmarkActivity*               SearchLandmarkActivity;                            // 0x998(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPickUpCharacterActivity*              PickUpCharacterActivity;                           // 0x9A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTrailerSearchAndSecureActivity*       TrailerSearchAndSecureActivity;                    // 0x9A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEngageTargetLessLethalActivity*       EngageLessLethalActivity;                          // 0x9B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ASWATController* GetDefaultObj();

	class UTrailerSearchAndSecureActivity* GetTrailerSearchAndSecureActivity();
	class UToggleDoorActivity* GetToggleDoorActivity();
	class UThrowGrenadeThroughDoorActivity* GetThrowGrenadeThroughDoorActivity();
	class UTeamStackUpActivity* GetStackUpActivity();
	class UShotgunDoorActivity* GetShotgunDoorActivity();
	class USearchLandmarkActivity* GetSearchLandmarkActivity();
	class USearchAndSecureActivity* GetSearchAndSecureActivity();
	class UScanDoorActivity* GetScanDoorActivity();
	class UReportTargetActivity* GetReportTargetActivity();
	class URamDoorActivity* GetRamDoorActivity();
	class UPickUpCharacterActivity* GetPickUpCharacterActivity();
	class UMirrorUnderDoorActivity* GetMirrorUnderDoorActivity();
	class ULockPickDoorActivity* GetLockPickDoorDoorActivity();
	class ULaunchGrenadeThroughDoorActivity* GetLaunchGrenadeThroughDoorActivity();
	class UKickDoorActivity* GetKickDoorActivity();
	class UHoldActivity* GetHoldActivity();
	class UTeamFallinActivity* GetFallinActivity();
	class UEngageTargetLessLethalActivity* GetEngageLessLethalActivity();
	class UDisarmStandaloneTrapActivity* GetDisarmStandaloneTrapActivity();
	class UDisarmDoorTrapActivity* GetDisarmDoorTrapActivity();
	class UDeployWedgeActivity* GetDeployWedgeActivity();
	class UDeployGrenadeAtLocationActivity* GetDeployGrenadeAtLocationActivity();
	class UDeployChemlightActivity* GetDeployChemlightActivity();
	class UTeamCoverAreaActivity* GetCoverAreaActivity();
	class UCollectEvidenceActivity* GetCollectEvidenceActivity();
	class UC2DoorActivity* GetC2DoorActivity();
	class UTeamBreachAndClearActivity* GetBreachAndClearActivity();
	class UArrestTargetActivity* GetArrestTargetActivity();
};

// 0xAE0 (0xB20 - 0x40)
// Class ReadyOrNot.SWATManager
class USWATManager : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_319A[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ASWATCharacter*>                SwatAI;                                            // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATrailerSWATCharacter*>         SwatTrailers;                                      // 0xD8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ASWATCharacter*                        ClosestFallInSwat;                                 // 0xE8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class ASWATCharacter*, float>           FallInSwat_PathFound;                              // 0xF0(0x50)(NativeAccessSpecifierPublic)
	TArray<class ASWATCharacter*>                FallInSwat;                                        // 0x140(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASWATCharacter*>                FallInSwat_FileA;                                  // 0x150(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASWATCharacter*>                FallInSwat_FileB;                                  // 0x160(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASWATCharacter*>                FallInSwat_Diamond;                                // 0x170(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<enum class ETeamType, struct FClearQueueInfo> ClearingQueue;                                     // 0x180(0x50)(NativeAccessSpecifierPublic)
	TMap<struct FIntVector, class ASWATCharacter*> OccupiedLookAtPoints;                              // 0x1D0(0x50)(NativeAccessSpecifierPublic)
	TMap<class AActor*, class FString>           CallOutQueue;                                      // 0x220(0x50)(NativeAccessSpecifierPublic)
	TArray<class AActor*>                        CallOutHistory;                                    // 0x270(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class AActor*, class ASWATCharacter*>   ReportQueue;                                       // 0x280(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_319D[0x7E8];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  SquadLeader;                                       // 0xAB8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<enum class ETeamType, struct FQueuedSwatCommand> QueuedSwatCommandMap;                              // 0xAC0(0x50)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class ESwatCommand                      CurrentDefaultCommand;                             // 0xB10(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         ActiveCommandTeam;                                 // 0xB11(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_319F[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USWATManager* GetDefaultObj();

	void RemoveHoldCommand(enum class ETeamType TeamType);
	void PlaySwatCommandVoiceLine(const class FString& VoiceLine, const class FString& OverrideSpearkerName, bool bTeamPrefix);
	void OnTrailerSearchComplete(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void OnSwatFinishedRoomSearch(class USearchAndSecureActivity* SearchAndSecureActivity, class ADoor* BreachedDoor);
	void OnSwatFinishedClearing(class UTeamBreachAndClearActivity* BreachAndClearActivity, bool bAuto);
	void OnLeaderToggledNightvision(class AReadyOrNotCharacter* Character, bool bOn);
	void OnActivityStarted(class UBaseActivity* Activity, class ACyberneticController* OwningController);
	bool IsSWATTeamHoldingPosition(enum class ETeamType Team);
	bool IsSWATTeamDead(enum class ETeamType Team);
	bool IsCharacterKnownEnemy(class AReadyOrNotCharacter* InCharacter);
	void GiveWedgeDoorCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, const struct FVector& CommandNormal);
	void GiveStackUpCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, const struct FVector& CommandNormal, bool bCheckDoor, enum class EStackUpStyle StackUpStyle);
	void GiveSearchAndSecureCommand_Individual(class AActor* Target, const struct FVector& CommandLocation, bool bOnlyCurrentRoom);
	void GiveSearchAndSecureCommand(enum class ETeamType TeamType, const struct FVector& CommandLocation, bool bOnlyCurrentRoom);
	void GiveScanDoorCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, enum class EDoorScanMethod ScanMethod);
	void GiveRestrainCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveReportTargetCommand(class AActor* Target, enum class ETeamType TeamType);
	void GiveRemoveWedgeCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, const struct FVector& CommandNormal);
	void GivePickLockCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveOpenDoorCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveMoveCommand(enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveHoldCommand(enum class ETeamType TeamType);
	void GiveFallInCommand(enum class ETeamType TeamType, enum class EFallInPattern FallInPattern);
	void GiveDropChemlightAtLocation(enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveDisarmTrapOnDoorCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveDisarmStandaloneTrapCommand(class AActor* Target, enum class ETeamType TeamType);
	void GiveDeployShield(enum class ETeamType TeamType);
	void GiveDeployNonLethalItemAtTargetCommand(class AReadyOrNotCharacter* Target, enum class ETeamType TeamType, enum class EItemCategory Item);
	void GiveDeployGrenadeAtLocation(enum class ETeamType TeamType, const struct FVector& CommandLocation, TSubclassOf<class ABaseGrenade> Grenade);
	void GiveCoverAreaCommand(enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveCollectEvidenceCommand(class AActor* Target, enum class ETeamType TeamType);
	void GiveCloseDoorCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation);
	void GiveCheckForTrapsCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, const struct FVector& CommandNormal);
	void GiveCheckForContactsCommand(class AActor* Target, enum class ETeamType TeamType, const struct FVector& CommandLocation, const struct FVector& CommandNormal);
	void GiveBreachAndClearCommand(class ADoor* Door, enum class EDoorBreachType DoorBreachType, enum class ETeamType TeamType, const struct FVector& CommandLocation, TSubclassOf<class ABaseItem> DoorBreachItemClass, TSubclassOf<class ABaseItem> DoorUseItemClass, bool bWithLeader, bool bWithLeaderItem, bool bAutoClear, bool bLastAutoClear, enum class EStackUpStyle CustomStackUpStyle);
	TArray<class ASWATCharacter*> GetSwatTeam();
	TArray<class ASWATCharacter*> GetSWATSortedByDistanceToLocationV2(const struct FVector& Location, const TArray<class ASWATCharacter*>& ExcludedSwat, enum class ETeamType FilterTeam, bool bAscendingOrder);
	TArray<class ASWATCharacter*> GetSWATSortedByDistanceToLocation(const struct FVector& Location, enum class ETeamType FilterTeam, class ADoor* StackUpDoor, bool bAscendingOrder);
	uint8 GetSWATCount();
	class ASWATCharacter* GetSwatCharacterAtSquadPosition(enum class ESquadPosition InSquadPosition);
	class AReadyOrNotCharacter* GetSquadLeader();
	enum class ESwatCommand GetQueuedSwatCommandForSquadPosition(enum class ESquadPosition SquadPosition);
	struct FVector GetAverageSwatLocation();
	bool CanGiveActivityToSWAT(class ASWATCharacter* Swat, enum class ETeamType Team);
};

// 0xA8 (0x308 - 0x260)
// Class ReadyOrNot.SwatTeamStatusWidget
class USwatTeamStatusWidget : public UUserWidget
{
public:
	class UVerticalBox*                          SWAT_Status_Container;                             // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandStatusWidget*              SWAT_Alpha_Status;                                 // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandStatusWidget*              SWAT_Beta_Status;                                  // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandStatusWidget*              SWAT_Charlie_Status;                               // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandStatusWidget*              SWAT_Delta_Status;                                 // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USwatCommandStatusWidget*              SWAT_Lead_Status;                                  // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseActivity*                         AlphaActivity;                                     // 0x290(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseActivity*                         BetaActivity;                                      // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseActivity*                         CharlieActivity;                                   // 0x2A0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseActivity*                         DeltaActivity;                                     // 0x2A8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseActivity*                         LeadActivity;                                      // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ESquadPosition, class ASWATCharacter*> InitialSquadMap;                                   // 0x2B8(0x50)(Transient, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class USwatTeamStatusWidget* GetDefaultObj();

	void UpdateStatus();
	void OnDefaultCommandIssued(class APlayerCharacter* Issuer, enum class ESwatCommand CommandIssued);
};

// 0x50 (0xA20 - 0x9D0)
// Class ReadyOrNot.Tablet
class ATablet : public ABaseItem
{
public:
	uint8                                        Pad_31A5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidgetComponent*                      WidgetComponent;                                   // 0x9E0(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTabletAwake;                                    // 0x9E8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31A6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              FocusedCameraRotation;                             // 0x9EC(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              FocusedItemRotation;                               // 0x9F8(0xC)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        FocusedMinimumHorizontalFov;                       // 0xA04(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FocusedTargetVerticalFov;                          // 0xA08(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TabletFocusInterpSpeed;                            // 0xA0C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31A7[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATablet* GetDefaultObj();

	void WakeScreen();
	void SleepScreen();
	void PlayVibrationEvent();
	void PlaySoundEvent(class UFMODEvent* Event);
	void PlayNotificationEvent();
	void OnMissionSelected();
};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.TabletDisplay
class UTabletDisplay : public UUserWidget
{
public:
	class ATablet*                               OwningTablet;                                      // 0x260(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTabletDisplay* GetDefaultObj();

};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.TableTennisPlayer
class ATableTennisPlayer : public AActor
{
public:
	class ATableTennisMachine*                   TargetGame;                                        // 0x220(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31A8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATableTennisPlayer* GetDefaultObj();

	void Server_StopPlaying();
	void Server_SetPosition(float NewPosition);
};

// 0xB0 (0x2D0 - 0x220)
// Class ReadyOrNot.TableTennisMachine
class ATableTennisMachine : public AActor
{
public:
	uint8                                        Pad_31A9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GameRenderDistance;                                // 0x228(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxScore;                                          // 0x22C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableTennisGame                      Game;                                              // 0x230(0x34)(Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_31AA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ATableTennisPlayer*                    LeftPlayer;                                        // 0x268(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ATableTennisPlayer*                    RightPlayer;                                       // 0x270(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                GameRenderTarget;                                  // 0x278(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHasInsertedCoin : 1;                              // Mask: 0x1, PropSize: 0x10x280(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_275 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31AB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractableComponent*                LeftPlayerInteractable;                            // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                RightPlayerInteractable;                           // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractableComponent*                InsertCoinInteractable;                            // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            NumberTexture;                                     // 0x2A0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            BackgroundTexture;                                 // 0x2A8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            StartTexture;                                      // 0x2B0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            ReadyTexture;                                      // 0x2B8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            InsertCoinTexture;                                 // 0x2C0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                            GameOverTexture;                                   // 0x2C8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ATableTennisMachine* GetDefaultObj();

	void OnRightPaddleHit();
	void OnLeftPaddleHit();
	void OnCoinInserted();
};

// 0x10 (0x340 - 0x330)
// Class ReadyOrNot.TabletWidget
class UTabletWidget : public UMissionPlanWidget
{
public:
	class UTeamViewWidget*                       TeamView;                                          // 0x330(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                       ScreenSwitcher;                                    // 0x338(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTabletWidget* GetDefaultObj();

	int32 GetActiveButton(int32 CurrentIndex, int32 NavigationDirection, const TArray<bool>& buttonVisibilities);
};

// 0x0 (0x288 - 0x288)
// Class ReadyOrNot.TacticalSlot_V2
class UTacticalSlot_V2 : public UCommonUserWidget
{
public:

	static class UClass* StaticClass();
	static class UTacticalSlot_V2* GetDefaultObj();

};

// 0x1D8 (0x370 - 0x198)
// Class ReadyOrNot.TakeCoverActivity
class UTakeCoverActivity : public UBaseActivity
{
public:
	uint8                                        Pad_31B7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxCoverFireCount;                                 // 0x1A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CoverFireTimeCooldown;                             // 0x1AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CoverFireCooldown;                                 // 0x1B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31B8[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCoverInstigatorStimulus              InstigatorStimulus;                                // 0x1C0(0x50)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_31B9[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 Door;                                              // 0x2B0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          LastExitMontagePlayed;                             // 0x2B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          EntryMontage;                                      // 0x2C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31BA[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTakeCoverActivity* GetDefaultObj();

	void TickMoveToCoverState(float DeltaTime, float Uptime);
	void TickCoverState(float DeltaTime, float Uptime);
	void TickCoverFireState(float DeltaTime, float Uptime);
	void OnTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnEnteredCover__DelegateSignature();
	void OnEnemyWeaponFire(class AReadyOrNotCharacter* Character, class ABaseMagazineWeapon* Weapon, const struct FVector& FireDirection);
	void ExitCoverState();
	void ExitCoverFireState();
	void EnterMoveToCoverState();
	void EnterCoverState();
	void EnterCoverFireState();
	void EnterCompleteState();
	void EnterCompleteAbruptState();
	bool CanStopCoverFire();
	bool CanFireFromCover();
	bool CanCover();
	bool CanCompleteCover();
	bool CanAbruptCompleteCover();
};

// 0x68 (0x200 - 0x198)
// Class ReadyOrNot.TakeCoverAtLandmarkActivity
class UTakeCoverAtLandmarkActivity : public UBaseActivity
{
public:
	class ACoverLandmark*                        CoverLandmark;                                     // 0x198(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACoverLandmarkProxy*                   ChosenEntryProxy;                                  // 0x1A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACoverLandmarkProxy*                   ChosenExitProxy;                                   // 0x1A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SearchRadius;                                      // 0x1B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31BE[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          EntryAnim;                                         // 0x1D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          ExitAnim;                                          // 0x1D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          LoopEntryAnim;                                     // 0x1E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          LoopExitAnim;                                      // 0x1E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AStaticMeshActor*>              IgnoredMeshActors;                                 // 0x1F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTakeCoverAtLandmarkActivity* GetDefaultObj();

	void TickMoveToLandmarkState(float DeltaTime, float Uptime);
	void Tick_Wait_State(float DeltaTime, float Uptime);
	void Tick_ExitLandmark_State(float DeltaTime, float Uptime);
	void Tick_EnterLandmark_State(float DeltaTime, float Uptime);
	void Tick_AbruptExit_State(float DeltaTime, float Uptime);
	bool ShouldWait();
	void OnTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnHeardYell(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void OnEnemyWeaponFire(class AReadyOrNotCharacter* Character, class ABaseMagazineWeapon* Weapon, const struct FVector& FireDirection);
	void EnterMoveToLandmarkState();
	void Enter_Wait_State();
	void Enter_ExitLandmark_State();
	void Enter_EnterLandmark_State();
	void Enter_AbruptExit_State();
	bool CanExitLandmark();
	bool CanEnterLandmark();
	bool CanAbruptlyExit();
};

// 0x98 (0x230 - 0x198)
// Class ReadyOrNot.TakeHostageActivity
class UTakeHostageActivity : public UBaseActivity
{
public:
	class ACyberneticCharacter*                  Hostage;                                           // 0x198(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeToSurrenderHostage;                            // 0x1A0(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31C1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  LastEnemySensed;                                   // 0x1A8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UInteractionsData*>  HostageInteractions;                               // 0x1B0(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_31C2[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTakeHostageActivity* GetDefaultObj();

	void TickTurnState(float DeltaTime, float Uptime);
	void TickTakingState(float DeltaTime, float Uptime);
	void TickMoveToState(float DeltaTime, float Uptime);
	void TickEndHostageTakeState(float DeltaTime, float Uptime);
	void TickBeginHostageTakeState(float DeltaTime, float Uptime);
	bool ShouldTurn();
	void OnTakeDamage(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* DamagedCharacter, class AActor* DamageCauser, float Damage, float HealthRemaining);
	void OnStunned(class AReadyOrNotCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnSensedCharacter(class AReadyOrNotCharacter* SensedCharacter);
	void OnHostageTakeTurnComplete_Slave(class AActor* Actor);
	void OnHostageTakeTurnComplete_Driver(class AActor* Actor);
	void OnHostageTakeStartComplete_Slave(class AActor* Actor);
	void OnHostageTakeStartComplete_Driver(class AActor* Actor);
	void OnHostageTakeKillComplete_Slave(class AActor* Actor);
	void OnHostageTakeKillComplete_Driver(class AActor* Actor);
	void OnHostageTakeEndComplete_Slave(class AActor* Actor);
	void OnHostageTakeEndComplete_Driver(class AActor* Actor);
	void OnHostageKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnHeardYell(class AReadyOrNotCharacter* Shouter, bool bLOS);
	void EnterTurnState();
	void EnterTakingState();
	void EnterMoveToState();
	void EnterEndHostageTakeState();
	void EnterBeginHostageTakeState();
	void EndTakingState();
	bool CanStartHostageTake();
	bool CanIdle();
	bool CanEndHostageTake();
};

// 0x500 (0x5B0 - 0xB0)
// Class ReadyOrNot.TargetingComponent
class UTargetingComponent : public UActorComponent
{
public:
	struct FVector                               ThreatTrackingIgnoredDirection;                    // 0xB0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31DF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ADoor*>                         AllowedTrackingDoors;                              // 0xC0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	class UAnimMontage*                          MontageFocalAnim;                                  // 0xD0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MontageFocalPoint;                                 // 0xD8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CustomFocusLocation;                               // 0xE4(0xC)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                CustomFocusActor;                                  // 0xF0(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AInterestOverrideZone*                 CurrentInterestZone;                               // 0xF8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               HeadTrackingLocation;                              // 0x100(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Threat;                                            // 0x10C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Tension;                                           // 0x110(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AThreatAwarenessActor*                 ThreatLookPoint;                                   // 0x118(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31E1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExposedToNoise                       LastHeardAggressiveNoise;                          // 0x128(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FExposedToNoise>    HeardNoises;                                       // 0x158(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FExposedToNoise                       LastHeardNoiseStimulus;                            // 0x1A8(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_31E2[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class AReadyOrNotCharacter*, float>     CharactersSeen;                                    // 0x1F0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	enum class ETargetingCompTracking            TrackingType;                                      // 0x240(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31E3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AReadyOrNotCharacter*>          KnownFriendlies;                                   // 0x248(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          KnownNeutrals;                                     // 0x258(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class AReadyOrNotCharacter*>          KnownEnemies;                                      // 0x268(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FVector                               LastKnownTargetPosition;                           // 0x278(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastKnownTargetPositionInLOS;                      // 0x284(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastSeenKnownTargetFrom;                           // 0x290(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_31E4[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceLastSeenTarget;                           // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastSeenEnemy;                            // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastSeenNeutral;                          // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastSeenFriendly;                         // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousTimeNotSeenTarget;                         // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousTimeNotSeenEnemy;                          // 0x2BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousTimeNotSeenFriendly;                       // 0x2C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PreviousTimeNotSeenNeutral;                        // 0x2C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeTrackingTarget;                                // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeTrackingEnemy;                                 // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeTrackingNeutral;                               // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeTrackingFriendly;                              // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastFriendlyDeath;                        // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastFriendlyTookDamage;                   // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastFriendlyStunned;                      // 0x2E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastEnemyDeath;                           // 0x2E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastEnemyTookDamage;                      // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastEnemyStunned;                         // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EngagementTimeUntilReachedLastBoneZone;            // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BoneRetargetingRate;                               // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastBoneRetarget;                         // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastKnownTrackingTime;                             // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AReadyOrNotCharacter*>          AITrackingMe;                                      // 0x300(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        bHasLOSToTarget : 1;                               // Mask: 0x1, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanSeeTarget : 1;                                 // Mask: 0x2, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHasLOSToLastTarget : 1;                           // Mask: 0x4, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanSeeLastTarget : 1;                             // Mask: 0x8, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bHasLOSToLastKnownTargetPosition : 1;              // Mask: 0x10, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_276 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        CurrentBoneTargetZoneIndex;                        // 0x311(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        PreviousBoneTargetZoneIndex;                       // 0x312(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31E5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TargetedBone;                                      // 0x314(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31E6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          BonesToTarget;                                     // 0x320(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_31E7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ABaseGrenade*                          SmokeGrenadeBetweenTarget;                         // 0x340(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ExposureFromEnemy;                                 // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        EnemyExposureFromUs;                               // 0x34C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        RequiredTimeTrackingTarget;                        // 0x350(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeTrackingHead;                                  // 0x354(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  TrackedTarget;                                     // 0x358(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  LastTrackedTarget;                                 // 0x360(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotCharacter*                  LastKnownEnemy;                                    // 0x368(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastMoveVectorFocalPoint;                          // 0x370(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31E9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ADoor*                                 LastTrackedDoor;                                   // 0x380(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeSinceLastHeardNoiseStimulus;                   // 0x388(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LatestNoiseLocation;                               // 0x38C(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AThreatAwarenessActor*                 LastThreatAwarenessActor;                          // 0x398(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSearchingPathAwareness;                           // 0x3A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31EB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeSinceGotLastThreatAwarenessActor;              // 0x3A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeUntilFinishedCheckingThreat;                   // 0x3A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntVector                            LastLookAtPoint;                                   // 0x3AC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class EPathedAwareness, struct FPathAwarenessInfo> LatestPathedAwareness;                             // 0x3B8(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPathedAwareness, struct FVector> LastSearchedPathedAwareness;                       // 0x408(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPathedAwareness, float>     PathAwarenessSearchTimeout;                        // 0x458(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<uint32, enum class EPathedAwareness>    PathedAwarenessQueryType;                          // 0x4A8(0x50)(Edit, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class AReadyOrNotCharacter*>          AllKnownCharacters;                                // 0x4F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_31EE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AThreatAwarenessActor*                 NearestThreat;                                     // 0x510(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AThreatAwarenessActor*                 NearestExtremeThreat;                              // 0x518(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31EF[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTargetingComponent* GetDefaultObj();

	void SetLastTrackedTarget(class AReadyOrNotCharacter* Target);
	void OnTrackedTargetStartedReloading(class APlayerCharacter* Character);
	void OnTrackedTargetKilled(class AReadyOrNotCharacter* Instigator, class AReadyOrNotCharacter* KilledCharacter);
	void OnTrackedTargetIncapacitated(class AReadyOrNotCharacter* IncapacitatedCharacter, class AReadyOrNotCharacter* InstigatorCharacter);
	void OnTrackedTargetExitedSurrender(class ACyberneticCharacter* Character, enum class ESurrenderExitType ExitType);
	bool IsTrackingMontagePosition();
	bool IsTrackedInKnownNeutrals(class AReadyOrNotCharacter* PlayerCharacter);
	bool IsTrackedInKnownFriendlies(class AReadyOrNotCharacter* PlayerCharacter);
	bool IsTrackedInKnownEnemies(class AReadyOrNotCharacter* PlayerCharacter);
	bool IsTrackedByKnownFriendly(class AReadyOrNotCharacter* Target);
	bool IsLookingAtFocalPoint(float Tolerance);
	bool HasSeenCharacterFor(class AReadyOrNotCharacter* InCharacter, float Seconds);
	bool HasLineOfSightToTrackedTarget();
	bool HasLineOfSightToLastTrackedTarget();
	bool HasLineOfSightToLastKnownTargetPosition();
	int32 GetVisibleKnownFriendlies();
	enum class ETargetingCompTracking GetTrackingType();
	class AReadyOrNotCharacter* GetTrackedTarget();
	float GetTimeTrackingTarget();
	float GetTimeTrackingHead();
	float GetTimeSinceLastSeenNeutral();
	float GetTimeSinceLastSeenFriendly();
	float GetTimeSinceLastSeenEnemy();
	class FName GetTargetedBone();
	float GetRequiredTrackingTime();
	class AThreatAwarenessActor* GetNearestThreat();
	class AThreatAwarenessActor* GetNearestExtremeThreat();
	class AReadyOrNotCharacter* GetLastTrackedTarget();
	struct FVector GetLastSeenKnownEnemyFrom();
	TArray<class FName> GetLastNoisesTags();
	struct FExposedToNoise GetLastNoiseByTag(class FName Tag);
	float GetLastKnownTrackingTimeConfig();
	struct FVector GetLastKnownEnemyPosition();
	class AReadyOrNotCharacter* GetLastKnownEnemy();
	struct FVector GetLastHeardNoiseLocation();
	struct FVector GetLastHeardAggressiveNoiseLocation();
	int32 GetKnownFriendlyCount();
	bool CanSeeTrackedTarget();
	bool CanSeeLastTrackedTarget();
	bool CanCharacterBeSeen(class AReadyOrNotCharacter* InCharacter);
	bool CanActorBeSeen(class AActor* InActor);
	bool AnyAITrackingMe();
	void AddKnownNeutral(class AReadyOrNotCharacter* Neutral);
	void AddKnownFriendly(class AReadyOrNotCharacter* Friendly);
	void AddKnownEnemy(class AReadyOrNotCharacter* Enemy, bool bForce);
	void AddCharacterToSeenMap(class AReadyOrNotCharacter* InCharacter);
};

// 0x18 (0x1B0 - 0x198)
// Class ReadyOrNot.TargetNextCivilianActivity
class UTargetNextCivilianActivity : public UBaseActivity
{
public:
	class ACyberneticCharacter*                  TargetingCivilian;                                 // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_31F9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTargetNextCivilianActivity* GetDefaultObj();

};

// 0x290 (0x16C0 - 0x1430)
// Class ReadyOrNot.Taser
class ATaser : public ABaseMagazineWeapon
{
public:
	class UMaterialInstanceDynamic*              TaserLightDynamicMaterial;                         // 0x1430(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            ProjectileHitResult;                               // 0x1438(0x88)(Net, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        CartridgesPerSlot;                                 // 0x14C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StartingCartridges;                                // 0x14C4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SweepForReactionVolumeSize;                        // 0x14C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CartridgeWeight;                                   // 0x14CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFiredCartridge;                                   // 0x14D0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDetachedProbes;                                   // 0x14D1(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3205[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlinkTime;                                         // 0x14D4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBlinkState;                                       // 0x14D8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3206[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxBatteryLevel;                                   // 0x14DC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinCableLength;                                    // 0x14E0(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxCableLength;                                    // 0x14E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CableGainRate;                                     // 0x14E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProbeMaxDistance;                                  // 0x14EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            DetachSoundEffect;                                 // 0x14F0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            DetachSoundEffectFMOD;                             // 0x14F8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PingStunDuration;                                  // 0x1500(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StunDurationRemaining;                             // 0x1504(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStartedStun;                                      // 0x1508(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3207[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            CrackleSoundEffect;                                // 0x1510(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            CrackleSoundEffectFMOD;                            // 0x1518(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            TaserHitEffectFMOD;                                // 0x1520(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABulletProjectile*                     LeftProjectile;                                    // 0x1528(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABulletProjectile*                     RightProjectile;                                   // 0x1530(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3208[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       TaserImpactParticle_Start;                         // 0x1540(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              TaserImpactParticleComp_Start;                     // 0x1548(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                       TaserImpactParticle_Loop;                          // 0x1550(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              TaserImpactParticleComp_LoopLeft;                  // 0x1558(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              TaserImpactParticleComp_LoopRight;                 // 0x1560(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3209[0x8C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DoorBlowOutForce;                                  // 0x15F4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                LeftCableAttachActor;                              // 0x15F8(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                RightCableAttachActor;                             // 0x1600(0x8)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          TaserFireLoop1P;                                   // 0x1608(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          TaserFireLoop3P;                                   // 0x1610(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>       TaserFireLoopCameraShake;                          // 0x1618(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_320A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCableComponent*                       TopCable;                                          // 0x1628(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCableComponent*                       BottomCable;                                       // 0x1630(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                LeftDoor;                                          // 0x1638(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                RightDoor;                                         // 0x1640(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                       CrackleSoundGenerator;                             // 0x1648(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODAudioComponent*                   CrackleSoundGeneratorFMOD;                         // 0x1650(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULaserAttachment>          LaserAttachmentClass;                              // 0x1658(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_320B[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATaser* GetDefaultObj();

	void Server_SetHoldingTaser(bool bNewHold);
	void Server_DetachProbes();
	void Server_DeliverStunToAttachedTarget();
	void OnRep_ProjectileReplicated();
	void Multicast_StopCrackleSoundEffect();
	void Multicast_StartCrackleSoundEffect();
	void Multicast_ResetDoors();
	void Multicast_ResetCableAttachments();
	void Multicast_PlayTaserHitEffect(const struct FHitResult& Hit);
	void Multicast_PlayFireEffects(bool bDryFire);
	void Multicast_PlayDetachEffect();
	void Multicast_HideCables();
	void Multicast_DestroyProjectiles();
	void HandleMeleeDeffered(const struct FHitResult& Hit);
	void DetachProbes();
};

// 0x8 (0x228 - 0x220)
// Class ReadyOrNot.TaserReactionVolume
class ATaserReactionVolume : public AActor
{
public:
	class UBoxComponent*                         Bounds;                                            // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATaserReactionVolume* GetDefaultObj();

	void OnTaserStunDelivered(class AReadyOrNotCharacter* Character, class ATaser* Taser);
};

// 0x40 (0x1E8 - 0x1A8)
// Class ReadyOrNot.TeamStackUpActivity
class UTeamStackUpActivity : public UTeamBaseActivity
{
public:
	class AStackUpActor*                         OccupiedStackUpActor;                              // 0x1A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_320E[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTeamStackUpActivity* GetDefaultObj();

	void PerformStackUpStage(float DeltaTime, float Uptime);
	void PerformStackedStage(float DeltaTime, float Uptime);
	void PerformCheckStage(float DeltaTime, float Uptime);
	void OnDoorOpened();
	void OnDoorChecked();
	bool IsCheckFinished();
	class ACyberneticCharacter* GetCharacterAtSquadPositionInStackUpArea(enum class ESquadPosition SquadPosition, enum class EStackupGenArea StackupArea);
	class ACyberneticCharacter* GetCharacterAtHighestSquadPositionInStackUpArea(enum class EStackupGenArea StackupArea);
	void ExitStackupStage();
	void ExitCheckStage();
	void EnterStackupStage();
	void EnterStackedStage();
	void EnterCheckStage();
	bool CanPerformCheck();
};

// 0xC8 (0x2B0 - 0x1E8)
// Class ReadyOrNot.TeamBreachAndClearActivity
class UTeamBreachAndClearActivity : public UTeamStackUpActivity
{
public:
	FMulticastInlineDelegateProperty_            OnCleared;                                         // 0x1E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_322E[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ACyberneticCharacter*                  AIBlockingClearingPath;                            // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACyberneticCharacter*                  ClearingLeader;                                    // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AThreatAwarenessActor*                 NearestThreat;                                     // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_322F[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTeamBreachAndClearActivity* GetDefaultObj();

	bool ShouldScan();
	void PerformScanStage(float DeltaTime, float Uptime);
	void PerformClearStage(float DeltaTime, float Uptime);
	void PerformBreachStage(float DeltaTime, float Uptime);
	void OnLeaderItemPrimaryUse(class AReadyOrNotCharacter* ItemOwner, class ABaseItem* Item);
	void OnLeaderGrenadeProjectileDetonated(class AGrenadeProjectile* InGrenadeProjectile);
	void OnLeaderGrenadeDetonated(class ABaseGrenade* InGrenade);
	void OnDoorScanFinished(class UBaseActivity* Activity, class ACyberneticController* Controller);
	void OnDoorBreachFinished(class UBaseActivity* InActivity, class ACyberneticController* InController);
	void OnDoorBreacherReady();
	void OnDoorBreacherBreaching();
	void OnDoorBreachActivityFinished(class UBaseActivity* InActivity, class ACyberneticController* InController);
	bool IsScanFinished();
	bool IsFinishedClearing();
	void EnterScanStage();
	void EnterClearStage();
	void EnterClearedStage();
	void EnterBreachStage();
	bool CanPerformClear();
	bool CanPerformBreach();
	void BreachAndClearComplete__DelegateSignature(class UTeamBreachAndClearActivity* Activity, bool bAuto);
};

// 0x0 (0x1A8 - 0x1A8)
// Class ReadyOrNot.TeamCoverAreaActivity
class UTeamCoverAreaActivity : public UTeamBaseActivity
{
public:

	static class UClass* StaticClass();
	static class UTeamCoverAreaActivity* GetDefaultObj();

};

// 0x20 (0x7F0 - 0x7D0)
// Class ReadyOrNot.TeamDeathmatchGM
class ATeamDeathmatchGM : public AReadyOrNotGameMode_PVP
{
public:
	bool                                         bSuddenDeath;                                      // 0x7D0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3231[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFMODEvent*                            MatchLoopMusic;                                    // 0x7D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchStartMusic;                                   // 0x7E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchEndMusic;                                     // 0x7E8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATeamDeathmatchGM* GetDefaultObj();

};

// 0x0 (0x7E0 - 0x7E0)
// Class ReadyOrNot.TeamDeathmatchGS
class ATeamDeathmatchGS : public AReadyOrNotGameState
{
public:

	static class UClass* StaticClass();
	static class ATeamDeathmatchGS* GetDefaultObj();

};

// 0x10 (0x1B8 - 0x1A8)
// Class ReadyOrNot.TeamFallinActivity
class UTeamFallinActivity : public UTeamBaseActivity
{
public:
	class ASWATCharacter*                        MyLeader;                                          // 0x1A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3236[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTeamFallinActivity* GetDefaultObj();

};

// 0x8 (0x268 - 0x260)
// Class ReadyOrNot.TeamPaperdollWidget
class UTeamPaperdollWidget : public UUserWidget
{
public:
	class UImage*                                Paperdoll_Image;                                   // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTeamPaperdollWidget* GetDefaultObj();

	void InitializeWidget(enum class ETeamType InTeam);
};

// 0x28 (0x2A0 - 0x278)
// Class ReadyOrNot.TeamProgressScoreWidget
class UTeamProgressScoreWidget : public UBaseWidget
{
public:
	enum class ETeamType                         Team;                                              // 0x278(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3237[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UProgressBar*                          ProgressBar_LeftAligned;                           // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Score_Text_LeftAligned;                            // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                          ProgressBar_RightAligned;                          // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            Score_Text_RightAligned;                           // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTeamProgressScoreWidget* GetDefaultObj();

};

// 0x170 (0x3E8 - 0x278)
// Class ReadyOrNot.TeamStatusWidget
class UTeamStatusWidget : public UBaseWidget
{
public:
	class UImage*                                TeamEmblem_Image_LeftAligned;                      // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                        Teammates_Container_LeftAligned;                   // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                TeamEmblem_Image_RightAligned;                     // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                        Teammates_Container_RightAligned;                  // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EHorizontalAlignment              Alignment;                                         // 0x298(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3238[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           TeamEmblemBrush;                                   // 0x2A0(0x88)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	enum class ETeamType                         Team;                                              // 0x328(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3239[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UTeamPaperdollWidget>      PaperdollWidgetClass;                              // 0x330(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  EmptyTeamText;                                     // 0x338(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FSlateColor                           EmptyTeamTextColor;                                // 0x350(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                        EmptyTeamTextFont;                                 // 0x378(0x58)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UTeamPaperdollWidget*>          TeamPaperdolls;                                    // 0x3D0(0x10)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                            EmptyTeam_Text;                                    // 0x3E0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTeamStatusWidget* GetDefaultObj();

	void InitializeTeam();
};

// 0xE0 (0x340 - 0x260)
// Class ReadyOrNot.TeamViewWidget
class UTeamViewWidget : public UUserWidget
{
public:
	class UInvalidationBox*                      InvalidationBox;                                   // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                PlayerViewImage;                                   // 0x268(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            PlayerNameText;                                    // 0x270(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            PlayerHealthStatusText;                            // 0x278(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                PlayerTeamIndicatorImage;                          // 0x280(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            SwitchViewText;                                    // 0x288(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            CloseViewText;                                     // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            CurrentViewIndexText;                              // 0x298(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<enum class ETeamType, struct FSlateColor> TeamColorMap;                                      // 0x2A0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<enum class EPlayerHealthStatus, struct FSlateColor> HealthStatusColorMap;                              // 0x2F0(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTeamViewWidget* GetDefaultObj();

	void Tick_TeamViewOn();
};

// 0x1F0 (0xBC0 - 0x9D0)
// Class ReadyOrNot.TelescopicLadder
class ATelescopicLadder : public ABaseDeployableGear
{
public:
	class USceneComponent*                       LadderVerticalIconPoint;                           // 0x9D0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       LadderHorizontalIconPoint;                         // 0x9D8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       LadderBottomMountPoint;                            // 0x9E0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       LadderTopMountPoint;                               // 0x9E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALadderSnapZone>           LadderSnapZoneBP;                                  // 0x9F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFreezeFrame;                                      // 0x9F8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3244[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxRollDegreesBeforeUnwalkable;                    // 0x9FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3245[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            FreezeTransform;                                   // 0xAA0(0x30)(Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3246[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShowGhostLadder;                                  // 0xAFC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowCollapsedLadder;                              // 0xAFD(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3247[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         CollapsedLadderAnim;                               // 0xB00(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3248[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            LastTransform;                                     // 0xB10(0x30)(Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ASkeletalMeshActor*                    GhostLadderActor;                                  // 0xB40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             GhostLadderMaterial;                               // 0xB48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         DroppedPhysics;                                    // 0xB50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         PlacedPhysics;                                     // 0xB58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PlacementSoundEvent;                               // 0xB60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            PickupSoundEvent;                                  // 0xB68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            CollideSoundEvent;                                 // 0xB70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeployed;                                         // 0xB78(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDeployedHorizontal;                               // 0xB79(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMounted;                                          // 0xB7A(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_324B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RetractedRungCount;                                // 0xB7C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALadderSnapZone*                       CurrentSnapZone;                                   // 0xB80(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWallFound;                                        // 0xB88(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_324C[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATelescopicLadder* GetDefaultObj();

	void Server_RemoveLadder();
	void Server_PlaceLadder();
	void Server_DeployLadderAtZone(class ALadderSnapZone* NewSnapZone);
	void OnRep_Deployed();
	void OnRep_CurrentSnapZone();
	void Multicast_PlaceLadder();
	void Multicast_DeployLadderAtZone(class ALadderSnapZone* NewSnapZone);
};

// 0x78 (0x2D8 - 0x260)
// Class ReadyOrNot.TextWidget
class UTextWidget : public UUserWidget
{
public:
	class UCommonTextBlock*                      Txt_Text;                                          // 0x260(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                  CurrentText;                                       // 0x268(0x18)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                        CurrentFont;                                       // 0x280(0x58)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTextWidget* GetDefaultObj();

};

// 0x10 (0x330 - 0x320)
// Class ReadyOrNot.TherapistWidget
class UTherapistWidget : public UCommonActivatableWidget
{
public:
	TArray<class URosterCharacter*>              CharactersInTherapy;                               // 0x320(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass();
	static class UTherapistWidget* GetDefaultObj();

	class FText GetTherapistText();
	TArray<class URosterCharacter*> GetCharactersInTherapy();
	void CloseTherapistWidget();
};

// 0x68 (0x288 - 0x220)
// Class ReadyOrNot.ThreatAwarenessActor
class AThreatAwarenessActor : public AActor
{
public:
	class USceneComponent*                       DefaultScene;                                      // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EThreatLevel                      ThreatLevel;                                       // 0x228(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_325D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FExitData>                     Exits;                                             // 0x230(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         UniqueExits;                                       // 0x240(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                  OwningRoom;                                        // 0x250(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADoor*                                 DoorThreat;                                        // 0x258(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFrontDoorThreat;                                  // 0x260(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsOutside;                                        // 0x261(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3261[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AThreatAwarenessActor*>         PathableThreatAwarenessActors;                     // 0x268(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FLookAtPoint>                  SwatLookAtPoints;                                  // 0x278(0x10)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AThreatAwarenessActor* GetDefaultObj();

	void RemoveAnyVisibleExits();
	bool IsDoorThreat();
	bool HasSpecificExitDoor(class ADoor* Door);
	bool HasExit();
	bool GetUniqueExtis(TArray<class ADoor*>* OutDoors);
	enum class EThreatLevel GetThreatLevel();
	bool GetRandomExitDoor(class ADoor** Door);
	class ADoor* GetAttachedDoor();
	void GenerateLookAtPoints();
};

// 0x58 (0x88 - 0x30)
// Class ReadyOrNot.ThreatAwarenessSubsystem
class UThreatAwarenessSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_3273[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AThreatAwarenessActor*>         AllThreatActors;                                   // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bDrawThreatAwarenessOctree : 1;                    // Mask: 0x1, PropSize: 0x10x48(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawThreatPoints : 1;                             // Mask: 0x2, PropSize: 0x10x48(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawThreatRoomNames : 1;                          // Mask: 0x4, PropSize: 0x10x48(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3274[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UThreatAwarenessSubsystem* GetDefaultObj();

	TArray<class AThreatAwarenessActor*> GetThreatsFromLocationBeyondRadius(const TArray<class AThreatAwarenessActor*>& InThreats, const struct FVector& Location, float MinDistance);
	void GetThreatsForLocation(TArray<class AThreatAwarenessActor*>* OutThreats, const struct FVector& Location, float MinDistance, bool bRequireLOS, class FName RoomName);
	class AThreatAwarenessActor* GetNearestHighestThreat(const TArray<class AThreatAwarenessActor*>& InThreats, const struct FVector& Location);
	class AThreatAwarenessActor* GetFurthestHighestThreat(const TArray<class AThreatAwarenessActor*>& InThreats, const struct FVector& Location, float MinDistance);
};

// 0x240 (0x460 - 0x220)
// Class ReadyOrNot.ThrownItem
class AThrownItem : public AActor
{
public:
	class AReadyOrNotCharacter*                  ThrowInstigator;                                   // 0x220(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ThrownInRoom;                                      // 0x228(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  StaticMesh;                                        // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TurnPhysicsOffDelay;                               // 0x248(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ThrowDistance;                                     // 0x24C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                       FirstBouncePath;                                   // 0x250(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FHitResult                            FirstBounceHit;                                    // 0x260(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3277[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       SecondBouncePath;                                  // 0x2F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FHitResult                            SecondBounceHit;                                   // 0x300(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3278[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       ThirdBouncePath;                                   // 0x390(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FHitResult                            ThirdBounceHit;                                    // 0x3A0(0x88)(IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3279[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector_NetQuantize>           CompletePath;                                      // 0x430(0x10)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                        BouncePt1;                                         // 0x440(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BouncePt2;                                         // 0x444(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        BouncePt3;                                         // 0x448(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_327A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ThrowSpeed;                                        // 0x450(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_327B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ThrowBounciness;                                   // 0x45C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AThrownItem* GetDefaultObj();

	void UpdateServerPath(TArray<struct FVector_NetQuantize>& Path, int32 Bounce1, int32 Bounce2, int32 Bounce3);
	void OnRep_ThrowPath();
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, struct FHitResult& Hit);
};

// 0x60 (0x4C0 - 0x460)
// Class ReadyOrNot.ThrownChemlight
class AThrownChemlight : public AThrownItem
{
public:
	class UPointLightComponent*                  LightSource;                                       // 0x460(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ChemlightColor;                                    // 0x468(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmissiveBrightness;                                // 0x478(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightIntensity;                                    // 0x47C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialGlowSpeed;                                  // 0x480(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightDimSpeed;                                     // 0x484(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestroyedDimSpeed;                                 // 0x488(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartDimTime;                                      // 0x48C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TotalLifeTime;                                     // 0x490(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_327C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    DestroyedDecal;                                    // 0x498(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightZOffset;                                      // 0x4A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightAdditionalHeight;                             // 0x4A4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestroyedDecalSize;                                // 0x4A8(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_327D[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              ChemlightMaterialInstance;                         // 0x4B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AThrownChemlight* GetDefaultObj();

};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.ThrownEvidenceActor
class AThrownEvidenceActor : public AActor
{
public:
	uint8                                        Pad_327F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         BoxComponent;                                      // 0x228(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABaseItem*                             OwningItem;                                        // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Rep_Location;                                      // 0x238(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              Rep_Rotation;                                      // 0x244(0xC)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3280[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AThrownEvidenceActor* GetDefaultObj();

	void OnBoxHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
};

// 0x0 (0x460 - 0x460)
// Class ReadyOrNot.ThrownGrenade
class AThrownGrenade : public AThrownItem
{
public:

	static class UClass* StaticClass();
	static class AThrownGrenade* GetDefaultObj();

};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.TOCManager
class ATOCManager : public AActor
{
public:
	uint8                                        Pad_3285[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       SceneComponent;                                    // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundSource*                          VoiceSoundSource;                                  // 0x230(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFMODEvent*                            TocEvent;                                          // 0x238(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTOCData                              CurrentTOCData;                                    // 0x240(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTOCData>                      QueuedTOCData;                                     // 0x258(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class ATOCManager* GetDefaultObj();

	void StopTOCAudio(bool bClearQueue);
	void StartTOCResponse(const class FString& Line, bool bIsNetworked, enum class ETOCPriority Priority);
	void Multicast_PlayTOCSound2D(const class FString& Filename);
	void IterateTOCQueue();
	bool IsTOCSpeakingLine(const class FString& Line);
	bool IsTOCSpeaking();
	class ATOCManager* Get();
};

// 0xB8 (0xE8 - 0x30)
// Class ReadyOrNot.TocSpeechData
class UTocSpeechData : public UDataAsset
{
public:
	class USoundCue*                             CivilianIncapacitated;                             // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             CivilianDead;                                      // 0x38(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             CivilianRestrained;                                // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             SuspectIncapacitated;                              // 0x48(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             SuspectDead;                                       // 0x50(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             SuspectRestrained;                                 // 0x58(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             OfficerDown;                                       // 0x60(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                             DOA;                                               // 0x68(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SWATVictory;                                       // 0x70(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SuspectVictory;                                    // 0x78(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SWATInCustody;                                     // 0x80(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SuspectInCustody_MP;                               // 0x88(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SWATReinforcements;                                // 0x90(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SuspectReinforcements;                             // 0x98(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            BothTeamsReinforcements;                           // 0xA0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SWATFriendlyFire;                                  // 0xA8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SuspectFriendlyFire;                               // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPEscorted;                                       // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPExecuted;                                       // 0xC0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SWATKilledVIP;                                     // 0xC8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            SuspectKilledVIP;                                  // 0xD0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPInCustody;                                      // 0xD8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            VIPReleased;                                       // 0xE0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UTocSpeechData* GetDefaultObj();

};

// 0x8 (0x1F0 - 0x1E8)
// Class ReadyOrNot.ToggleDoorActivity
class UToggleDoorActivity : public UDoorInteractionActivity
{
public:
	uint8                                        Pad_3296[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToggleDoorActivity* GetDefaultObj();

};

// 0x38 (0x1D0 - 0x198)
// Class ReadyOrNot.TrailerSearchAndSecureActivity
class UTrailerSearchAndSecureActivity : public UBaseActivity
{
public:
	TArray<class AActor*>                        AllSecurables;                                     // 0x198(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_329B[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                ClosestSecurable;                                  // 0x1C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UTrailerSearchAndSecureActivity* GetDefaultObj();

};

// 0x0 (0x1FE0 - 0x1FE0)
// Class ReadyOrNot.TrailerSWATCharacter
class ATrailerSWATCharacter : public ASWATCharacter
{
public:

	static class UClass* StaticClass();
	static class ATrailerSWATCharacter* GetDefaultObj();

};

// 0x80 (0x7F0 - 0x770)
// Class ReadyOrNot.TrainingGM
class ATrainingGM : public AReadyOrNotGameMode
{
public:
	TArray<class AReadyOrNotPlayerController*>   InitalizedPlayerControllers;                       // 0x770(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UCommanderProfile*                     CommanderProfile;                                  // 0x780(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_32AF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnTrainingEnded;                                   // 0x790(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FString                                SwatSpawnTag;                                      // 0x7A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACyberneticCharacter>      SWATAIClass;                                       // 0x7B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAIController>             FriendlyAIController;                              // 0x7B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASWATCharacter*>                SpawnedSWATAI;                                     // 0x7C0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActivityTriggerVolume*>        ActiveTriggerVolumes;                              // 0x7D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ACheckpointActivityTriggerVolume*      CurrentCheckpoint;                                 // 0x7E0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32B0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATrainingGM* GetDefaultObj();

	void TrainingEnd(bool bSuccess);
	void SpawnPolice(bool bSpawnWithPlayer);
	void RemoveAllSpawnedAI();
	void OnTrainingEnded__DelegateSignature(bool bSuccess);
	void FriendlyAIKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
};

// 0x8 (0x7E8 - 0x7E0)
// Class ReadyOrNot.TrainingGS
class ATrainingGS : public AReadyOrNotGameState
{
public:
	uint8                                        Pad_32B2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATrainingGS* GetDefaultObj();

};

// 0x38 (0x258 - 0x220)
// Class ReadyOrNot.TrainingTarget
class ATrainingTarget : public AActor
{
public:
	class UStaticMeshComponent*                  TargetMesh;                                        // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         SuccessBox;                                        // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                         FailureBox;                                        // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_            OnSuccessfulShot;                                  // 0x238(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnGrenadeHit;                                      // 0x248(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATrainingTarget* GetDefaultObj();

	void OnRadialDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
};

// 0xC0 (0x2E0 - 0x220)
// Class ReadyOrNot.TrapActor
class ATrapActor : public AActor
{
public:
	uint8                                        Pad_32C1[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  TrapMeshComponent;                                 // 0x248(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODAudioComponent*                   TrapActivateAudioComponent;                        // 0x250(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                InteractableComponent;                             // 0x258(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScoringComponent*                     ScoringComponent;                                  // 0x260(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                      SplineComponent;                                   // 0x268(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCableComponent*                       CutCableComponent1;                                // 0x270(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCableComponent*                       CutCableComponent2;                                // 0x278(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         TripWireTriggerComponent;                          // 0x280(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIPerceptionStimuliSourceComponent*   PerceptionStimuliComp;                             // 0x288(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       TrapRoot;                                          // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                AttachedActor;                                     // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                TrapName;                                          // 0x2A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETrapType                         TrapType;                                          // 0x2B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETrapState                        TrapStatus;                                        // 0x2B1(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseMultitoolWhenActivated;                     // 0x2B2(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInitializeTrapOnBeginPlay;                        // 0x2B3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32C2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           CableMesh;                                         // 0x2B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    CableMaterial;                                     // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            TrapTriggered;                                     // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_32C3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATrapActor* GetDefaultObj();

	void TrapTriggeredDelegate__DelegateSignature(class ATrapActor* Trap, class AReadyOrNotCharacter* TriggeredBy);
	void TrapInit();
	void TrapDeInit();
	void Server_OnTrapTriggered(class AReadyOrNotCharacter* TriggeredBy);
	void Server_OnTrapDisarmed();
	void OnTrapTriggered(class AReadyOrNotCharacter* TriggeredBy);
	void OnTrapDisarmed(class AReadyOrNotCharacter* DisarmedBy);
	void Multicast_OnTrapTriggered(class AReadyOrNotCharacter* TriggeredBy);
	void Multicast_OnTrapDisarmed();
};

// 0x60 (0x340 - 0x2E0)
// Class ReadyOrNot.TrapActorAttachedToDoor
class ATrapActorAttachedToDoor : public ATrapActor
{
public:
	class ADoor*                                 AttachedToDoor;                                    // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WireYPosition;                                     // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32C4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            CableTransform;                                    // 0x2F0(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USplineMeshComponent*>          CableMeshComponents;                               // 0x320(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                        CurveStrength;                                     // 0x330(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        MappedSplineLocation;                              // 0x334(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bChunk1Destroyed : 1;                              // Mask: 0x1, PropSize: 0x10x338(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bChunk2Destroyed : 1;                              // Mask: 0x2, PropSize: 0x10x338(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bSubdoorChunk1Destroyed : 1;                       // Mask: 0x4, PropSize: 0x10x338(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bSubdoorChunk2Destroyed : 1;                       // Mask: 0x8, PropSize: 0x10x338(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32C5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATrapActorAttachedToDoor* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class ReadyOrNot.TrapDamage
class UTrapDamage : public UDamageType
{
public:
	uint8                                        bDestroyAllDoorChunks : 1;                         // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32C6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTrapDamage* GetDefaultObj();

};

// 0xB8 (0x250 - 0x198)
// Class ReadyOrNot.TraverseHoleActivity
class UTraverseHoleActivity : public UBaseActivity
{
public:
	class AWallHoleTraversal*                    WallHoleTraversalActor;                            // 0x198(0x8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreCooldown : 1;                               // Mask: 0x1, PropSize: 0x10x1A0(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFromNavLink : 1;                                  // Mask: 0x2, PropSize: 0x10x1A0(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_277 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_32C7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          EntryAnim;                                         // 0x1A8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          ExitAnim;                                          // 0x1B0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                          LoopAnim;                                          // 0x1B8(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32C8[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTraverseHoleActivity* GetDefaultObj();

	void Tick_MoveToHole_State(float DeltaTime, float Uptime);
	void Tick_Move_State(float DeltaTime, float Uptime);
	void Tick_ExitHole_State(float DeltaTime, float Uptime);
	void Tick_EnterHole_State(float DeltaTime, float Uptime);
	bool ShouldMove();
	void Enter_MoveToHole_State();
	void Enter_Move_State();
	void Enter_ExitHole_State();
	void Enter_EnterHole_State();
	bool CanExitHole();
	bool CanEnterHole();
};

// 0x48 (0x2C0 - 0x278)
// Class ReadyOrNot.TugOfWarButton
class ATugOfWarButton : public AInteractionActor
{
public:
	enum class ETeamType                         OnlyTeamUse;                                       // 0x278(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32CA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ATugOfWarMover*                        Mover;                                             // 0x280(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCharacter*                      CurrentUser;                                       // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32CB[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATugOfWarButton* GetDefaultObj();

	void OnInfluencerStunned(class APlayerCharacter* StunnedCharacter, float Duration, enum class EStunType StunType, class AActor* DamageCauser);
	void OnInfluencerKilled(class AActor* Causer, class ACharacter* InstigatorCharacter, class ACharacter* KilledCharacter, struct FDamageEvent& DamageEvent, class APlayerState* LastPlayerState);
	void OnInfluencerArrested(class APlayerCharacter* ArrestedCharacter, class APlayerCharacter* InstigatorCharacter);
};

// 0x40 (0x810 - 0x7D0)
// Class ReadyOrNot.TugOfWarGM
class ATugOfWarGM : public AReadyOrNotGameMode_PVP
{
public:
	TArray<class APlayerCharacter*>              ArrestedBlueCharacters;                            // 0x7D0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APlayerCharacter*>              ArrestedRedCharacters;                             // 0x7E0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFMODEvent*                            TOWVictorySound;                                   // 0x7F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchLoopMusic;                                    // 0x7F8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchStartMusic;                                   // 0x800(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            MatchEndMusic;                                     // 0x808(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATugOfWarGM* GetDefaultObj();

};

// 0x8 (0x7E8 - 0x7E0)
// Class ReadyOrNot.TugOfWarGS
class ATugOfWarGS : public AReadyOrNotGameState
{
public:
	class ATugOfWarMover*                        Mover;                                             // 0x7E0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATugOfWarGS* GetDefaultObj();

};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.TugOfWarMover
class ATugOfWarMover : public AActor
{
public:
	class USplineComponent*                      MoverPath;                                         // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                MoverMesh;                                         // 0x228(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32CC[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoverSpeed;                                        // 0x240(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInvertVictoryPositions;                           // 0x244(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMoverForward;                                     // 0x245(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMoverMoving;                                      // 0x246(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32CD[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoverStartingPosition;                             // 0x248(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MoverCurrentPosition;                              // 0x24C(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bContested;                                        // 0x250(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32CE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APlayerCharacter*>              Influencers;                                       // 0x258(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATugOfWarMover* GetDefaultObj();

};

// 0x48 (0x268 - 0x220)
// Class ReadyOrNot.TugOfWarZone
class ATugOfWarZone : public AActor
{
public:
	bool                                         bZoneDisabled;                                     // 0x220(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32D1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ATugOfWarMover*                        Mover;                                             // 0x228(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         Bounds;                                            // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32D2[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATugOfWarZone* GetDefaultObj();

	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void OnInfluencerKilled(class AActor* Causer, class ACharacter* InstigatorCharacter, class ACharacter* KilledCharacter, struct FDamageEvent& DamageEvent, class APlayerState* LastPlayerState);
	void OnInfluencerArrested(class APlayerCharacter* ArrestedCharacter, class APlayerCharacter* InstigatorCharacter);
};

// 0x320 (0xC00 - 0x8E0)
// Class ReadyOrNot.TutorialGS
class ATutorialGS : public ACoopGS
{
public:
	struct FTutorialMissionData                  CurrentTutorialData;                               // 0x8E0(0x1A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 TutorialMenuLevel;                                 // 0xA80(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                       TutorialMenuStreamedLevel;                         // 0xAA8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                       CurrentTutorialStreamedLevel;                      // 0xAB0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 ShootingRangeLevel;                                // 0xAB8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 KillHouseLevel;                                    // 0xAE0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 BasicControlsLevel;                                // 0xB08(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 MirrorgunLevel;                                    // 0xB30(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 StackUpLevel;                                      // 0xB58(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 ArrestLevel;                                       // 0xB80(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 GrenadesLevel;                                     // 0xBA8(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 MovementLevel;                                     // 0xBD0(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32D3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bFinishedUsingTutorialMenu;                        // 0xBFA(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32D4[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATutorialGS* GetDefaultObj();

	void SetCurrentTutorialData(const struct FTutorialMissionData& TutorialData);
	void OnPostUpdateSwatCommands(class USwatCommandWidget* Widget, TArray<struct FSwatCommand>* SwatCommands);
	TSoftObjectPtr<class UWorld> GetCurrentTutorialStreamedLevel();
};

// 0x8 (0x280 - 0x278)
// Class ReadyOrNot.TutorialMenu
class UTutorialMenu : public UBaseWidget
{
public:
	uint8                                        Pad_32D5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTutorialMenu* GetDefaultObj();

};

// 0x50 (0x2A0 - 0x250)
// Class ReadyOrNot.TutorialMessageVolume
class ATutorialMessageVolume : public AReadyOrNotTriggerVolume
{
public:
	class FString                                MessageMapID;                                      // 0x250(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsBigPopUp;                                       // 0x260(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasDisplayedMessage;                              // 0x261(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32D6[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  MessageTitle;                                      // 0x268(0x18)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                          MessageContent;                                    // 0x280(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTutorialActionPromptSlot>     MessageActions;                                    // 0x290(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class ATutorialMessageVolume* GetDefaultObj();

	void TutorialBoxEndOverlap(class AActor* ThisActor, class AActor* OtherActor);
	void TutorialBoxBeginOverlap(class AActor* ThisActor, class AActor* OtherActor);
	void GenerateMessageContent();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.TutorialTextPrompt_Widget
class UTutorialTextPrompt_Widget : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UTutorialTextPrompt_Widget* GetDefaultObj();

};

// 0x80 (0x3A0 - 0x320)
// Class ReadyOrNot.TutorialWidget
class UTutorialWidget : public UCommonActivatableWidget
{
public:
	bool                                         bShowFooter;                                       // 0x320(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUsingGamepad;                                     // 0x321(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32D7[0x7E];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTutorialWidget* GetDefaultObj();

	void ShowMainWidget();
	void SetData(struct FTutorialWidgetData& InData);
	void RefreshWidget();
	void OnInputMethodChanged(enum class ECommonInputType InputMethod);
	void HideMainWidget();
	class FText GetTitle();
	class FText GetDescription();
};

// 0x10 (0x230 - 0x220)
// Class ReadyOrNot.UObjectListener
class AUObjectListener : public AActor
{
public:
	uint8                                        Pad_32D8[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AUObjectListener* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ReadyOrNot.UseabilityInterface
class IUseabilityInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IUseabilityInterface* GetDefaultObj();

	void OnFocusLost(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void OnFocusGain(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void MeleeInteract(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void Interact(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	class UInteractableComponent* GetInteractableComponent();
	void Fire(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void EndInteract(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void EndFire(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	void DoubleTapInteract(class AReadyOrNotCharacter* InteractInstigator, class UInteractableComponent* InInteractableComponent);
	float DetermineInteractionDistance();
	enum class EInputEvent DetermineInputEvent();
	float DetermineCurrentProgress();
	class FName DetermineAnimatedIcon();
	class FText DetermineActionText();
	bool CanInteractThroughHitActors(struct FHitResult& Hit);
	bool CanInteract();
};

// 0x50 (0x820 - 0x7D0)
// Class ReadyOrNot.VIPEscortGM
class AVIPEscortGM : public AReadyOrNotGameMode_PVP
{
public:
	FMulticastInlineDelegateProperty_            OnVIPKilled;                                       // 0x7D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnVIPFreed;                                        // 0x7E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APlayerController*                     VIPPlayer;                                         // 0x7F0(0x8)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStart_VIP_Spawn*                ChosenVIPSpawn;                                    // 0x7F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerCharacter>          VIPCharacterClass;                                 // 0x800(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  VIPSpawnTag;                                       // 0x808(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeToDeliverVIP;                                  // 0x810(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HostageHoldTime;                                   // 0x814(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32DA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AVIPEscortGM* GetDefaultObj();

	void VIPKilled(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void VIPFreed(class ACharacter* Freed, class ACharacter* Freer);
	void OnVIPKilledSignature__DelegateSignature(class AReadyOrNotCharacter* InstigatorCharacter, class AReadyOrNotCharacter* KilledCharacter);
	void OnVIPFreedSignature__DelegateSignature(class ACharacter* Freed, class ACharacter* Freer);
	bool IsVIPDead();
	bool IsVIPArrested();
	bool IsVIPAlive();
	class APlayerCharacter* GetVIPCharacter();
	enum class ETeamType GetCurrentVIPTeam();
};

// 0x70 (0x850 - 0x7E0)
// Class ReadyOrNot.VIPEscortGS
class AVIPEscortGS : public AReadyOrNotGameState
{
public:
	float                                        HoldVIP_TimeRemaining;                             // 0x7E0(0x4)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVIPArrested;                                      // 0x7E4(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanKillVIP;                                       // 0x7E5(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32DB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCharacter*                      VIPCharacter;                                      // 0x7E8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                     VIPPlayer;                                         // 0x7F0(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotPlayerState*                VIPPlayerState;                                    // 0x7F8(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         LastWinningTeam;                                   // 0x800(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVIPSelected;                                      // 0x801(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVIPKilled;                                        // 0x802(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         CurrentVIPTeam;                                    // 0x803(0x1)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReadyOrNotCharacter*                  RecentArrester;                                    // 0x808(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  RecentFreer;                                       // 0x810(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  RecentVIPKiller;                                   // 0x818(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  VIPRescueText;                                     // 0x820(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                  VIPExecuteText;                                    // 0x838(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AVIPEscortGS* GetDefaultObj();

	void OnRep_VIPKilled();
	void OnRep_VIPArrested();
};

// 0x0 (0x290 - 0x290)
// Class ReadyOrNot.VIPTriggerBox
class AVIPTriggerBox : public APVPTriggerBox
{
public:

	static class UClass* StaticClass();
	static class AVIPTriggerBox* GetDefaultObj();

	bool IsVIPInTriggerBox(class APlayerCharacter** OutVIPCharacter);
};

// 0x0 (0x258 - 0x258)
// Class ReadyOrNot.VisibilityBlockingVolume
class AVisibilityBlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AVisibilityBlockingVolume* GetDefaultObj();

};

// 0x70 (0x2D0 - 0x260)
// Class ReadyOrNot.VOIPTalkerEntryWidget
class UVOIPTalkerEntryWidget : public UUserWidget
{
public:
	TMap<enum class ETeamType, struct FSlateColor> VoiceTypeColorMap;                                 // 0x260(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                            PlayerName;                                        // 0x2B0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                            PlayerChannel;                                     // 0x2B8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                VoiceImage;                                        // 0x2C0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AReadyOrNotPlayerState*                PlayerState;                                       // 0x2C8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UVOIPTalkerEntryWidget* GetDefaultObj();

	class FText GetVoiceTypeText();
	struct FSlateColor GetVoiceTypeColor();
};

// 0x1A0 (0x3C0 - 0x220)
// Class ReadyOrNot.WallHoleTraversal
class AWallHoleTraversal : public AActor
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x228(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_278 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_32E0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Name;                                              // 0x230(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AStaticMeshActor>> IgnoredMeshActors;                                 // 0x240(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        CooldownAfterUse;                                  // 0x250(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavLinkProxyDistance;                              // 0x254(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32E1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            EntryTriggerBoxTransform;                          // 0x260(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               EntryTriggerBoxExtent;                             // 0x290(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32E2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            ExitTriggerBoxTransform;                           // 0x2A0(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               ExitTriggerBoxExtent;                              // 0x2D0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32E3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          EntryAnim;                                         // 0x2E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          LoopAnim;                                          // 0x2E8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          ExitAnim;                                          // 0x2F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                         OccupiedByController;                              // 0x2F8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavLinkProxy*                         NavLinkProxy;                                      // 0x300(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AController*, float>              CooldownMap;                                       // 0x308(0x50)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_32E4[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWallHoleTraversal* GetDefaultObj();

	void TestForMeshes();
	bool IsCooldownActiveFor(class AController* InController);
	void AddCooldownFor(class AController* InController, float InCooldownTime);
};

// 0x30 (0x250 - 0x220)
// Class ReadyOrNot.Watch
class AWatch : public AActor
{
public:
	class UStaticMeshComponent*                  WatchMesh;                                         // 0x220(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  HourHandMesh;                                      // 0x228(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  MinuteHandMesh;                                    // 0x230(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  SecondHandMesh;                                    // 0x238(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                  DateMesh;                                          // 0x240(0x8)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32E5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWatch* GetDefaultObj();

};

// 0x20 (0x240 - 0x220)
// Class ReadyOrNot.WeaponCacheActor
class AWeaponCacheActor : public AActor
{
public:
	TArray<TSubclassOf<class ABaseMagazineWeapon>> AvailableWeapons;                                  // 0x220(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USceneComponent*                       DefaultScene;                                      // 0x230(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArrowComponent*                       ArrowComponent;                                    // 0x238(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AWeaponCacheActor* GetDefaultObj();

	TSubclassOf<class ABaseMagazineWeapon> GetRandomAvailableWeapon();
};

// 0x0 (0x260 - 0x260)
// Class ReadyOrNot.WeaponWheel_ItemStat_Base
class UWeaponWheel_ItemStat_Base : public UUserWidget
{
public:

	static class UClass* StaticClass();
	static class UWeaponWheel_ItemStat_Base* GetDefaultObj();

};

// 0x40 (0xA8 - 0x68)
// Class ReadyOrNot.WeaponWheelScript
class UWeaponWheelScript : public UBaseRadialMenuScript
{
public:
	class FText                                  ItemName;                                          // 0x68(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                  ItemCategory;                                      // 0x80(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UWeaponWheelWidget*                    WeaponWheelOwner;                                  // 0x98(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCharacter*                      PlayerCharacter;                                   // 0xA0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UWeaponWheelScript* GetDefaultObj();

};

// 0x10 (0x410 - 0x400)
// Class ReadyOrNot.WeaponWheelWidget
class UWeaponWheelWidget : public URadialWidgetBase
{
public:
	TArray<class FName>                          Categories;                                        // 0x400(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UWeaponWheelWidget* GetDefaultObj();

	bool RemoveNullItemsFromCategory(class FName& WeaponWheelCategoryName);
	bool RemoveNullItemsFromAllCategories();
};

// 0x0 (0x278 - 0x278)
// Class ReadyOrNot.SpectatorCharacterHUD
class USpectatorCharacterHUD : public UBaseWidget
{
public:

	static class UClass* StaticClass();
	static class USpectatorCharacterHUD* GetDefaultObj();

	void TeamChatPressed();
	void OnNewCharacterViewed(class AReadyOrNotCharacter* NewViewTarget);
	void ChatPressed();
	void CenterPrint(class FName MessageType, float Duration, class APlayerCharacter* Other);
};

// 0x10 (0x288 - 0x278)
// Class ReadyOrNot.ObjectiveWidget
class UObjectiveWidget : public UBaseWidget
{
public:
	class UWidgetComponent*                      OwningComponent;                                   // 0x278(0x8)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeamType                         ObjectiveTeam;                                     // 0x280(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32E8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectiveWidget* GetDefaultObj();

	void SetObjectiveType(enum class EPlayerObjectiveMarkerType NewType);
	void SetObjectiveText(class FText& NewText);
};

// 0x220 (0x250 - 0x30)
// Class ReadyOrNot.WidgetsData
class UWidgetsData : public UDataAsset
{
public:
	TSubclassOf<class UUserWidget>               MagCheckUI;                                        // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             FireModeUI;                                        // 0x38(0x28)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             StartupMenu;                                       // 0x60(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             AuthenticationMenu;                                // 0x88(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             MainMenu;                                          // 0xB0(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             OptionsMenu;                                       // 0xD8(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             CustomizationMenu;                                 // 0x100(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             ChatBox;                                           // 0x128(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UUserWidget>>     Overlays;                                          // 0x150(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             Scoreboard;                                        // 0x160(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>               LoadingScreen;                                     // 0x188(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UMessageDisplayBox>      MessageDisplayBoxClass;                            // 0x190(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             Leaderboards;                                      // 0x1B8(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             CrosshairOverlay;                                  // 0x1E0(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                    UISoundClasses;                                    // 0x208(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UUserWidget>             EscapeMenu;                                        // 0x218(0x28)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponWheelWidget>        WeaponWheelWidget;                                 // 0x240(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBaseWidget>               ItemSelectionWidget;                               // 0x248(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWidgetsData* GetDefaultObj();

};

// 0x28 (0x248 - 0x220)
// Class ReadyOrNot.WorldBuildingPlacementActor
class AWorldBuildingPlacementActor : public AActor
{
public:
	TSubclassOf<class UWorldBuildingActivity>    Activity;                                          // 0x220(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACyberneticController*                 InUseByController;                                 // 0x228(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldBuildingActivity*                ActivityInstance;                                  // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoveActivity*                         MoveToActivityInstance;                            // 0x238(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       DefaultScene;                                      // 0x240(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class AWorldBuildingPlacementActor* GetDefaultObj();

	void OnWorldBuildingActivityFinished(class UBaseActivity* InActivity, class ACyberneticController* CyberneticController);
};

// 0x40 (0x68 - 0x28)
// Class ReadyOrNot.WorldGenSave
class UWorldGenSave : public USaveGame
{
public:
	TArray<struct FSavedThreatAwarenessActor>    SavedThreatAwarenessActors;                        // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSavedDoorActor>               SavedDoorActors;                                   // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSavedCoverActor>              SavedCoverActors;                                  // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSavedRoomData>                SavedRooms;                                        // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class UWorldGenSave* GetDefaultObj();

};

// 0x70 (0x290 - 0x220)
// Class ReadyOrNot.WorldDataGenerator
class AWorldDataGenerator : public AInfo
{
public:
	class USceneComponent*                       SceneComponent;                                    // 0x220(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADoor*>                         VisitedDoors;                                      // 0x228(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_32E9[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasWorldEverBeenGenerated;                        // 0x239(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32EA[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AThreatAwarenessActor*>         IgnoredExitThreats;                                // 0x240(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_32EB[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDoorwaysBlocked;                                  // 0x251(0x1)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32EC[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRoomGenData                          RoomData;                                          // 0x258(0x20)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_32ED[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWorldDataGenerator* GetDefaultObj();

	void UnblockAllDoorways();
	void ReportAllUnreachableSpawns();
	void GenerateWorldThreatAwarenessActors();
	void GenerateWorld();
	void GenerateStackUpPoints();
	void GenerateRooms();
	void GenerateCoverPoints();
	void GenerateAllDoorThreatAwarenessActors();
	void GenerateAllDoorPositions();
	void GenerateAllDoorClearPoints();
	void DestroyCoverPoints();
	void DestroyAllThreats();
	void DestroyAllStackups();
	void ClearNullReferences();
	void CalculateAllExits();
	void BlockAllDoorways();
};

// 0xB8 (0x2D8 - 0x220)
// Class ReadyOrNot.WorldTutorial
class AWorldTutorial : public AActor
{
public:
	class AActor*                                AttachedObject;                                    // 0x220(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTutorialWidgetData                   WidgetData;                                        // 0x228(0x78)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                         bEnableScreenspaceMarker;                          // 0x2A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseTutorialLocationForScreenspaceMarker;          // 0x2A1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWaitForCompletionClose;                           // 0x2A2(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bResetAfterCompletion;                             // 0x2A3(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LoginsUntilInvalid;                                // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETooltipActivationType            TutorialActivationType;                            // 0x2A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EScreenspaceMarkerType            ScreenspaceMarkerType;                             // 0x2A9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETutorialWidgetLocation           TutorialWidgetLocation;                            // 0x2AA(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32EE[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TutorialActivationDistance;                        // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsPlayerInRange;                                  // 0x2B0(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsTutorialVisible;                                // 0x2B1(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32EF[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTutorialWidget*                       TutorialWidget;                                    // 0x2B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                      ActivationComponent;                               // 0x2C0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32F0[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWorldTutorial* GetDefaultObj();

	void CompletionEvent();
};

// 0x120 (0x380 - 0x260)
// Class ReadyOrNot.ZeuzMatchmakingWidget
class UZeuzMatchmakingWidget : public UUserWidget
{
public:
	uint8                                        Pad_32F1[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMatchmakingStatus                MatchmakingStatus;                                 // 0x2A8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_32F2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FZeuzMatchMakingStatus                ZeuzMatchMakingStatus;                             // 0x2B0(0xD0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass();
	static class UZeuzMatchmakingWidget* GetDefaultObj();

	void TryConnectServer(const class FString& ConnectIp);
	void StopPartyMatchmaking();
	void StopMatchmaking();
	void StartPartyMatchmaking();
	void StartMatchmaking(const class FString& Region);
	void ResetMatchmaking();
	void OnZeuzMatchmakingUpdate(struct FZeuzMatchMakingStatus& Status, const class FString& Error);
	void OnZeuzMatchmakingCreate(struct FZeuzMatchMakingStatus& Status, const class FString& Error);
	void MatchmakingUpdate();
};

// 0x110 (0xAE0 - 0x9D0)
// Class ReadyOrNot.Zipcuffs
class AZipcuffs : public ABaseItem
{
public:
	class APlayerCharacter*                      PendingArrestCharacter;                            // 0x9D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReadyOrNotCharacter*                  TargetedCharacter;                                 // 0x9D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bArresting;                                        // 0x9E0(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32F3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ArrestMaxDistance;                                 // 0x9E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32F4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class ECollisionChannel>         ArrestCollisionChannels;                           // 0x9F0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                          UseZipcuffs_1P;                                    // 0xA00(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                          UseZipcuffs_3P;                                    // 0xA08(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArrestTime;                                        // 0xA10(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32F5[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInteractionsData*                     ForcedInteractionData;                             // 0xA20(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInteractionsData*>             StandingArrestInteractionSuspects;                 // 0xA28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInteractionsData*>             StandingArrestInteractionCivilians;                // 0xA38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInteractionsData*>             PvPArrestInteraction;                              // 0xA48(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UInteractionsData*                     ArrestRagdoll_Up;                                  // 0xA58(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionsData*                     ArrestRagdoll_Down;                                // 0xA60(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionsData*                     ArrestRagdoll_Left;                                // 0xA68(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionsData*                     ArrestRagdoll_Right;                               // 0xA70(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlacedZipcuffs>           SpawnedZipcuffsClass;                              // 0xA78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ZipcuffBone;                                       // 0xA80(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32F6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            SpawnCuffsTransform;                               // 0xA90(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                              SpawnCuffsRelativeRotation;                        // 0xAC0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               SpawnCuffsRelativeTranslation;                     // 0xACC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                            FMODZipcuffsArrest;                                // 0xAD8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass();
	static class AZipcuffs* GetDefaultObj();

	void Server_ArrestStart(class AReadyOrNotCharacter* TargetedChar);
	void Server_ArrestComplete();
	void Server_ArrestCancelled();
	void OnRagdollArrestInteractionStarted();
	void OnRagdollArrestComplete_Slave(class AActor* Slave);
	void OnRagdollArrestComplete_Driver(class AActor* Driver);
	void Multicast_OnRagdollArrestStart(class AReadyOrNotCharacter* ArrestTarget);
	void Client_ArrestComplete();
};

}


